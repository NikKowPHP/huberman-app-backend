# AI Context Reference: Please analyze the following project snapshot thoroughly to understand the codebase structure and content.
--- START FILE: .clinerules/rules.md ---

**Huberman App Project: Cline Workspace Interaction Rules**

**Preamble:** These rules govern the interaction between the User and Cline (the AI assistant) for the implementation of the Huberman App backend. The primary goal is to ensure development strictly follows the established project documentation, proceeds methodically one task at a time, maintains an accurate `backend_implementation_todo.md`, and includes phase reviews for quality assurance.

**Core Principles:**

1.  **Documentation is Sovereign:** All implementation requests and actions performed by Cline **MUST** align strictly with the specifications detailed in the project documentation files (`app_description.md`, `architecture_pan.md`, `database_plan.md`, `api_design_documentation.md`, `complex_workflows.md`, `component_breakdown.md`, `component_interfaces_interactions.md`, `database_migrations_plan.md`, `backend_implementation_todo.md`, `security_plan.md`, etc.). Cline should reference relevant documentation when implementing or explaining.
2.  **One Task Per Request:** The User will request **only one specific, actionable task** from the `backend_implementation_todo.md` checklist in each prompt. Complex tasks identified in the checklist should already be broken down into smaller sub-items; if not, the first request might be *to* break down a larger checklist item based on the docs.
3.  **Assume No Memory:** Treat each request as potentially stateless. While context windows help, Cline should primarily rely on the explicitly provided documentation and the specific task request in the current prompt.
4.  **User Verification is Final:** Cline assists with implementation and checks, but the User is ultimately responsible for verifying the correctness and completeness of the implementation against the documentation before confirming task completion.

**Requesting Work (User -> Cline):**

5.  **Reference Specific TODO Item:** Clearly state the exact task ID or description from the `backend_implementation_todo.md` checklist that needs implementation.
    *   *Example: "Please implement the subtask: '(TDD) Write tests for `User` model creation, relationships (...), attributes, fillable properties...' under Phase 2: User Model & Migration."*
6.  **Provide Necessary Context (If Applicable):** If the task relies heavily on a specific diagram, workflow, or section in another document, briefly mention or link to it for context (assuming Cline can access linked documents or the full snapshot).
7.  **Avoid Ambiguity & Multiple Tasks:** Do not combine multiple checklist items into one request. Avoid vague instructions like "Work on authentication" or "Implement the next step."

**Implementation Process (Cline -> User):**

8.  **Acknowledge & Verify Task Understanding:** Cline will first acknowledge the requested task and confirm its understanding by referencing the TODO item and potentially the relevant documentation sections it will consult.
9.  **Consult Documentation:** Before implementation, Cline **MUST** review the specified task in `backend_implementation_todo.md` and cross-reference the relevant sections in other documentation files (e.g., database schema, API design, component interactions, complex workflows) to ensure the implementation plan is accurate and complete.
10. **Ask for Clarification:** If the task description is ambiguous, conflicts with documentation, or lacks necessary detail (e.g., a specific validation rule isn't documented), Cline **MUST** ask the User for clarification *before* proceeding with implementation.
11. **Implement According to Plan:** Implement the requested task (e.g., generate code, write test cases, create migration content) strictly adhering to the project documentation, coding standards (PSR-12), TDD principles (if specified `(TDD)`), and security plan.
12. **Provide Implementation & Explanation:** Present the generated code or output clearly. Briefly explain *how* the implementation addresses the specific task requirements and aligns with the referenced documentation. Highlight any assumptions made if clarification wasn't sought/provided.

**Completion & TODO List Update:**

13. **Confirm Implementation Against Task:** After providing the implementation, Cline should explicitly state that it believes the specific requested task is complete according to the referenced documentation and requirements.
14. **Propose TODO Update:** Cline will propose the update to the `backend_implementation_todo.md` file, showing the specific line item marked as complete (`[x]`).
    *   *Example: "Implementation complete. Propose updating TODO:\n```diff\n- [ ] (TDD) Write tests for `User` model creation...\n+ [x] (TDD) Write tests for `User` model creation...\n```"*
15. **User Verification & Confirmation:** The User **MUST** review Cline's implementation thoroughly against the task requirements and documentation. Only *after* verification, the User confirms approval.
    *   *User Response Example: "Confirmed. Please update the `backend_implementation_todo.md` as proposed."* or *"Correction needed: The test is missing an assertion for the `email_verified_at` cast. Please revise."*
16. **Update TODO on Confirmation:** Upon User confirmation, Cline will provide the updated `backend_implementation_todo.md` content reflecting the change.

**Phase Review Process:**

17. **Triggered by User:** When the User believes all tasks within a specific Phase (e.g., "Phase 2: Core User & Authentication") are marked complete (`[x]`) in the TODO list, the User will request a "Phase Review".
    *   *User Request Example: "All tasks in Phase 2 appear complete. Please perform a Phase Review for Phase 2."*
18. **Cline Phase Review:** Cline will:
    *   Re-read the description and all tasks listed under that specific Phase in `backend_implementation_todo.md`.
    *   Re-read all *relevant* sections from the *entire* project documentation set that pertain to the scope of that Phase (e.g., for Phase 2, review Auth sections in API docs, user schema in DB docs, auth workflow in complex workflows, etc.).
    *   Review the *collective implementation* provided for the tasks within that Phase (assuming it's available in the context/session history).
19. **Report Findings:** Cline will provide a summary report stating:
    *   Confirmation that all tasks within the Phase appear implemented and align with the reviewed documentation.
    *   **OR** A list of any discrepancies found, potential gaps, inconsistencies with documentation, missed requirements, or violations of principles (like security or coding standards) based on its review of the Phase's implementation against the docs.

**Handling Issues & Conflicts:**

20. **Report Conflicts:** If Cline identifies a direct conflict between different documentation files or between the documentation and a requested task during implementation, it must halt and report the conflict to the User for resolution.
21. **Query Out-of-Scope Requests:** If the User requests a task *not* present in `backend_implementation_todo.md` or functionality *not* described in the documentation, Cline must point this out and ask the User if the documentation/TODO list needs updating first.

---

By adhering to these rules, you create a structured, traceable, and quality-focused workflow that leverages the AI's ability to generate code and process information while keeping development grounded in the agreed-upon project plan and documentation.--- END FILE: .clinerules/rules.md ---

--- START FILE: .editorconfig ---
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

[*.{yml,yaml}]
indent_size = 2

[docker-compose.yml]
indent_size = 4
--- END FILE: .editorconfig ---

--- START FILE: .env ---
APP_NAME="Huberman App"
APP_ENV=local
APP_KEY=base64:doNgHhdGxaLygevq9+txnx8ro2R1tUCKD4kHATgw2hQ=
APP_DEBUG=true
APP_URL=http://localhost

APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US

APP_MAINTENANCE_DRIVER=file
# APP_MAINTENANCE_STORE=database

PHP_CLI_SERVER_WORKERS=4

BCRYPT_ROUNDS=12

LOG_CHANNEL=stack
LOG_STACK=single
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=pgsql
DB_HOST=db
DB_PORT=5432
DB_DATABASE=huberman_app
DB_USERNAME=huberman_user
DB_PASSWORD=secret

SESSION_DRIVER=database
SESSION_LIFETIME=120
SESSION_ENCRYPT=false
SESSION_PATH=/
SESSION_DOMAIN=null

BROADCAST_CONNECTION=log
FILESYSTEM_DISK=local
QUEUE_CONNECTION=database

CACHE_STORE=database
# CACHE_PREFIX=

MEMCACHED_HOST=127.0.0.1

REDIS_CLIENT=phpredis
REDIS_HOST=redis
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=log
MAIL_SCHEME=null
MAIL_HOST=127.0.0.1
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

VITE_APP_NAME="${APP_NAME}"


1_API_KEY=AIzaSyD95HFihaETJW9s0nwiSOSuiw7nTCHRlKA
2_API_KEY--- END FILE: .env ---

--- START FILE: .env.example ---
APP_NAME=Laravel
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US

APP_MAINTENANCE_DRIVER=file
# APP_MAINTENANCE_STORE=database

PHP_CLI_SERVER_WORKERS=4

BCRYPT_ROUNDS=12

LOG_CHANNEL=stack
LOG_STACK=single
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=sqlite
# DB_HOST=127.0.0.1
# DB_PORT=3306
# DB_DATABASE=laravel
# DB_USERNAME=root
# DB_PASSWORD=

SESSION_DRIVER=database
SESSION_LIFETIME=120
SESSION_ENCRYPT=false
SESSION_PATH=/
SESSION_DOMAIN=null

BROADCAST_CONNECTION=log
FILESYSTEM_DISK=local
QUEUE_CONNECTION=database

CACHE_STORE=database
# CACHE_PREFIX=

MEMCACHED_HOST=127.0.0.1

REDIS_CLIENT=phpredis
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=log
MAIL_SCHEME=null
MAIL_HOST=127.0.0.1
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

VITE_APP_NAME="${APP_NAME}"




--- END FILE: .env.example ---

--- START FILE: .env.testing ---
APP_NAME="Huberman App (Testing)"
APP_ENV=testing
APP_KEY=base64:doNgHhdGxaLygevq9+txnx8ro2R1tUCKD4kHATgw2hQ=
APP_DEBUG=true
APP_URL=http://localhost

APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US

APP_MAINTENANCE_DRIVER=file
# APP_MAINTENANCE_STORE=database

PHP_CLI_SERVER_WORKERS=4

BCRYPT_ROUNDS=4

LOG_CHANNEL=stack
LOG_STACK=single
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=pgsql
DB_HOST=127.0.0.1
DB_PORT=5433
DB_DATABASE=huberman_app_test
DB_USERNAME=huberman_user
DB_PASSWORD=secret

SESSION_DRIVER=database
SESSION_LIFETIME=120
SESSION_ENCRYPT=false
SESSION_PATH=/
SESSION_DOMAIN=null

BROADCAST_CONNECTION=log
FILESYSTEM_DISK=local
QUEUE_CONNECTION=database

CACHE_STORE=database
# CACHE_PREFIX=

MEMCACHED_HOST=127.0.0.1

REDIS_CLIENT=phpredis
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=log
MAIL_SCHEME=null
MAIL_HOST=127.0.0.1
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

VITE_APP_NAME="${APP_NAME}"
--- END FILE: .env.testing ---

--- START FILE: .gitattributes ---
* text=auto eol=lf

*.blade.php diff=html
*.css diff=css
*.html diff=html
*.md diff=markdown
*.php diff=php

/.github export-ignore
CHANGELOG.md export-ignore
.styleci.yml export-ignore
--- END FILE: .gitattributes ---

--- START FILE: .gitignore ---
/.phpunit.cache
/node_modules
/public/build
/public/hot
/public/storage
/storage/*.key
/storage/pail
/vendor
.env
.env.backup
.env.production
.phpactor.json
.phpunit.result.cache
Homestead.json
Homestead.yaml
npm-debug.log
yarn-error.log
/auth.json
/.fleet
/.idea
/.nova
/.vscode
/.zed
--- END FILE: .gitignore ---

--- OTHER FILE (application/json): .phpunit.result.cache ---

--- START FILE: app/Http/Controllers/Controller.php ---
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}
--- END FILE: app/Http/Controllers/Controller.php ---

--- START FILE: app/Models/User.php ---
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory;
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }
}
--- END FILE: app/Models/User.php ---

--- START FILE: app/Modules/CoreApi/Http/Controllers/Api/BaseApiController.php ---
<?php

namespace App\Modules\CoreApi\Http\Controllers\Api;

use App\Http\Controllers\Controller;

class BaseApiController extends Controller
{
    // Define common methods or traits here if needed
}
--- END FILE: app/Modules/CoreApi/Http/Controllers/Api/BaseApiController.php ---

--- START FILE: app/Modules/CoreApi/Traits/ApiResponseHelpers.php ---
<?php

namespace App\Modules\CoreApi\Traits;

use Illuminate\Http\JsonResponse;

trait ApiResponseHelpers
{
    /**
     * Return a success JSON response.
     *
     * @param  mixed  $data
     * @param  string  $message
     * @param  int|null  $status
     * @return \Illuminate\Http\JsonResponse
     */
    protected function success(mixed $data, string $message = null, int $status = 200): JsonResponse
    {
        return response()->json([
            'success' => true,
            'message' => $message,
            'data' => $data,
        ], $status);
    }

    /**
     * Return an error JSON response.
     *
     * @param  string  $message
     * @param  int  $status
     * @param  mixed  $data
     * @return \Illuminate\Http\JsonResponse
     */
    protected function error(string $message = null, int $status = 400, mixed $data = null): JsonResponse
    {
        return response()->json([
            'success' => false,
            'message' => $message,
            'data' => $data,
        ], $status);
    }
}
--- END FILE: app/Modules/CoreApi/Traits/ApiResponseHelpers.php ---

--- START FILE: app/Providers/AppServiceProvider.php ---
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        //
    }
}
--- END FILE: app/Providers/AppServiceProvider.php ---

--- START FILE: app_documentation/ complex_workflows.md ---
**Huberman App: Complex Workflow & Algorithm Design**

**1. Introduction**

This document details the specific logic and design patterns for key complex workflows within the Huberman App backend. It elaborates on the processes outlined in `detailed_plan.md` and builds upon the modular structure defined in `component_breakdown.md` and `component_interfaces_interactions.md`. The goal is to provide clear implementation guidance for developers working on these critical features.

**2. Subscription Lifecycle Management**

*   **Goal:** To accurately track the state of a user's subscription across different providers (Stripe, Apple IAP, Google Play Billing) based on webhook events and scheduled checks.
*   **Key Components:**
    *   `SubscriptionBilling` Module: `SubscriptionService`, `WebhookController`, `Subscription` Model.
    *   `plans` table, `subscriptions` table (`status`, `ends_at`, `trial_ends_at` columns are crucial).
    *   Payment Providers: Stripe/Paddle/Apple/Google sending webhooks/notifications.
*   **Core Logic (State Machine):** The `subscriptions.status` field represents the current state. Transitions are triggered primarily by provider webhooks handled by the `WebhookController` which delegates processing to the `SubscriptionService`.

    *   **States:**
        *   `incomplete`: Initial state after checkout initiation but before successful payment (relevant for Stripe Checkout/Paddle).
        *   `trialing`: User is in a free trial period (requires `trial_ends_at` to be set).
        *   `active`: User has a paid, currently valid subscription. `ends_at` indicates the end of the current paid period.
        *   `past_due`: Payment failed, provider is retrying (Stripe/Paddle specific). Grace period might apply.
        *   `canceled`: User explicitly canceled *or* payment failed definitively. Subscription may remain active until `ends_at`. Feature access depends on whether `ends_at` is in the future.
        *   `expired`: The subscription period (`ends_at`) has passed, and it was not renewed (either due to cancellation or final payment failure). No access.

    *   **State Transitions (Conceptual - Provider events may vary):**
        *   **(Checkout) -> `incomplete`**: User initiates checkout (Stripe/Paddle).
        *   `incomplete` -> `active`/`trialing`: `checkout.session.completed` (Stripe), `subscription_created` (Paddle) webhook received with successful payment or trial setup. Update `status`, `ends_at`, `trial_ends_at`.
        *   `trialing` -> `active`: `invoice.payment_succeeded` (Stripe) or `subscription_payment_succeeded` (Paddle) after trial ends. Update `status`, `ends_at`. *OR* could happen via scheduled job checking `trial_ends_at`.
        *   `trialing` -> `expired`: Trial ends, no payment method, or user canceled during trial. `customer.subscription.updated` (Stripe), `subscription_canceled` (Paddle), `DID_FAIL_TO_RENEW` (Apple), `SUBSCRIPTION_EXPIRED` (Google). Update `status`.
        *   `active` -> `active`: Renewal successful. `invoice.payment_succeeded` (Stripe), `subscription_payment_succeeded` (Paddle), `DID_RENEW` (Apple), `SUBSCRIPTION_RENEWED` (Google). Update `ends_at` for the next period.
        *   `active` -> `past_due`: Renewal payment fails. `invoice.payment_failed` (Stripe - requires action), `subscription_payment_failed` (Paddle). Update `status`.
        *   `active` -> `canceled`: User cancels via provider portal/app. `customer.subscription.updated` (Stripe - `cancel_at_period_end=true`), `subscription_canceled` (Paddle), `DID_CHANGE_RENEWAL_STATUS` (Apple - off), `SUBSCRIPTION_CANCELED` (Google). Update `status`. Subscription *might* remain usable until `ends_at`.
        *   `past_due` -> `active`: Successful payment after retry. `invoice.payment_succeeded` (Stripe), `subscription_payment_succeeded` (Paddle). Update `status`, `ends_at`.
        *   `past_due` -> `canceled`: Final retry fails. `customer.subscription.updated` (Stripe - status `canceled`), `subscription_payment_failed` (Paddle - after retries). Update `status`. Set `ends_at` to now/past if not already.
        *   `canceled` -> `expired`: `ends_at` date is reached for a canceled subscription. Can be handled by a scheduled job checking `subscriptions` where `status = canceled` and `ends_at <= NOW()`. Update `status`.

    *   **Webhook Handling:** `WebhookController` receives POST request, verifies signature (critical!), determines provider and event type, and calls `SubscriptionService::handleWebhook()`. Service parses payload, finds relevant `User`/`Subscription`, updates DB state, and fires internal Laravel events (e.g., `SubscriptionRenewed`, `SubscriptionCanceled`) for other modules to react to.
    *   **Provider Differences:** Apple/Google require server-side receipt validation and parsing specific notification types (App Store Server Notifications V2 / Google Play Developer API RTDN). Logic needs to map their events to the internal state machine.

**3. Feature Gating Logic**

*   **Goal:** To restrict access to premium API routes and potentially limit usage of certain features (e.g., number of notes) based on the user's active subscription status.
*   **Key Components:**
    *   Laravel Middleware (e.g., `CheckPremiumAccess`).
    *   Laravel Policies (e.g., `NotePolicy`).
    *   `SubscriptionBilling` Module: `SubscriptionServiceInterface::userHasActivePremiumSubscription()`.
    *   `subscriptions` table.
    *   Redis Cache.
*   **Core Logic (Middleware Example - `CheckPremiumAccess`):**
    ```php
    // App/Http/Middleware/CheckPremiumAccess.php (Conceptual)
    namespace App\Http\Middleware;

    use Closure;
    use Illuminate\Http\Request;
    use Illuminate\Support\Facades\Auth;
    use Illuminate\Support\Facades\Cache;
    use App\Modules\SubscriptionBilling\Contracts\SubscriptionServiceInterface; // Use Interface

    class CheckPremiumAccess
    {
        protected $subscriptionService;

        public function __construct(SubscriptionServiceInterface $subscriptionService) {
            $this->subscriptionService = $subscriptionService;
        }

        public function handle(Request $request, Closure $next)
        {
            $user = Auth::user();

            if (!$user) {
                return response()->json(['message' => 'Unauthenticated.'], 401); // Should be handled by 'auth:sanctum' earlier
            }

            // 1. Check Cache First
            $cacheKey = "user:{$user->id}:is_premium";
            $isPremium = Cache::get($cacheKey);

            if ($isPremium === null) {
                // 2. Cache Miss: Ask the Subscription Service
                $isPremium = $this->subscriptionService->userHasActivePremiumSubscription($user);
                // 3. Update Cache (e.g., for 15 minutes)
                Cache::put($cacheKey, $isPremium, now()->addMinutes(15));
            }

            if (!$isPremium) {
                // 4. Deny Access if not Premium
                return response()->json(['message' => 'Premium subscription required.'], 403);
            }

            // 5. Allow Access
            return $next($request);
        }
    }
    ```
*   **Core Logic (`SubscriptionServiceInterface::userHasActivePremiumSubscription`):**
    *   Takes a `User` object as input.
    *   Queries the `subscriptions` table:
        *   `WHERE user_id = ?`
        *   `WHERE status IN ['active', 'trialing']` (Or just `active` if trials don't grant full access).
        *   *(Optional but recommended)* `WHERE (ends_at IS NULL OR ends_at > NOW())` - Handles cases where status might be `canceled` but still within the paid period.
        *   Needs join/check against `plans` table to ensure the active subscription is for a *premium* plan type.
    *   Returns `true` if such a subscription exists, `false` otherwise.
*   **Policy Integration:** Policies (e.g., `NotePolicy::create(User $user)`) can inject `SubscriptionServiceInterface` and call `userHasActivePremiumSubscription()` or check feature flags (e.g., note limits based on plan) as part of their authorization logic.
*   **Application:** Apply the `CheckPremiumAccess` middleware to API routes/groups in `routes/api.php` that correspond to premium features. Use Policies for model-specific authorization checks within controllers.

**4. Customizable Reminders (Premium)**

*   **Goal:** Allow premium users to set custom reminders for specific protocols, triggering a push notification at the user-defined time/frequency in their local timezone.
*   **Key Components:**
    *   `ProtocolEngine` Module: `ReminderController`, `ReminderService`, `UserReminder` Model (stores `user_id`, `protocol_id`, `reminder_time`, `frequency`, `timezone`, `last_sent_at`, `is_active`, `device_token` - *CRITICAL*).
    *   Laravel Task Scheduling (`app/Console/Kernel.php`).
    *   Laravel Queues & Workers.
    *   `SendProtocolReminderNotification` Job & Notification class.
    *   Push Notification Service (e.g., FCM, APNS via Laravel Notifications or specific SDKs).
    *   React Native App (responsible for getting and sending the device token to the backend).
*   **Core Logic:**

    1.  **Device Token Registration:** When the user logs in or enables notifications, the React Native app gets the unique device push token (FCM/APNS) and sends it to the backend API (e.g., `POST /api/user/device-token`). The backend stores this token, likely associated with the `User` model or a dedicated `devices` table. *Storing multiple tokens per user is necessary if they use multiple devices.*
    2.  **Reminder Creation (API):** User interacts with RN UI -> `POST /api/reminders` -> `ReminderController` -> `ReminderService::setReminder()`.
        *   Service validates input (requires premium check).
        *   Saves reminder details to `user_reminders` table, including user's selected time, frequency (daily, weekly, specific days), protocol, and user's current timezone (stored e.g., on `users` table or passed in request). *Crucially, it needs access to the user's valid device token(s) when the notification job runs.*
    3.  **Scheduled Task (`Kernel.php`):** A console command is scheduled to run frequently (e.g., every minute).
        ```php
        // app/Console/Kernel.php
        protected function schedule(Schedule $schedule)
        {
            $schedule->command('reminders:send-due')->everyMinute();
            // OR use $schedule->job(new ProcessDueReminders)->everyMinute();
        }
        ```
    4.  **Processing Due Reminders (`reminders:send-due` Command / `ProcessDueReminders` Job):**
        *   Get the current time (UTC).
        *   Query the `user_reminders` table for active reminders (`is_active = true`).
        *   **Crucially, for each reminder:**
            *   Convert the *current UTC time* to the *user's stored timezone*.
            *   Check if the user's local time matches the `reminder_time` stored for the reminder.
            *   Check if the frequency matches (e.g., is it the correct day of the week?).
            *   Check `last_sent_at` to avoid double-sending if the job runs slightly late.
        *   For each reminder determined to be *due now*:
            *   Dispatch a `SendProtocolReminderNotification` job to the queue, passing the `user_reminder_id` or necessary details.
            ```php
            // Conceptual Command/Job Logic
            $nowUtc = now();
            $dueReminders = UserReminder::where('is_active', true)->cursor(); // Use cursor for memory efficiency

            foreach ($dueReminders as $reminder) {
                $userTimezone = $reminder->user->timezone ?? 'UTC'; // Get user timezone
                $nowInUserTz = $nowUtc->copy()->setTimezone($userTimezone);
                $reminderTime = Carbon::parse($reminder->reminder_time, $userTimezone); // Time stored without date

                // Compare times (HH:MM) and check frequency/day constraints
                if ($nowInUserTz->format('H:i') == $reminderTime->format('H:i') && /* check frequency match */ && /* check not recently sent */) {
                   SendProtocolReminderNotification::dispatch($reminder);
                   // Optionally update last_sent_at here or in the job
                }
            }
            ```
    5.  **Sending Notification (`SendProtocolReminderNotification` Job):**
        *   Executed by a queue worker.
        *   Retrieves the `UserReminder` and associated `User` and `Protocol`.
        *   Fetches the target user's valid device token(s) (from `users` or `devices` table).
        *   Constructs the notification payload (title, body with protocol name).
        *   Uses Laravel's Notification system (e.g., `Notification::send($user, new ProtocolReminder($protocol))`) or a specific service (FCM/APNS) to send the push notification to the user's device token(s).
        *   Handles potential errors (e.g., invalid token). Updates `last_sent_at` on the `UserReminder`.

**5. Tracking & Visualization Logic (Premium)**

*   **Goal:** Allow premium users to log their adherence to protocols and view progress visualizations like streaks or completion rates.
*   **Key Components:**
    *   `ProtocolEngine` Module: `TrackingController`, `TrackingService`.
    *   `user_protocol_tracking` table (`id`, `user_id`, `protocol_id`, `tracked_at` (DATE), `notes`, `metadata`, `created_at`, `updated_at`).
*   **Data Storage:** Each time a user marks a protocol as completed for a specific day, a record is created in `user_protocol_tracking`. The `tracked_at` field (DATE type) is key. The unique constraint `(user_id, protocol_id, tracked_at)` prevents duplicates.
*   **Logging Adherence (API):** User taps "Mark Done" -> `POST /api/tracking/log` (with `protocol_id` and optional `date`) -> `TrackingController` -> `TrackingService::logAdherence()`.
    *   Service validates input (requires premium check).
    *   Inserts or updates record in `user_protocol_tracking`. Use `updateOrCreate` based on the unique constraint.
*   **Visualization - Streak Calculation (Example):**
    *   **API:** `GET /api/tracking/summary?protocol_id={id}&metric=streak` -> `TrackingController` -> `TrackingService::calculateStreak()`.
    *   **`TrackingService::calculateStreak(User $user, int $protocolId)` Logic (Conceptual Pseudo-code):**
        ```pseudo
        function calculateStreak(user, protocolId):
          streak = 0
          today = currentDate() // Or maybe the latest tracked date for this user/protocol? Decide requirement.

          // Get relevant tracking dates, ordered descending
          trackedDates = query database:
             SELECT tracked_at FROM user_protocol_tracking
             WHERE user_id = user.id AND protocol_id = protocolId
             ORDER BY tracked_at DESC

          if trackedDates is empty:
             return 0

          // Check if the most recent tracking is today or yesterday (allows continuation)
          latestTrackedDate = trackedDates[0]
          if latestTrackedDate is not today AND latestTrackedDate is not yesterday:
             return 0 // Streak broken if >1 day missed

          // Check consecutive days backward
          expectedDate = today
          if latestTrackedDate is yesterday:
             expectedDate = yesterday // Start checking from yesterday if today wasn't logged

          for date in trackedDates:
             if date == expectedDate:
                streak = streak + 1
                expectedDate = expectedDate.subtract(1 day) // Look for the previous day
             else if date < expectedDate:
                 // Gap detected, streak broken before this date
                 break
             // else if date > expectedDate: This shouldn't happen with ORDER BY DESC

          return streak
        ```
*   **Other Visualizations:**
    *   **Completion % (e.g., Monthly):** Query `user_protocol_tracking` for the user/protocol within the date range. Count distinct `tracked_at` days. Divide by the total number of days in the month.
    *   **Calendar Heatmap:** Query all `tracked_at` dates for the user/protocol within a visible range. Frontend uses this data to color calendar days.

**6. Conclusion**

These detailed workflow descriptions provide a blueprint for implementing the core complex features of the Huberman App. Adhering to these designs, leveraging appropriate Laravel features (Middleware, Policies, Queues, Scheduling, Events), and carefully handling state transitions and edge cases (especially with external providers) will be crucial for building a robust and reliable backend.
--- END FILE: app_documentation/ complex_workflows.md ---

--- START FILE: app_documentation/api_design_documentation.md ---
Okay, let's create the plan document (`api_design_documentation.md`) outlining the process and standards for creating the OpenAPI specification, and then provide a conceptual structure for the `openapi.yaml` file itself.

--- START OF FILE api_design_documentation.md ---

**Huberman App: API Design & Documentation Plan (OpenAPI)**

**1. Introduction**

This document outlines the process and standards for creating and maintaining the RESTful API contract for the Huberman App backend using the OpenAPI Specification (formerly Swagger). The resulting `openapi.yaml` file will serve as the single source of truth for API endpoints, request/response schemas, authentication, authorization requirements, and error handling. This ensures clear communication and alignment between the backend (Laravel) and frontend (React Native) development teams, facilitating efficient integration and testing.

**2. Tooling and Format**

*   **Specification Version:** OpenAPI 3.x (latest stable version recommended).
*   **Format:** YAML (`openapi.yaml`) is preferred for its readability compared to JSON.
*   **Generation/Maintenance:**
    *   **Initial Creation:** Likely manual or semi-automated based on initial controller/route definitions.
    *   **Ongoing Maintenance:** Consider using code annotations (e.g., `zircote/swagger-php` for Laravel) to generate the spec from PHP attributes/docblocks. This keeps documentation closer to the code but requires disciplined annotation. Alternatively, manual updates are feasible if rigorously maintained alongside code changes. The chosen method must be consistently applied.
    *   **Validation:** Use OpenAPI validation tools (online validators, editor plugins, CLI tools) regularly, potentially integrated into CI/CD pipelines, to ensure the spec is syntactically correct and adheres to the standard.

**3. Core Specification Structure**

The `openapi.yaml` file will utilize the following key sections:

*   `openapi`: Specifies the OpenAPI version.
*   `info`: Contains metadata (title, version, description).
*   `servers`: Defines base URLs for different environments (local, staging, production).
*   `tags`: Groups related API endpoints, typically aligned with backend modules (e.g., `Authentication`, `UserManagement`, `ContentManagement`, `NotesService`, `SubscriptionBilling`, `ProtocolEngine`, `Webhooks`).
*   `paths`: Defines all available API endpoints, including:
    *   HTTP methods (GET, POST, PUT, DELETE, etc.).
    *   Parameters (path, query, header).
    *   `requestBody`: Describes the payload for POST/PUT requests.
    *   `responses`: Defines possible HTTP status codes and their corresponding response schemas (including success and error responses).
    *   `security`: Specifies the required authentication/authorization schemes for the endpoint.
    *   `summary`, `description`, `tags`: For organization and clarity.
*   `components`: Defines reusable elements:
    *   `schemas`: Data models for request bodies and response payloads (based on `database_plan.md` and API Resources).
    *   `securitySchemes`: Defines authentication methods (e.g., Bearer Token).
    *   `responses`: Reusable response definitions (e.g., standard error responses).
    *   `parameters`: Reusable parameter definitions.

**4. Authentication (Laravel Sanctum/Passport)**

*   **Method:** Bearer Token authentication via Laravel Sanctum (preferred for SPAs/mobile apps) or Passport.
*   **Documentation:**
    *   Define a `securityScheme` named `bearerAuth` (or similar) of type `http` and scheme `bearer` in `components/securitySchemes`.
    *   Endpoints requiring authentication will include a `security` section referencing this scheme: `security: [{ bearerAuth: [] }]`.
    *   Login (`/api/login`) and registration (`/api/register`) endpoints will describe how to obtain the token in their response descriptions.

**5. Authorization & Feature Gating (Premium Features)**

*   **Enforcement:** All authorization and feature gating logic (checking for active premium subscriptions) is implemented **on the backend** (via Middleware, Policies, Service checks based on `SubscriptionBilling` module). The API documentation *reflects* these requirements but does not enforce them.
*   **Documentation:**
    *   Endpoints or specific operations requiring a Premium subscription will be clearly marked.
    *   **Method 1 (Description):** Use the `summary` or `description` field to explicitly state "Requires active Premium subscription."
    *   **Method 2 (Custom Extension - Optional):** Use a custom extension like `x-premium-required: true` on the path item or operation object for machine-readable indication, if desired.
    *   A standard `403 Forbidden` response schema (`#/components/responses/ForbiddenError`) will be referenced for cases where a non-premium user attempts to access a premium feature.

**6. Endpoint Structure & Key Areas (Based on Modules)**

Endpoints will be grouped using tags matching the modules defined in `component_breakdown.md`.

*   **`Authentication` Tag:**
    *   `POST /api/register`
    *   `POST /api/login`
    *   `POST /api/logout` (Requires `bearerAuth`)
    *   Password Reset endpoints (e.g., `POST /api/forgot-password`, `POST /api/reset-password`)
*   **`UserManagement` Tag:**
    *   `GET /api/user/profile` (Requires `bearerAuth`)
    *   `PUT /api/user/profile` (Requires `bearerAuth`)
*   **`SubscriptionBilling` Tag:**
    *   `GET /api/plans` (Lists available subscription plans - Free/Premium)
    *   `GET /api/user/subscription` (Gets current user's subscription status - Requires `bearerAuth`)
    *   Potentially endpoints to initiate checkout (provider-dependent) or fetch portal links.
*   **`ContentManagement` Tag:**
    *   `GET /api/episodes` (List episodes)
    *   `GET /api/episodes/{id}` (Get episode details, potentially including summaries)
    *   `GET /api/protocols` (List protocols - response may differ for free/premium users, documented in description)
    *   `GET /api/protocols/{id}` (Get protocol details - response details may differ, e.g., full implementation guide only for premium, documented in description)
    *   `GET /api/summaries` (Potentially filtered by episode/protocol)
*   **`NotesService` Tag:**
    *   `GET /api/notes` (List user's notes, requires `bearerAuth`)
    *   `POST /api/notes` (Create note, requires `bearerAuth` - premium limits described)
    *   `GET /api/notes/{id}` (Get specific note, requires `bearerAuth` + ownership policy check)
    *   `PUT /api/notes/{id}` (Update note, requires `bearerAuth` + ownership policy check)
    *   `DELETE /api/notes/{id}` (Delete note, requires `bearerAuth` + ownership policy check)
    *   `GET /api/episodes/{id}/public-notes` (Fetch public notes for an episode - premium feature for *viewing* or tied to note creator being premium? Clarify requirement.)
*   **`ProtocolEngine` Tag (Primarily Premium):**
    *   `GET /api/reminders` (Requires `bearerAuth`, documented as Premium)
    *   `POST /api/reminders` (Requires `bearerAuth`, documented as Premium)
    *   `PUT /api/reminders/{id}` (Requires `bearerAuth`, documented as Premium)
    *   `DELETE /api/reminders/{id}` (Requires `bearerAuth`, documented as Premium)
    *   `POST /api/tracking/log` (Log adherence, requires `bearerAuth`, documented as Premium)
    *   `GET /api/tracking/summary` (Get tracking data/streaks, requires `bearerAuth`, documented as Premium)
*   **`Webhooks` Tag:**
    *   `POST /api/webhooks/stripe`
    *   `POST /api/webhooks/apple`
    *   `POST /api/webhooks/google`
    *   (These endpoints *do not* use `bearerAuth`. Security is via signature verification, which should be noted in the description. Request bodies will match provider specifications).

**7. Request/Response Schemas (`components/schemas`)**

*   Define reusable schemas for all major data entities (`User`, `Episode`, `Protocol`, `Summary`, `Note`, `Plan`, `Subscription`, `Reminder`, `TrackingLog`, etc.) based on `database_plan.md` and how data is structured for the API (using Laravel API Resources).
*   Define standard success response wrappers if needed (e.g., `{ "data": <Schema> }`).
*   Define standard error response schemas (see below).

**8. Error Handling**

*   **Standard Structure:** Define a consistent error response structure. Example:
    ```yaml
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: General error message.
        errors: # Optional: Only for validation errors (422)
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Field-specific validation errors.
    ```
*   **HTTP Status Codes:** Document standard usage:
    *   `200 OK`: Successful GET, PUT, DELETE.
    *   `201 Created`: Successful POST.
    *   `204 No Content`: Successful DELETE where no body is returned.
    *   `400 Bad Request`: Generic client error (e.g., malformed JSON, invalid parameters not caught by validation).
    *   `401 Unauthorized`: Missing or invalid authentication token.
    *   `403 Forbidden`: Authenticated user lacks permission (e.g., policy failure, non-premium user accessing premium feature).
    *   `404 Not Found`: Resource not found.
    *   `422 Unprocessable Entity`: Validation errors (use `errors` field in response).
    *   `500 Internal Server Error`: Unexpected server-side error.
*   **Reusable Responses:** Define common error responses in `components/responses` (e.g., `NotFound`, `Unauthorized`, `Forbidden`, `ValidationError`, `InternalServerError`) referencing the `ErrorResponse` schema.

**9. API Versioning**

*   Implement API versioning from the start, likely via a URL prefix (e.g., `/api/v1/...`). Include this prefix in the `servers` definition.

**10. Maintenance and Governance**

*   The `openapi.yaml` file MUST be checked into version control (Git).
*   Pull requests modifying API-related backend code SHOULD include corresponding updates to the `openapi.yaml` file.
*   Regular reviews and validation checks (manual or automated) are necessary to keep the documentation accurate and useful.

**11. Outcome**

The final deliverable is a comprehensive, version-controlled `openapi.yaml` file located in the project repository root or a designated `/docs` directory. This file serves as the definitive contract for the Huberman App's RESTful API.

--- END FILE: app_documentation/api_design_documentation.md ---

--- START FILE: app_documentation/app_description.md ---


**1. App Name**

Huberman App (Suggested Name)

**2. Introduction/Executive Summary**

The Huberman App is designed as a dedicated companion tool for listeners of the Huberman Lab podcast. Its core purpose is to bridge the gap between listening to the podcast and effectively implementing its science-backed health and performance protocols into daily life. It achieves this by providing structured guidance, actionable reminders, learning resources, progress tracking, and community features, addressing the challenge of translating extensive podcast information into consistent practice.

**3. Target Audience**

The app is intended for listeners and followers ("acolytes") of the Huberman Lab podcast who are motivated to apply the scientific protocols discussed to improve their health, well-being, performance, and overall lifestyle.

**4. Key Features**

The app operates on a Freemium model, offering both free core functionalities and an expanded Premium tier via subscription:

**Free Tier Features:**

*   **Basic Protocol Reminders:** Access pre-set reminders for a limited selection of foundational daily protocols (e.g., Morning Sunlight Exposure).
*   **Limited Content Access:** View short summaries and brief explanations for the foundational protocols available in the free tier.
*   **Basic Personal Notes:** Take simple personal notes linked only to the free content/protocols.
*   **Introduction & Onboarding:** Guided introduction to the app's purpose and basic features.

**Premium Tier Features (Subscription Required):**

*   **Comprehensive Protocol Library & Reminders:**
    *   Access reminders and content for the *full range* of protocols covered in the podcast (Sleep, Focus, Fitness, Nutrition, Mental Health, etc.).
    *   Fully *customizable reminders* (timing, frequency, snooze, grouping).
*   **Full Content Access & Depth:**
    *   Access both *succinct summaries* and *detailed, long-form explanations* for all protocols.
    *   Step-by-step implementation guides and practical tips.
    *   Curated links to relevant resources or papers mentioned (where feasible).
    *   Distilled key takeaways ("epiphanic summaries") for episodes/protocols.
*   **Advanced Note-Taking & Community:**
    *   Unlimited personal note-taking across all content with advanced organization (tags, search).
    *   Ability to *publicly post notes/takeaways* linked to specific episodes (community sharing).
    *   Potential for structured community discussions around protocols (moderated).
*   **Tracking & Personalization:**
    *   Tools to *track adherence* and consistency with selected protocols.
    *   Visualizations of progress and streaks.
    *   Create *personalized routines* or "stacks" combining multiple protocols for specific goals.
*   **Offline Access:** Download content (summaries, guides, notes) for offline use.
*   **Early Access & Updates:** Receive new protocols, content, and features as they are released.
*   **Ad-Free Experience:** Guaranteed free from any advertising.

**5. Core Functionality/How it Works**

The app serves as a centralized hub for Huberman Lab protocol knowledge and implementation. It takes complex information from the podcast and transforms it into actionable steps through reminders and structured guides (basic access free, full access premium). It supports learning via layered content (summaries/detailed explanations) and facilitates habit formation through reminders and tracking tools (premium). Users can personalize their experience through notes (basic free, advanced/public premium) and tailor routines (premium).

**6. Unique Selling Proposition (USP)/Why This App?**

*   **Simplifies Implementation:** Makes applying scientifically-grounded protocols significantly easier and more consistent.
*   **Consolidated & Structured Resource:** Organizes vast amounts of podcast information into an accessible, actionable format.
*   **Facilitates Learning & Practice:** Allows users to learn the science while receiving practical guidance on implementation.
*   **Personalization & Tracking (Premium):** Enables users to tailor protocols to their goals and monitor their progress.
*   **Community Engagement (Premium):** Offers a platform for shared learning and insights among dedicated users.

**7. Monetization Strategy**

The app utilizes a **Freemium model**. Core functionality and limited content are available for free to ensure basic accessibility. Full access to all features, comprehensive content, advanced personalization, tracking, and community functions requires a **Premium Subscription** (offered on a monthly or annual basis). This model supports ongoing development, content updates, and app maintenance while providing significant value to dedicated users. Intrusive advertising or selling user data are explicitly avoided to maintain user trust and align with the app's wellness focus.

**8. Potential Future Features/Ideas (Based on Initial Notes)**

*   Incorporating relevant content and insights from experts associated with Andrew Huberman ("Band of Brothers and Sistas").
*   Continued distillation and addition of practices from related talks, interviews, and research papers.

**9. Technical Considerations (Based on Initial Notes)**

*   **Platform:** Primarily envisioned as a mobile application for iOS and Android platforms ("downloadable").

**10. User Considerations/Concerns Mentioned (Based on Initial Notes)**

*   **Habit Formation:** Awareness that over-reliance on reminders could potentially hinder conscious habit internalization (though the app aims to support, not replace, conscious effort).
*   **Accessibility:** The Freemium model aims to address financial accessibility concerns by providing core value for free, while the subscription funds the full, advanced feature set.
--- END FILE: app_documentation/app_description.md ---

--- START FILE: app_documentation/architecture_pan.md ---
---

**Final Architectural Plan (v3): Optimize Guide: Huberman Companion App (with Detailed Monetization Features)**

**1. Executive Summary of Architectural Proposal**

This document outlines the finalized technical architecture for the "Optimize Guide: Huberman Companion" mobile application, designed to support a **Freemium model with tiered Subscriptions (Monthly/Annual)**. The architecture facilitates distinct **Free** (limited foundational protocols/summaries, basic notes) and **Premium** (comprehensive library, customizable reminders, detailed content, advanced notes/community, tracking, offline access) feature sets. It employs a **Modular Monolith** backend (**Laravel/PHP**), **PostgreSQL 17** database, **Redis** cache/queues, and a **React Native** frontend. Communication uses a **RESTful API**. Deployment leverages managed **Laravel hosting (Forge/Vapor)**, with **Docker** for local development. Key architectural components include robust user subscription management, secure feature gating via API middleware, and integration with mobile In-App Purchase (IAP) systems.

**2. Analysis of App Requirements & Architectural Drivers**

*(Requirements updated to reflect specific tiered features)*

- **Content Delivery & Management:** Efficient storage, management, and delivery of structured content. **Access control based on subscription tier is critical:**
    - *Free:* Limited protocol summaries/explanations.
    - *Premium:* Full library access (all protocols, detailed explanations, implementation guides, research links, key takeaways).
- **User Interaction & Data:** User authentication, creation of notes, potential public sharing. **Tiered feature access:**
    - *Free:* Basic notes linked to free content only.
    - *Premium:* Unlimited notes across all content, advanced organization, public notes/discussion features.
- **Actionable Guidance & Reminders:** Reliable push notification system. **Tiered functionality:**
    - *Free:* Pre-set, non-customizable reminders for a limited protocol set.
    - *Premium:* Comprehensive, customizable reminders (timing, frequency, grouping) for all protocols, potential location awareness.
- **Tracking & Personalization (Premium):** Tools for tracking adherence, progress visualization, and creating personalized protocol stacks.
- **Offline Access (Premium):** Ability to download content and notes.
- **Cross-Platform Mobile:** Target iOS and Android using React Native.
- **Scalability:** Potential for significant user growth requires scalable reads, writes, notifications, and **efficient subscription/entitlement checks**.
- **Maintainability & Evolvability:** Modular design to accommodate future content, features, and subscription changes.
- **Development Efficiency:** Leverage Laravel/React Native.
- **User Experience:** Responsive interface, clear distinction between free/premium, seamless upgrade process, **ad-free experience (Premium)**.
- **Monetization:** Implement the defined Freemium model with secure payment processing and access control.

*Non-Functional Drivers:* Performance, Security (incl. Payment Security), Reliability, Cost-Effectiveness, User Trust & Transparency.

**3. Proposed Architecture Pattern(s)**

- **Recommendation:** **Modular Monolith** for the backend.
- **Justification:** Remains suitable. Facilitates integrating subscription logic and **feature gating** within relevant modules (e.g., `Users`, `Billing`, domain-specific feature modules) while maintaining structure.

**4. Technology Stack Recommendation**

*(Highlighting feature gating aspects)*

- **Frontend (Mobile):**
    - **Technology:** **React Native**
    - **Justification:** Cross-platform. Requires **IAP libraries** (`react-native-iap`). UI must **conditionally render features/content/prompts** based on user subscription status received from the backend.
- **Backend:**
    - **Technology:** **Laravel (PHP 8.x+)**
    - **Justification:** Rapid development. Needs integration with **payment gateways (Stripe/Paddle via SDKs, potentially Laravel Cashier)** and **server-side IAP receipt validation**. **Crucially, must implement robust feature gating mechanisms (e.g., Policies, Middleware, dedicated service classes) to enforce access based on user's active subscription plan.**
- **Database:**
    - **Technology:** **PostgreSQL 17**
    - **Justification:** Robust storage. Schema includes `users`, `plans`, `subscriptions` tables to track user entitlements.
- **Cache / Queues:**
    - **Technology:** **Redis**
    - **Justification:** Caching (API responses, **user entitlement flags**), efficient queue driver (notifications, post-payment processing).
- **APIs & Communication:**
    - **Technology:** **RESTful API over HTTPS**
    - **Justification:** Standard communication. API endpoints serving premium features/data **must be protected by middleware** verifying active premium subscription status. Endpoints needed for fetching subscription offers, managing subscriptions (via provider portals or limited API), and **receiving payment webhooks**.
- **Payment Processing:**
    - **Recommendation:** **Stripe** or **Paddle**
    - **Justification:** Handle subscription logic, compliance, SDKs, IAP integration.

**5. Data Model Considerations**

- **Core Entities:** `User`, `Episode`, `Protocol`, `Summary`, `Note`, `Plan`, `Subscription`, `ContentSource`. (Schema details provided previously).
- **Feature Gating Logic:** Access checks will typically query the `subscriptions` table (joined with `users` and potentially `plans`) to verify if a user has an `active` subscription linked to a premium `Plan`. This logic resides primarily in the backend (API middleware/policies).
- **Challenges:** Keeping local subscription status synced accurately; handling complex subscription states; efficiently querying entitlements for API requests.

**6. Scalability and Performance Strategy**

- **Horizontal Backend Scaling:** As before (Forge/Vapor). Optimize subscription checks (e.g., cache user's plan ID and status in Redis for TTL).
- **Database Scaling:** As before.
- **Caching:** Aggressively cache user permission/subscription status; cache `Plan` details; cache non-personalized content.
- **Asynchronous Processing:** Use **Laravel Queues** for notifications, payment webhook processing, entitlement updates, subscription lifecycle emails.
- **CDN:** As before.

**7. Security Considerations**

- **Authentication:** As before (Sanctum/Passport).
- **Authorization:** **Critical.** Implement robust authorization (Laravel Middleware/Policies) verifying subscription status *before* granting access to premium API endpoints, features (e.g., creating > X notes, accessing detailed summaries), or data. Prevent client-side bypasses.
- **Payment Security:** As before (Rely on providers, secure keys, server-side IAP validation, webhook security).
- **Data Privacy:** As before.
- **Input Validation:** As before.
- **API Security:** As before.
- **Dependency Management:** As before.

**8. Deployment Strategy & Infrastructure**

- **Cloud Provider / Deployment Management / DB / Cache:** As before (Forge/Vapor, Managed PostgreSQL/Redis).
- **Local Development:** Docker setup remains the same.
- **CI/CD:** As before. **Include tests specifically verifying feature gating logic for different user subscription states.**
- **Webhooks:** As before (secure endpoints needed).
- **Storage:** As before (S3/GCS, especially for potential offline content downloads in premium).

**9. Potential Challenges & Trade-offs**

*(Refined based on feature detail)*

- **Complexity of Subscription Logic & Syncing:** Remains the primary complexity driver.
- **Robust Feature Gating Implementation:** Ensuring access control is correctly and consistently applied across all relevant features/endpoints requires careful implementation and testing. Mistakes here directly impact revenue and user trust.
- **IAP Integration:** Remains complex due to platform specifics.
- **Content Pipeline:** Remains an operational challenge.
- **Monolith Rigidity:** Risk still exists if modularity isn't maintained.
- **Cross-Platform Nuances (React Native):** As before.
- **Notification Reliability:** As before.
- **User Experience:** **Maintaining a compelling free tier while clearly showcasing premium value without being intrusive is a key design challenge.** Smooth upgrade flow is vital.

**10. Recommendations for Next Steps**

1. **Refine Feature Scope (Free vs. Premium):** *Considered complete based on provided input.*
2. **Detailed Domain Modeling:** *Schema provided previously.* Create migrations.
3. **API Contract Definition:** Define all endpoints, clearly marking which require premium access and how status is checked/returned.
4. **Setup Local Docker Environment:** As before.
5. **Choose & Configure Hosting/Payment:** As before. Set up plans matching the Free/Premium tiers in Stripe/Paddle and App Stores.
6. **Implement Core Backend Logic:** Build Auth, basic CRUD, **subscription management (Cashier recommended)**, and **implement core feature gating middleware/policies based on the defined tiers.**
7. **Frontend PoC (React Native):** Build core UI, **integrate IAP**, **implement conditional rendering based on subscription status**, basic purchase flow.
8. **Implement Webhook Handling:** As before.
9. **Content Strategy Definition:** As before.
10. **Establish CI/CD Pipeline:** Include **feature gating tests**.

---

This version provides a comprehensive architectural blueprint that directly addresses the specified Freemium model and its distinct feature tiers, ensuring the technical plan aligns with the business and product requirements.--- END FILE: app_documentation/architecture_pan.md ---

--- START FILE: app_documentation/backend_implementation_todo.md ---
# Huberman App: Backend Implementation TODO Checklist (TDD Approach)

**Project Goal:** Implement the Laravel backend for the Huberman App, supporting a Freemium model, content delivery, user interactions, reminders, tracking, and subscription management, ready for production deployment.

**Development Approach:** Test-Driven Development (TDD) will be used. For each functional component, write tests *first* to define expected behavior, then implement the code to make the tests pass, and finally refactor.

**Legend:**
*   `[ ]` - To Do
*   `[x]` - Done
*   `(TDD)` - Indicates steps where writing tests *before* implementation is paramount.

---

## Phase 1: Project Setup & Foundation (Milestone 1 & 2 Prep)

*   **Environment & Tooling:**
    *   `[x]` Initialize Git repository.
    *   `[x]` Install Laravel (`11.x`) using Composer (`composer create-project laravel/laravel huberman-app-backend`).
    *   `[x]` Configure basic `.env` file for local development (App Name, Key, Debug, Log level, DB connection defaults).
    *   `[x]` Create/Finalize Docker environment (`docker-compose.yml`) based on `infrastructure_devops_details.md` with services:
        *   `[x]` PHP (`8.2+`) container + Dockerfile.
        *   `[x]` Web Server (Nginx or Caddy) container + config.
        *   `[x]` PostgreSQL (`17.x` or latest supported) container.
        *   `[x]` Redis (`7.x`) container.
        *   `[ ]` Node.js (LTS) container (optional, for build tools).
    *   `[x]` Verify local Docker environment is running (`docker-compose up -d`) and accessible.
    *   `[x]` Configure PHPUnit (`phpunit.xml`) for testing environment (e.g., separate test PG database connection in `.env.testing`).
    *   `[x]` Establish coding standards (PSR-12 enforced, setup `laravel/pint`).
    *   `[x]` Install & Configure SAST tools:
        *   `[x]` Install `phpstan/phpstan`, `larastan/larastan`. Configure `phpstan.neon`.
        *   `[x]` (Optional) Install `vimeo/psalm`. Configure `psalm.xml`.
    *   `[x]` Run initial SAST checks to ensure baseline setup.

*   **Core Structure & Base Components:**
*   `[x]` Define base module structure: Create `app/Modules/` directory and subdirectories (`Authentication`, `UserManagement`, `SubscriptionBilling`, `ContentManagement`, `ProtocolEngine`, `NotesService`, `CoreApi` - adjust as needed).
    *   `[x]` Create base API test case (`tests/Feature/ApiTestCase.php`) setting common headers (Accept: application/json).
    *   `[x]` Implement base API controller (`app/Modules/CoreApi/Http/Controllers/Api/BaseApiController.php`) with common methods/traits if needed.
    *   `[x]` Implement standard API response structure/trait (e.g., `ApiResponseHelpers`) if deviating from simple resource responses.
    *   `[x]` Configure API routing (`routes/api.php`): Set up version prefix (`/v1`) and include route files from modules.

---

## Phase 2: Core User & Authentication (Milestone 2 - TDD Focus)

*   **User Model & Migration:**
    *   `[ ]` (TDD) Write tests for `User` model creation, relationships (initially Subscription, Notes, Reminders, Tracking), attributes, fillable, hidden (`password`, `remember_token`), casts (`email_verified_at`), `$with` relations.
    *   `[ ]` Implement `create_users_table` migration based on `database_migrations_plan.md`. Ensure soft deletes, timestamps.
    *   `[ ]` Run migration (`php artisan migrate`).
    *   `[ ]` Implement `User` model (`app/Modules/UserManagement/Models/User.php`) extending Authenticatable.
    *   `[ ]` Ensure User model tests pass.

*   **Authentication (Sanctum):**
    *   `[ ]` Install Laravel Sanctum (`composer require laravel/sanctum`). Publish migrations & config.
    *   `[ ]` Run Sanctum migrations (`php artisan migrate`).
    *   `[ ]` Add `HasApiTokens` trait to `User` model.
    *   `[ ]` Configure Sanctum (token expiry, domains) in `config/sanctum.php` and `.env`.

*   **Registration:**
    *   `[ ]` (TDD) Write API tests for `POST /api/v1/register`: Validation rules, success (DB check, 201, user+token response), email uniqueness.
    *   `[ ]` Implement `RegisterRequest` Form Request (`app/Modules/Authentication/Http/Requests/`).
    *   `[ ]` Implement `AuthController::register` method (`app/Modules/Authentication/Http/Controllers/`).
    *   `[ ]` Define route in module's API routes file. Ensure tests pass.

*   **Login:**
    *   `[ ]` (TDD) Write API tests for `POST /api/v1/login`: Validation rules, success (correct credentials -> 200, user+token), failure (incorrect credentials -> 401/422).
    *   `[ ]` Implement `LoginRequest` Form Request.
    *   `[ ]` Implement `AuthController::login` method.
    *   `[ ]` Define route. Ensure tests pass.

*   **Logout:**
    *   `[ ]` (TDD) Write API tests for `POST /api/v1/logout` (authenticated): Successful logout (token invalid, 204), unauthenticated access (401).
    *   `[ ]` Implement `AuthController::logout` method (invalidate current token).
    *   `[ ]` Define route, protected by `auth:sanctum`. Ensure tests pass.

*   **Authenticated User Endpoint:**
    *   `[ ]` (TDD) Write API tests for `GET /api/v1/user/profile` (authenticated): Fetches user data, unauthenticated access (401).
    *   `[ ]` Implement `UserController::profile` (`app/Modules/UserManagement/Http/Controllers/`).
    *   `[ ]` Define route, protected by `auth:sanctum`. Ensure tests pass.

*   **Password Reset:**
    *   `[ ]` Configure Mail driver for local testing (e.g., Mailtrap, Log driver in `.env`).
    *   `[ ]` (TDD) Test Forgot Password (`POST /api/v1/forgot-password`): Validation (email exists), success response, mock `Notification::send`.
    *   `[ ]` (TDD) Test Reset Password (`POST /api/v1/reset-password`): Validation (token, email, password, confirmation), successful reset, token consumed/invalidated.
    *   `[ ]` Implement necessary Controllers (`ForgotPasswordController`, `NewPasswordController`), Requests, Notifications (`ResetPasswordNotification`).
    *   `[ ]` Define password reset routes. Ensure tests pass.

*   **Security Controls:**
    *   `[ ]` (TDD) Write tests for rate limiting on auth endpoints (`login`, `register`, `forgot-password`).
    *   `[ ]` Apply Laravel's default rate limiting middleware to auth routes in `RouteServiceProvider` or route definitions. Configure limits (e.g., in `.env`). Ensure tests pass.

---

## Phase 3: Subscription & Billing Foundation (Milestone 4 Prep - TDD Focus)

*   **Models & Migrations:**
    *   `[ ]` Implement `create_plans_table` migration. Run migration.
    *   `[ ]` Implement `create_subscriptions_table` migration (FKs, indexes, onDelete). Run migration.
    *   `[ ]` (TDD) Test `Plan` model (attributes, factory, maybe `isActive` scope). Implement model (`app/Modules/SubscriptionBilling/Models/Plan.php`).
    *   `[ ]` (TDD) Test `Subscription` model (attributes, relationships `User`/`Plan`, casts, scopes like `active()`, `trialing()`). Implement model (`app/Modules/SubscriptionBilling/Models/Subscription.php`).
    *   `[ ]` Add `hasMany(Subscription::class)` relationship to `User` model.

*   **Cashier Integration (Stripe):**
    *   `[ ]` Install Laravel Cashier Stripe (`composer require laravel/cashier`). Publish migrations & config.
    *   `[ ]` Run Cashier migrations (`php artisan migrate`).
    *   `[ ]` Configure Cashier (`config/cashier.php`, `services.stripe.key/secret/webhook_secret` in `.env`). Set User model.
    *   `[ ]` Add `Billable` trait to `User` model.

*   **Core Service & API Stubs:**
    *   `[ ]` Define `SubscriptionServiceInterface` contract (`app/Modules/SubscriptionBilling/Contracts/`) with key methods (`userHasActivePremiumSubscription`, `getUserPlan`, `handleWebhook`, `getSubscriptionStatus`, etc.).
    *   `[ ]` Implement basic `SubscriptionService` class (`app/Modules/SubscriptionBilling/Services/`) implementing the interface (methods return defaults/throw `NotImplementedException`).
    *   `[ ]` Bind interface to implementation in a service provider (`SubscriptionBillingServiceProvider`).
    *   `[ ]` **Plans API:**
        *   `[ ]` Seed `Plans` table (Free, Premium Monthly, Premium Annual) using a `PlanSeeder`.
        *   `[ ]` (TDD) API Test `GET /api/v1/plans`: Assert returns seeded plans (200 OK).
        *   `[ ]` Implement `SubscriptionController::plans` endpoint to fetch and return `Plan` data. Use an API Resource (`PlanResource`). Define route.
    *   `[ ]` **User Subscription API:**
        *   `[ ]` (TDD) API Test `GET /api/v1/user/subscription` (authenticated): Assert returns null/empty initially (200 OK).
        *   `[ ]` Implement `SubscriptionController::userSubscription` using `SubscriptionService` stub. Use an API Resource (`SubscriptionResource`). Define route protected by `auth:sanctum`.

*   **Webhook Foundation (Stripe):**
    *   `[ ]` Implement `VerifyStripeWebhookSignature` middleware (or use Cashier's built-in route protection).
    *   `[ ]` (TDD) Write test for signature verification middleware/logic (mock Stripe request/header/secret). Assert pass/fail scenarios.
    *   `[ ]` Implement `WebhookController` (`app/Modules/SubscriptionBilling/Http/Controllers/`) with `handleStripeWebhook` method.
    *   `[ ]` Define `POST /api/webhooks/stripe` route (ensure CSRF protection is disabled for this route). Apply signature verification middleware.
    *   `[ ]` Ensure verification tests pass.

---

## Phase 4: Basic Content Management (Milestone 3 & 5 Prep - TDD Focus)

*   **Models & Migrations:**
    *   `[ ]` Implement `create_episodes_table` migration. Run migration.
    *   `[ ]` Implement `create_protocols_table` migration. Run migration.
    *   `[ ]` Implement `create_summaries_table` migration. Run migration.
    *   `[ ]` Implement `create_episode_protocol_table` (pivot) migration. Run migration.
    *   `[ ]` (TDD) Test `Episode` model (attributes, relationships `Protocols`/`Summaries`/`Notes`). Implement model (`app/Modules/ContentManagement/Models/Episode.php`).
    *   `[ ]` (TDD) Test `Protocol` model (attributes, relationships `Episodes`). Implement model (`app/Modules/ContentManagement/Models/Protocol.php`).
    *   `[ ]` (TDD) Test `Summary` model (attributes, relationship `Episode`). Implement model (`app/Modules/ContentManagement/Models/Summary.php`).
    *   `[ ]` Test `Episode<->Protocol` many-to-many relationship.

*   **Seeding:**
    *   `[ ]` Create `EpisodeSeeder` (placeholder episodes).
    *   `[ ]` Create `ProtocolSeeder` (foundational protocols based on `content_strategy_management.md`).
    *   `[ ]` Create `SummarySeeder` (summaries for foundational protocols).
    *   `[ ]` Create `EpisodeProtocolSeeder` (link placeholders).
    *   `[ ]` Update `DatabaseSeeder` to call new seeders in correct order.
    *   `[ ]` Run seeders (`php artisan db:seed`).

*   **Core Service & API:**
    *   `[ ]` Define `ContentServiceInterface` contract (`app/Modules/ContentManagement/Contracts/`) (e.g., `getProtocols`, `getProtocolDetails`, `getEpisodes`, `getEpisodeDetails`, `getSummariesForEpisode`).
    *   `[ ]` Implement basic `ContentService` implementing the interface. Bind interface.
    *   `[ ]` Implement API Resources (`EpisodeResource`, `ProtocolResource`, `SummaryResource`).
    *   `[ ]` **Protocols API:**
        *   `[ ]` (TDD) API Test `GET /api/v1/protocols`: List protocols (unauthenticated).
        *   `[ ]` Implement `ProtocolController::index`. Define route.
        *   `[ ]` (TDD) API Test `GET /api/v1/protocols/{id}`: Show protocol details (unauthenticated).
        *   `[ ]` Implement `ProtocolController::show`. Define route.
    *   `[ ]` **Episodes API:**
        *   `[ ]` (TDD) API Test `GET /api/v1/episodes`: List episodes.
        *   `[ ]` Implement `EpisodeController::index`. Define route.
        *   `[ ]` (TDD) API Test `GET /api/v1/episodes/{id}`: Show episode details.
        *   `[ ]` Implement `EpisodeController::show`. Define route.
    *   `[ ]` *(Add similar for Summaries if needed as top-level endpoint)*
    *   `[ ]` Ensure basic content API tests pass.

---

## Phase 5: Feature Gating Implementation (Milestone 4 & 5 - TDD Focus)

*   **Subscription Service Logic:**
    *   `[ ]` (TDD - Unit) Test `SubscriptionService::userHasActivePremiumSubscription` covering scenarios: no sub, free plan, active premium, trialing premium, canceled (before/after `ends_at`), expired, past_due. Use factories.
    *   `[ ]` Implement logic in `SubscriptionService` querying `subscriptions` table (via User relationship), joining `plans`, checking status (`active`, `trialing`), `ends_at`. Ensure 'premium' plan type check.
    *   `[ ]` (TDD - Unit) Test caching: cache hit avoids DB query, miss populates cache, TTL works, cache clear invalidates.
    *   `[ ]` Implement caching layer within `userHasActivePremiumSubscription` (e.g., `Cache::remember`). Use appropriate cache tags (e.g., `user:{id}`).

*   **Middleware:**
    *   `[ ]` Implement `CheckPremiumAccess` middleware using `SubscriptionServiceInterface`.
    *   `[ ]` (TDD - Feature) Write feature tests applying middleware to a test route: premium user passes (200), free user fails (403), unauthenticated fails (401 - handled by `auth:sanctum`).
    *   `[ ]` Register middleware alias in `app/Http/Kernel.php`.
    *   `[ ]` Apply middleware to relevant premium API route groups (e.g., start with `/reminders`, `/tracking`). Ensure tests pass.

*   **Gated Content API:**
    *   `[ ]` Refine `ProtocolResource` to conditionally include `implementation_guide` based on `$request->user()->hasActivePremiumSubscription()` (or similar check).
    *   `[ ]` (TDD - Feature) Test `GET /api/v1/protocols/{id}`: Authenticated free user gets protocol *without* `implementation_guide`. Authenticated premium user gets protocol *with* `implementation_guide`.
    *   `[ ]` (TDD - Feature) Test `GET /api/v1/protocols`: Free user gets limited list (if applicable) or all protocols with limited data. Premium user gets all protocols with full data (as allowed by Resource). Adjust API tests.
    *   `[ ]` Refactor `ProtocolController` or `ContentService` if needed to support different data loading based on user status (API Resource often sufficient). Ensure tests pass.

---

## Phase 6: Full Subscription Lifecycle via Webhooks (Milestone 4 - TDD Focus)

*   **Webhook Processing Logic (Stripe via Cashier):**
    *   **Event: `checkout.session.completed`**
        *   `[ ]` (TDD) Test: Simulates webhook, asserts `Subscription` created (`trialing`/`active`), `ends_at`/`trial_ends_at` set, `SubscriptionStarted` event dispatched, `User.stripe_id` updated.
        *   `[ ]` Verify/Implement Cashier listener logic.
    *   **Event: `customer.subscription.updated` (Trial Ends -> Active - via `invoice.payment_succeeded`)**
        *   `[ ]` (TDD) Test: Simulates `invoice.payment_succeeded` post-trial, asserts status -> `active`, `trial_ends_at` nullified, `ends_at` updated.
        *   `[ ]` Verify Cashier listener.
    *   **Event: `invoice.payment_succeeded` (Renewal)**
        *   `[ ]` (TDD) Test: Simulates webhook, asserts `Subscription.ends_at` updated, `SubscriptionRenewed` event dispatched.
        *   `[ ]` Verify Cashier listener.
    *   **Event: `invoice.payment_failed`**
        *   `[ ]` (TDD) Test: Simulates webhook, asserts `Subscription.status` -> `past_due` (if configured), `PaymentFailed` event dispatched.
        *   `[ ]` Verify/Implement Cashier listener based on retry settings.
    *   **Event: `customer.subscription.updated` (Cancel at Period End)**
        *   `[ ]` (TDD) Test: Simulates webhook (`cancel_at_period_end=true`), asserts `Subscription.status` updated (`canceled`?), `ends_at` reflects cancel date, `SubscriptionCanceled` event dispatched.
        *   `[ ]` Verify Cashier listener (`onSubscriptionUpdated`).
    *   **Event: `customer.subscription.deleted` (Immediate Cancel / Final Failure)**
        *   `[ ]` (TDD) Test: Simulates webhook, asserts status -> `canceled`/`expired`, `ends_at` set to past/now, `SubscriptionExpired`/`SubscriptionCanceled` event dispatched.
        *   `[ ]` Verify Cashier listener.

*   **Webhook Processing Logic (Apple IAP - Server Notifications V2):**
    *   `[ ]` Implement `WebhookController::handleAppleWebhook`.
    *   `[ ]` Implement service/logic to decode & verify Apple JWS payload (use library if available).
    *   `[ ]` (TDD) Test JWS signature verification & decoding.
    *   `[ ]` Define `POST /api/webhooks/apple` route (disable CSRF).
    *   `[ ]` Implement App Store Server API client (library?) for server-side validation (optional).
    *   `[ ]` **Event: `SUBSCRIBED` / `DID_RENEW`:** Implement handler, (TDD) Test state -> `active`/`trialing`, update DB, dispatch events.
    *   `[ ]` **Event: `DID_FAIL_TO_RENEW`:** Implement handler, (TDD) Test state -> `past_due`/`expired`, update DB, dispatch events.
    *   `[ ]` **Event: `EXPIRED`:** Implement handler, (TDD) Test state -> `expired`, update DB, dispatch event.
    *   `[ ]` **Event: `DID_CHANGE_RENEWAL_STATUS` (Off):** Implement handler, (TDD) Test state -> `canceled`, update DB, dispatch event.
    *   `[ ]` *(Implement/Test other handlers: `GRACE_PERIOD_EXPIRED`, `REVOKED`)*

*   **Webhook Processing Logic (Google Play Billing - RTDN via Pub/Sub):**
    *   `[ ]` Set up Google Cloud Pub/Sub topic & push subscription.
    *   `[ ]` Implement `WebhookController::handleGoogleWebhook`.
    *   `[ ]` Implement service/logic to decode base64 Pub/Sub data.
    *   `[ ]` (TDD) Test Pub/Sub message decoding & parsing.
    *   `[ ]` Define `POST /api/webhooks/google` route (disable CSRF).
    *   `[ ]` Implement Google Play Developer API client (library?) for purchase validation/acknowledgement.
    *   `[ ]` **Type: `SUBSCRIPTION_PURCHASED` / `SUBSCRIPTION_RENEWED`:** Implement handler, (TDD) Test state -> `active`/`trialing`, update DB, dispatch events, acknowledge purchase.
    *   `[ ]` **Type: `SUBSCRIPTION_IN_GRACE_PERIOD`:** Implement handler, (TDD) Test state -> `past_due`, update DB, dispatch event.
    *   `[ ]` **Type: `SUBSCRIPTION_ON_HOLD`:** Implement handler, (TDD) Test state -> `past_due`/`on_hold`, update DB.
    *   `[ ]` **Type: `SUBSCRIPTION_CANCELED`:** Implement handler, (TDD) Test state -> `canceled`, update DB, dispatch event.
    *   `[ ]` **Type: `SUBSCRIPTION_EXPIRED`:** Implement handler, (TDD) Test state -> `expired`, update DB, dispatch event.
    *   `[ ]` *(Implement/Test other handlers: `REVOKED`, `PAUSED`)*

*   **Scheduled Job for Status Check:**
    *   `[ ]` Implement `CheckExpiredSubscriptions` job/command.
    *   `[ ]` (TDD) Test job finds past `canceled` subs and sets status to `expired`.
    *   `[ ]` Schedule job in `Kernel.php` (e.g., `daily()`).

*   **Cache Invalidation:**
    *   `[ ]` Create `ClearUserEntitlementCache` Listener.
    *   `[ ]` Implement cache clearing logic (`Cache::tags("user:{$event->subscription->user_id}")->flush();` or similar).
    *   `[ ]` (TDD) Test Listener clears the correct cache tag/key.
    *   `[ ]` Register Listener for `SubscriptionStarted`, `SubscriptionRenewed`, `SubscriptionCanceled`, `SubscriptionExpired` events in `EventServiceProvider`.
    *   `[ ]` (TDD) Verify webhook tests dispatch events correctly using `Event::fake()`.

---

## Phase 7: Implementing MVP Features (Milestone 5 & 6 Prep - TDD Focus)

*   **Free Tier - Basic Reminders:**
    *   `[ ]` Implement logic/scope in `Protocol` model to identify foundational protocols.
    *   `[ ]` Implement `SendFoundationalReminders` command/job.
    *   `[ ]` (TDD) Test command selects correct protocols & users (mock Notification).
    *   `[ ]` Schedule command in `Kernel.php`.

*   **Premium Tier - Full Content Access:**
    *   `[ ]` (TDD - Feature) Ensure `ProtocolResource` tests cover conditional loading of `implementation_guide`.
    *   `[ ]` (TDD - Feature) Ensure `GET /protocols` tests cover premium user getting full list / rich data via Resource.

*   **Premium Tier - Custom Reminders (MVP Scope):**
    *   **Database:**
        *   `[ ]` Implement `create_user_reminders_table` migration. Run migration.
        *   `[ ]` (TDD) Test `UserReminder` model attributes & relationships.
        *   `[ ]` Implement `UserReminder` model (`app/Modules/ProtocolEngine/Models/`).
    *   **API CRUD:**
        *   `[ ]` Implement `ReminderPolicy`.
        *   `[ ]` (TDD) Test `ReminderPolicy` (premium check, ownership).
        *   `[ ]` **Create:** (TDD) API Test, Implement `StoreReminderRequest`, `ReminderController::store`, `ReminderService::setReminder`, Define Route + Middleware/Policy.
        *   `[ ]` **List:** (TDD) API Test, Implement `ReminderController::index`, `ReminderService::getUserReminders`, Define Route + Middleware.
        *   `[ ]` **Update:** (TDD) API Test, Implement `UpdateReminderRequest`, `ReminderController::update`, `ReminderService::updateReminder`, Define Route + Middleware/Policy.
        *   `[ ]` **Delete:** (TDD) API Test, Implement `ReminderController::destroy`, `ReminderService::deleteReminder`, Define Route + Middleware/Policy.
    *   **Scheduling Logic:**
        *   `[ ]` Implement `reminders:send-due` command logic (query, timezone conversion, frequency check).
        *   `[ ]` (TDD) Test `reminders:send-due` command finds due reminders (mock `now()`).
        *   `[ ]` Ensure command dispatches `SendProtocolReminderNotification` job.
        *   `[ ]` Schedule command in `Kernel.php` (`everyMinute()`).
    *   **Notification Sending:**
        *   `[ ]` Implement `SendProtocolReminderNotification` Job.
        *   `[ ]` Implement `ProtocolReminder` Notification class (`toFcm`, `toApns`).
        *   `[ ]` (TDD) Test Job retrieves data, fetches token, constructs payload, mocks `Notification::send()`.
        *   `[ ]` Implement token fetching logic in Job.
        *   `[ ]` Implement `Notification::send()` call in Job.
        *   `[ ]` Implement `last_sent_at` update in Job.
    *   **Device Token Management:**
        *   `[ ]` Add `device_tokens` column to `users` table OR create `user_devices` table migration. Run migration.
        *   `[ ]` (TDD) Test storing/retrieving tokens for a user.
        *   `[ ]` Implement `UpdateDeviceTokenRequest`.
        *   `[ ]` Implement `UserController::updateDeviceToken`.
        *   `[ ]` Define `POST /api/v1/user/device-token` route + `auth:sanctum`.

---

## Phase 8: Implementing Post-MVP Features (As Prioritized - TDD Focus)

*   **Notes Service (Example):**
    *   **Models & Migrations:** Implement `create_notes_table`, (TDD) Test `Note` Model, Implement `Note` Model.
    *   **Policies & Auth:** Implement `NotePolicy`, (TDD) Test Policy (free limits, public premium, ownership).
    *   **Service Layer:** Define `NoteServiceInterface`, Implement `NoteService`, Bind Interface, (TDD - Unit) Test Service methods (CRUD, counts, public list).
    *   **API Endpoints:**
        *   **Create:** (TDD) API Test, Implement Request, Controller, Define Route.
        *   **List User:** (TDD) API Test, Implement Controller, Define Route.
        *   **Show:** (TDD) API Test, Implement Controller, Define Route.
        *   **Update:** (TDD) API Test, Implement Request, Controller, Define Route.
        *   **Delete:** (TDD) API Test, Implement Controller, Define Route.
        *   **List Public:** (TDD) API Test, Implement Controller, Define Route.

*   **Tracking Service (Placeholder - Apply same pattern):**
    *   `[ ]` **Models & Migrations:** Implement `create_user_protocol_tracking_table`, (TDD) Test `TrackingLog` Model, Implement Model.
    *   `[ ]` **Policies & Auth:** Implement Policy (Premium check), (TDD) Test Policy.
    *   `[ ]` **Service Layer:** Define Interface, Implement Service (streak logic), Bind, (TDD - Unit) Test Service (log adherence, calculate streak).
    *   `[ ]` **API Endpoints:**
        *   `[ ]` **Log Adherence:** (TDD) API Test, Implement Request, Controller, Define Route.
        *   `[ ]` **Get Summary/Streak:** (TDD) API Test, Implement Controller, Define Route.

*   *(Repeat pattern for other Post-MVP features like Offline Access, Advanced Notes Org, Community, Routines)*

---

## Phase 9: API Documentation & Refinement

*   **Setup:**
    *   `[ ]` Install & Configure `zircote/swagger-php` OR choose manual editing tool.
*   **Annotation/Manual Update:**
    *   `[ ]` Review `openapi.yaml` structure.
    *   `[ ]` Annotate/Document: `Authentication` module endpoints & schemas.
    *   `[ ]` Annotate/Document: `UserManagement` module endpoints & schemas.
    *   `[ ]` Annotate/Document: `SubscriptionBilling` module endpoints & schemas (incl. webhooks).
    *   `[ ]` Annotate/Document: `ContentManagement` module endpoints & schemas (note premium diffs).
    *   `[ ]` Annotate/Document: `NotesService` module endpoints & schemas (note premium diffs).
    *   `[ ]` Annotate/Document: `ProtocolEngine` module endpoints & schemas (premium).
    *   `[ ]` Define/Review: Reusable schemas in `components/schemas`.
    *   `[ ]` Define/Review: Reusable error responses in `components/responses`.
    *   `[ ]` Define/Review: Security schemes (`bearerAuth`) and apply.
*   **Generation & Validation:**
    *   `[ ]` Generate `openapi.yaml`.
    *   `[ ]` Validate `openapi.yaml` using validator tool. Fix errors.
*   **Commit:**
    *   `[ ]` Commit final, validated `openapi.yaml` to repository.

---

## Phase 10: Testing & Quality Assurance

*   **Test Coverage Review:**
    *   `[ ]` Generate PHPUnit code coverage report.
    *   `[ ]` Analyze report, identify gaps in critical modules.
    *   `[ ]` Write additional unit/integration tests to improve coverage.
*   **Integration Flow Testing:**
    *   `[ ]` (TDD - Feature) Test Flow: Registration -> Login.
    *   `[ ]` (TDD - Feature) Test Flow: Free User Access (Check premium endpoint access denied).
    *   `[ ]` (TDD - Feature) Test Flow: Subscription Upgrade (Simulated webhook -> Premium access granted).
    *   `[ ]` (TDD - Feature) Test Flow: Subscription Cancellation (Simulated webhook -> Access revoked after `ends_at`).
    *   `[ ]` (TDD - Feature) Test Flow: Reminder Setting & Receiving (Simulated: Create reminder -> Time passes -> Job runs -> Mock Notification sent).
*   **Manual QA:**
    *   `[ ]` Develop manual test cases/checklist (Free & Premium flows).
    *   `[ ]` Execute manual tests on Staging.
    *   `[ ]` Perform exploratory testing on Staging.
    *   `[ ]` Perform Design QA against Figma mocks.
    *   `[ ]` Log bugs in tracking tool.
    *   `[ ]` Verify bug fixes on Staging.
*   **Security Testing:**
    *   `[ ]` Run final `composer audit`.
    *   `[ ]` Run final SAST scans (PHPStan/Psalm), address findings.
    *   `[ ]` Perform basic DAST scan (OWASP ZAP) against Staging, analyze critical findings.
*   **Performance Testing (Basic):**
    *   `[ ]` Manually assess key API endpoint response times on Staging.
    *   `[ ]` (Optional MVP+) Perform basic load test (k6) against read-heavy endpoints.

---

## Phase 11: Deployment Preparation

*   **Environment Configuration:**
    *   `[ ]` Finalize `.env` templates (`.env.staging.example`, `.env.production.example`).
    *   `[ ]` Configure environment variables securely in Forge/Vapor for Staging.
    *   `[ ]` Configure environment variables securely in Forge/Vapor for Production.
*   **Infrastructure Provisioning & Configuration:**
    *   `[ ]` Provision/Configure Staging: Managed DB & Redis, Backups, Workers, DNS, SSL.
    *   `[ ]` Provision/Configure Production: Managed DB & Redis, Backups, Workers, DNS, SSL. Document restore procedure.
*   **CI/CD Pipeline Finalization:**
    *   `[ ]` Add Staging deployment step/job to `ci.yml`.
    *   `[ ]` Add Production deployment step/job to `ci.yml`.
    *   `[ ]` Ensure CI pipeline runs build steps (`composer install --no-dev`, assets?).
    *   `[ ]` Ensure pipeline runs migrations (`php artisan migrate --force`).
    *   `[ ]` Test full Staging deployment via CI/CD.
*   **Monitoring & Logging Setup:**
    *   `[ ]` Integrate Error Tracking SDK (Sentry/Flare) for Staging/Prod.
    *   `[ ]` Configure Laravel logging (stack, daily file, aggregation service/driver, JSON format, Prod level WARN+, Staging level DEBUG).
    *   `[ ]` Set up monitoring dashboards (System, App, Queue metrics).
    *   `[ ]` Configure critical alerts (Errors, Resources, Queue).
*   **Pre-computation/Seeding:**
    *   `[ ]` Prepare/Review production seeders (`PlanSeeder`).
    *   `[ ]` Identify any other essential production seed data.

---

## Phase 12: Production Launch & Post-Launch

*   **Pre-Launch Checks:**
    *   `[ ]` Perform final Staging deployment dry-run.
    *   `[ ]` Complete final Staging manual QA / Smoke Testing.
    *   `[ ]` Confirm Production environment variables.
    *   `[ ]` Confirm Production database backups configured.
    *   `[ ]` Coordinate launch window.
*   **Launch:**
    *   `[ ]` Merge release branch / Create release tag.
    *   `[ ]` Trigger Production deployment via CI/CD.
    *   `[ ]` Run Production migrations & essential seeders.
    *   `[ ]` Perform Production smoke tests (critical paths).
*   **Post-Launch Monitoring:**
    *   `[ ]` **Intensive Monitoring (Day 1-3):** Watch error tracking, logs, performance dashboards, queues, payment dashboards.
    *   `[ ]` Triage/Prioritize critical post-launch bugs.
*   **Ongoing:**
    *   `[ ]` Schedule/Confirm external penetration testing.
    *   `[ ]` Remediate pen test findings.
    *   `[ ]` Establish dependency update schedule.
    *   `[ ]` Periodically review monitoring/logs.
    *   `[ ]` Conduct periodic backup restoration tests (quarterly).
--- END FILE: app_documentation/backend_implementation_todo.md ---

--- START FILE: app_documentation/component_breakdown.md ---
**Huberman App: Backend Component Breakdown (Modular Monolith)**

**1. Introduction**

This document details the proposed modular structure for the Huberman App's Laravel backend, following the Modular Monolith pattern outlined in the architecture and implementation plan (`architecture_pan.md`, `detailed_plan.md`). The goal is to organize the codebase into distinct, domain-focused modules (represented as namespaces/folders within the `app/` directory) to improve maintainability, scalability, and clarity of responsibilities. While running as a single application, these logical boundaries help manage complexity as the application grows.

Each module will encapsulate its specific domain logic, including Models, Controllers (for API endpoints related to the module), Services, Events, Listeners, Policies, Requests, etc.

**2. Proposed Backend Modules**

The initial set of proposed modules, located under `app/Modules/`, are:

*   **`app/Modules/Authentication`**
    *   **Responsibilities:** Handles user registration, login (authentication), password reset functionality, API token issuance and potentially revocation (e.g., integrating Laravel Sanctum or Passport).
    *   **Key Components:**
        *   `Http/Controllers/AuthController.php` (Handles API login, register, logout, etc.)
        *   `Http/Controllers/PasswordResetController.php` (Handles password reset flow)
        *   `Http/Requests/LoginRequest.php`, `RegisterRequest.php`
        *   Potentially `Services/AuthService.php` for complex logic.
        *   Related Routes definition.
        *   Authentication-related Middleware (e.g., `EnsureTokenIsValid`).

*   **`app/Modules/UserManagement`**
    *   **Responsibilities:** Manages user data beyond authentication, such as profile information (name, potentially picture), user settings, and serves as the owner of the core `User` model. It collaborates with `SubscriptionBilling` to understand a user's access level.
    *   **Key Components:**
        *   `Models/User.php` (The core Eloquent User model)
        *   `Http/Controllers/UserController.php` (API for fetching/updating user profile)
        *   `Http/Requests/UpdateProfileRequest.php`
        *   `Services/UserService.php`
        *   `Policies/UserPolicy.php` (Authorization for profile actions)
        *   Database migrations for the `users` table.

*   **`app/Modules/SubscriptionBilling`**
    *   **Responsibilities:** Manages subscription plans (`Plan` model), tracks user subscriptions (`Subscription` model), integrates with payment providers (Stripe/Paddle via Cashier), handles incoming webhooks for payment events (success, failure, cancellation), and provides the core logic for checking a user's subscription status and entitlements (feature gating).
    *   **Key Components:**
        *   `Models/Plan.php`
        *   `Models/Subscription.php`
        *   `Http/Controllers/SubscriptionController.php` (API for fetching plans, potentially initiating checkout flows)
        *   `Http/Controllers/WebhookController.php` (Handles Stripe/Paddle/Apple/Google webhooks)
        *   `Services/BillingService.php` or `SubscriptionService.php` (Core logic for status checks, webhook processing)
        *   `Policies/SubscriptionPolicy.php` or Middleware (e.g., `CheckPremiumAccess`) - *Crucial for Feature Gating*.
        *   Listeners for Cashier events (if applicable).
        *   Database migrations for `plans`, `subscriptions` tables.

*   **`app/Modules/ContentManagement`**
    *   **Responsibilities:** Manages the core application content: Podcast Episodes, Protocols, Summaries, Key Takeaways. Includes logic for creating, retrieving, updating, and deleting this content (potentially via admin interfaces or seeders) and exposing it through the API, respecting access levels determined by `SubscriptionBilling`.
    *   **Key Components:**
        *   `Models/Episode.php`, `Protocol.php`, `Summary.php`
        *   `Http/Controllers/EpisodeController.php` (API for episodes)
        *   `Http/Controllers/ProtocolController.php` (API for protocols)
        *   `Http/Controllers/SummaryController.php` (API for summaries)
        *   `Services/ContentService.php` (May handle complex queries or formatting)
        *   Database migrations for `episodes`, `protocols`, `summaries`, `episode_protocol` tables.
        *   Potentially Resource Collections for API responses.

*   **`app/Modules/ProtocolEngine`**
    *   **Responsibilities:** Handles the *application* of protocols, primarily focusing on the reminder and tracking features (Premium). Includes logic for setting/managing user-defined reminders, scheduling notifications, and recording user adherence to protocols.
    *   **Key Components:**
        *   `Http/Controllers/ReminderController.php` (API for CRUD operations on user reminders - Premium)
        *   `Http/Controllers/TrackingController.php` (API for logging protocol adherence - Premium)
        *   `Services/ReminderService.php` (Logic for scheduling/managing reminders)
        *   `Services/TrackingService.php` (Logic for recording/calculating adherence, streaks)
        *   Potentially `Models/UserReminder.php`, `Models/ProtocolTrack.php`
        *   Related `Jobs` (e.g., `SendProtocolReminderNotification`) pushed to the queue.
        *   Console Commands (e.g., for queue workers, potentially scheduling checks).
        *   Policies/Middleware to ensure only Premium users can access these features.

*   **`app/Modules/NotesService`**
    *   **Responsibilities:** Manages user-created notes linked to episodes. Handles CRUD operations, public/private status, and potentially organization features (tags, search - likely Premium).
    *   **Key Components:**
        *   `Models/Note.php`
        *   `Http/Controllers/NoteController.php` (API for note CRUD)
        *   `Services/NoteService.php`
        *   `Policies/NotePolicy.php` (Ensures users can only manage their own notes, checks Premium status for advanced features like unlimited notes or public sharing).
        *   Database migrations for the `notes` table.

*   **`app/Modules/CommunityFeatures`** (If implemented early)
    *   **Responsibilities:** Focuses on features involving multiple users interacting, such as viewing public notes associated with episodes or potential discussion forums. Relies heavily on `NotesService` (for public notes) and `SubscriptionBilling` (access control).
    *   **Key Components:**
        *   `Http/Controllers/PublicContentController.php` (API for fetching public notes, etc.)
        *   Services related to fetching/aggregating community content.
        *   Policies/Middleware enforcing Premium access if applicable.

*   **`app/Modules/CoreApi`** (Potentially minimal or evolves to `SharedKernel`)
    *   **Responsibilities:** This module might be less domain-specific. Initially, it could house base API controllers, shared API traits (e.g., for standardized responses), common API middleware registration, or core exception handling for the API. Alternatively, these elements might be placed directly in `app/Http` or `app/Providers`, and this module could evolve into a `SharedKernel` for truly cross-cutting domain logic (e.g., shared interfaces, base service classes) not tied to a specific module *or* the HTTP layer. API controllers for specific domains (`User`, `Content`, `Note`, etc.) reside within their respective modules (`UserManagement`, `ContentManagement`, `NotesService`).
    *   **Key Components (Potential):**
        *   `Http/Controllers/Api/BaseApiController.php`
        *   `Traits/ApiResponseHelpers.php`
        *   Centralized API middleware registration logic (if not in `app/Http/Kernel.php`).

**3. Interactions**

Modules will interact primarily through:
*   **Service Classes:** Injecting services from one module into another (e.g., `NotePolicy` using `SubscriptionService` to check status).
*   **Events and Listeners:** Decoupled communication (e.g., `SubscriptionBilling` firing `SubscriptionActivated` event, listened to by `UserManagement` or `ProtocolEngine`).
*   **Eloquent Relationships:** Defined on Models (e.g., `User` hasMany `Subscription`).

**4. Conclusion**

This modular breakdown provides a structured approach to developing the Laravel backend. It aims to create clear boundaries between different functional areas of the application, facilitating parallel development, easier testing, and long-term maintainability, while still benefiting from the simplicity of a single deployment unit (monolith).
--- END FILE: app_documentation/component_breakdown.md ---

--- START FILE: app_documentation/component_interfaces_interactions.md ---

**Huberman App: Backend Component Interfaces & Interactions**

**1. Introduction**

Following the definition of backend modules in `component_breakdown.md`, this document specifies the interfaces, contracts, and primary interaction patterns between these modules within the Laravel Modular Monolith. The goal is to ensure loose coupling where appropriate, define clear responsibilities, and illustrate how data and control flow, particularly for critical cross-cutting concerns like subscription-based feature gating.

**2. Primary Interaction Mechanisms**

Modules within the backend will primarily interact using standard Laravel patterns designed to promote maintainability and testability:

*   **Dependency Injection (DI) & Service Interfaces:** The preferred method for direct inter-module communication. Modules will define interfaces (contracts) for their core services. Other modules will type-hint these interfaces in their constructors or methods, allowing Laravel's service container to inject the concrete implementation. This decouples the modules.
*   **Events and Listeners:** Used for broadcasting significant state changes or actions without requiring the originating module to know about all interested parties. For example, when a subscription status changes, an event can be fired, and multiple listeners in different modules can react accordingly (e.g., clearing caches, enabling/disabling features).
*   **Middleware:** Used primarily for cross-cutting concerns applied at the HTTP request level, notably for authentication (handled by `Authentication` module's logic) and authorization/feature gating (checking subscription status via `SubscriptionBilling` module's logic before allowing access to specific API routes/controllers).
*   **Policies:** Used for fine-grained authorization logic, often related to specific Eloquent models. Policies within a module (e.g., `NotePolicy` in `NotesService`) can leverage services from other modules (like `SubscriptionBilling`) to make authorization decisions.
*   **Eloquent Relationships:** Models defined within modules will use standard Eloquent relationships (`hasMany`, `belongsTo`, etc.) to interact with models in other modules where direct data relationships exist (e.g., `User` model in `UserManagement` has many `Subscription` models in `SubscriptionBilling`).

**3. Key Module Interfaces & Service Contracts**

Here are *examples* of key interfaces or service methods that modules might expose or consume. Concrete implementations will reside within the respective modules.

*   **`Authentication` Module:**
    *   *Primarily Consumed:* Consumes `UserManagement` services/models for user lookup/creation.
    *   *Exposes:* Less direct service interfaces, more functionality via controllers and standard Laravel Auth mechanisms (e.g., `Auth::user()`).
    *   *Fires Events:* `UserRegistered`, `UserLoggedIn`, `PasswordResetRequested`.

*   **`UserManagement` Module:**
    *   *Exposes:*
        *   `App\Modules\UserManagement\Models\User` (The core User model, accessible throughout the application).
        *   Potentially `UserServiceInterface` for complex profile operations (if needed beyond simple CRUD).
    *   *Listens To Events:* Potentially `SubscriptionStatusChanged` (from `SubscriptionBilling`) to update cached user properties if necessary.

*   **`SubscriptionBilling` Module:**
    *   *Exposes (Crucial Interfaces):*
        *   `SubscriptionServiceInterface`:
            *   `userHasActivePremiumSubscription(User $user): bool` - *Core method for feature gating.*
            *   `getUserPlan(User $user): ?Plan`
            *   `getSubscriptionStatus(User $user): string`
            *   `handleWebhook(string $provider, array $payload): void` (Internal logic invoked by WebhookController).
            *   Methods to retrieve plan details for the frontend API.
        *   `Models\Plan`, `Models\Subscription`.
    *   *Consumes:* `UserManagement` (for `User` model).
    *   *Fires Events:* `SubscriptionStarted`, `SubscriptionRenewed`, `SubscriptionCanceled`, `SubscriptionExpired`, `PaymentFailed`, `TrialWillEndSoon`.

*   **`ContentManagement` Module:**
    *   *Exposes:*
        *   `ContentServiceInterface` (or specific interfaces like `EpisodeServiceInterface`, `ProtocolServiceInterface`):
            *   `getFreeTierProtocols(): Collection`
            *   `getAllProtocols(): Collection`
            *   `getProtocolDetails(int $protocolId): ?Protocol`
            *   `getEpisodeSummaries(int $episodeId): Collection`
            *   `getEpisodeDetails(int $episodeId): ?Episode`
        *   `Models\Episode`, `Models\Protocol`, `Models\Summary`.
    *   *Consumes:* May indirectly use `SubscriptionBilling` (via middleware/policies applied to its controllers) to restrict access to certain data retrieval methods/endpoints.

*   **`ProtocolEngine` Module:**
    *   *Exposes:*
        *   `ReminderServiceInterface`:
            *   `setReminder(User $user, int $protocolId, array $settings): UserReminder` (Requires premium check internally).
            *   `getUserReminders(User $user): Collection`
            *   `deleteReminder(User $user, int $reminderId): bool`
        *   `TrackingServiceInterface`:
            *   `logAdherence(User $user, int $protocolId, Carbon $date): ProtocolTrack` (Requires premium check internally).
            *   `getUserTrackingData(User $user, DateRange $range): array`
            *   `calculateStreaks(User $user, int $protocolId): int`
    *   *Consumes:*
        *   `SubscriptionServiceInterface` (to perform internal premium checks before executing actions).
        *   `UserManagement` (for `User` model).
        *   `ContentManagement` (for `Protocol` model details).
    *   *Listens To Events:* Potentially `SubscriptionExpired` (to disable active reminders if needed).

*   **`NotesService` Module:**
    *   *Exposes:*
        *   `NoteServiceInterface`:
            *   `createNote(User $user, int $episodeId, string $content, bool $isPublic = false): Note` (Checks limits/public permission).
            *   `updateNote(User $user, int $noteId, array $data): Note`
            *   `deleteNote(User $user, int $noteId): bool`
            *   `getUserNotes(User $user, ?int $episodeId = null): Collection`
            *   `getPublicNotesForEpisode(int $episodeId): Collection`
        *   `Models\Note`.
    *   *Consumes:*
        *   `SubscriptionServiceInterface` (within its policies/services to check free tier limits or premium permission for public notes/advanced features).
        *   `UserManagement` (for `User`).
        *   `ContentManagement` (for `Episode`).

*   **`CommunityFeatures` Module:**
    *   *Consumes:*
        *   `NoteServiceInterface` (to fetch public notes).
        *   `SubscriptionServiceInterface` (via middleware/policies to control access to community sections if they are premium).
        *   `UserManagement` (for user details).

**4. Key Interaction Flow Examples (Sequence Diagrams - Conceptual)**

*   **Flow 1: User Accesses Premium Protocol Details (API Request)**
    1.  `React Native App` -> `API Request (GET /api/protocols/{id})`
    2.  `Laravel Router` -> `CheckPremiumAccess Middleware`
    3.  `CheckPremiumAccess Middleware` -> `Auth` (Get Authenticated User)
    4.  `CheckPremiumAccess Middleware` -> `SubscriptionServiceInterface::userHasActivePremiumSubscription(User)`
    5.  `SubscriptionService` -> `Database/Cache` (Check `subscriptions` table for User) -> Returns `true`
    6.  `CheckPremiumAccess Middleware` -> `Allows Request`
    7.  `Laravel Router` -> `ProtocolController::show(protocolId)`
    8.  `ProtocolController` -> `ProtocolServiceInterface::getProtocolDetails(protocolId)`
    9.  `ProtocolService` -> `Database` (Fetch Protocol data)
    10. `ProtocolController` -> `Format Response` (e.g., using API Resource)
    11. `Laravel` -> `API Response (200 OK with Protocol Data)` -> `React Native App`

*   **Flow 2: User Sets a Custom Reminder (API Request - Premium Feature)**
    1.  `React Native App` -> `API Request (POST /api/reminders)` with protocol ID, time settings.
    2.  `Laravel Router` -> `CheckPremiumAccess Middleware`
    3.  `CheckPremiumAccess Middleware` -> ... (verifies premium as in Flow 1) -> `Allows Request`
    4.  `Laravel Router` -> `ReminderController::store(Request)`
    5.  `ReminderController` -> `SetReminderRequest` (Validation)
    6.  `ReminderController` -> `ReminderServiceInterface::setReminder(User, protocolId, settings)`
    7.  *(Defense-in-depth): `ReminderService` -> `SubscriptionServiceInterface::userHasActivePremiumSubscription(User)` -> Returns `true`*
    8.  `ReminderService` -> `Database` (Save `UserReminder` record)
    9.  `ReminderService` -> `Queue::dispatch(new ScheduleReminderJob(reminderId))` (Optional: If scheduling is complex)
    10. `ReminderController` -> `Format Response (201 Created)`
    11. `Laravel` -> `API Response` -> `React Native App`

*   **Flow 3: Payment Provider Webhook (Subscription Renewed)**
    1.  `Stripe/Paddle/App Store` -> `POST /api/webhooks/{provider}`
    2.  `Laravel Router` -> `WebhookController::handle(provider, Request)`
    3.  `WebhookController` -> `VerifyWebhookSignature Middleware/Logic`
    4.  `WebhookController` -> `SubscriptionServiceInterface::handleWebhook(provider, payload)`
    5.  `SubscriptionService` -> `Parse Payload` (Identify event type: e.g., `invoice.payment_succeeded`, `subscription.updated`)
    6.  `SubscriptionService` -> `Database` (Find corresponding `User` and `Subscription` record)
    7.  `SubscriptionService` -> `Database` (Update `Subscription` status, `ends_at` date)
    8.  `SubscriptionService` -> `Event::dispatch(new SubscriptionRenewed(Subscription))`
    9.  `SubscriptionRenewed Listener 1` (e.g., `ClearUserEntitlementCache`) -> `Cache::forget(...)`
    10. `SubscriptionRenewed Listener 2` (e.g., `SendRenewalConfirmationEmail`) -> `Queue::dispatch(...)` (Optional)
    11. `WebhookController` -> `Return Success Response (200 OK)` -> `Payment Provider`

**5. Frontend Interaction Summary**

The React Native frontend interacts with the backend *exclusively* through the defined RESTful API. It is unaware of the internal module structure, service interfaces, or events. The backend API is responsible for:
*   Authenticating the user.
*   Performing all necessary authorization and feature gating based on subscription status.
*   Returning data appropriate to the user's access level (e.g., filtering content, including flags like `is_premium_user: true` or `can_set_reminders: true`).
*   Accepting requests and triggering the relevant backend logic.

**6. Conclusion**

Defining clear interfaces (primarily through PHP Interfaces for Services) and interaction patterns (DI, Events, Middleware, Policies) allows for a decoupled yet cohesive Modular Monolith. This structure facilitates understanding responsibilities, enhances testability (by mocking dependencies), and enables more organized development and maintenance of the Huberman App backend. The key cross-cutting concern of subscription checking is handled systematically via middleware and service calls, ensuring consistent feature gating.
--- END FILE: app_documentation/component_interfaces_interactions.md ---

--- START FILE: app_documentation/content_strategy_management.md ---

**Huberman App: Initial Content Strategy & Management Plan**

**1. Introduction**

This document outlines the strategy for sourcing, preparing, and ingesting the initial content required for the Huberman App backend, particularly for the Minimum Viable Product (MVP). This includes foundational protocols, summaries, and other necessary data points defined in `app_description.md` and `user_stories_mvp.md`. The goal is to establish a clear process for populating the database using Laravel Seeders.

**2. Initial Content Scope (MVP Focus)**

Based on the MVP definition, the initial content required includes:

*   **Subscription Plans:** Definition of the "Free" tier and at least one "Premium" tier (e.g., Monthly/Annual) with their identifiers (e.g., `Premium_Monthly`). Provider-specific IDs (Stripe, Apple, Google) will be needed later but placeholders can be used initially in seeders.
*   **Foundational Protocols:** A selected subset of core protocols discussed frequently in the Huberman Lab podcast (e.g., Morning Sunlight Viewing, Cold Exposure, Foundational Fitness Protocols). For each:
    *   Unique Name
    *   Category (e.g., Sleep, Focus, Fitness)
    *   Brief Description (Accessible to Free users)
    *   *(Optional MVP)* Placeholder/basic Implementation Guide (Premium access)
*   **Summaries for Foundational Protocols:** Concise summaries linked to the foundational protocols above.
*   **Placeholder Episodes:** A few basic episode entries might be needed to link summaries and notes to, even if full episode data isn't part of the MVP content focus.

**3. Content Source & Curation**

*   **Source Material:** The primary source for protocol and summary content will be the public Huberman Lab podcast episodes and potentially official associated materials (e.g., summaries on the Huberman Lab website, newsletters).
*   **Curation Process:**
    *   **Responsibility:** A designated **"Content Curator"** role is required. This role is responsible for listening to/reviewing source material, extracting key information, writing descriptions and summaries, and ensuring scientific accuracy aligns with the source. *(This role needs to be assigned - could be a project manager, a subject matter expert, or the client)*.
    *   **Extraction:** The Curator will identify the foundational protocols for the MVP, extract their names, core principles (for description), and key takeaways (for summaries).
    *   **Writing:** The Curator will write the actual `description` and `summary` text, adhering to a consistent tone and style suitable for the app. Accuracy and clarity are paramount.

**4. Content Preparation & Formatting**

*   **Format:** Content curated should be prepared in **Markdown (`.md`)** format. This provides basic text formatting (headings, lists, bold/italic) while remaining easy for developers to parse and integrate into seeders.
*   **Structure:** Separate Markdown files should be created for each protocol and potentially each summary, or grouped logically (e.g., one file per protocol containing its description and summary). A consistent structure within the files is recommended.
    *   *Example `morning_sunlight.md` structure:*
        ```markdown
        # Protocol: Morning Sunlight Viewing

        **Category:** Sleep, Circadian Rhythm

        **Description:**
        Brief explanation of the importance of viewing sunlight shortly after waking...

        **Summary:**
        Key takeaway points about the protocol...

        **(Premium) Implementation Guide:**
        Step-by-step guide (can be basic/placeholder for MVP)...
        ```
*   **Review:** Before handing off to development, the curated and formatted Markdown content should be reviewed for accuracy, clarity, consistency, and typos (potentially by another team member or the client).

**5. Ingestion Format (for Seeders)**

*   **Method:** The prepared content will be directly embedded into PHP arrays within dedicated Laravel Seeder classes (e.g., `FoundationalProtocolsSeeder.php`, `SummariesSeeder.php`).
*   **Rationale:** For the initial, relatively small MVP dataset, embedding directly in PHP arrays is the simplest method. It avoids the need for parsing external files (like JSON or CSV) during the seeding process. If the initial dataset becomes very large, transitioning to reading from JSON files stored alongside the seeders can be considered.
*   **Data Structure in Seeders:** The seeders will translate the Markdown content into the structure required by the Eloquent models (`Protocol`, `Summary`, `Episode`). Markdown text can be stored directly in the appropriate database fields (`description`, `content`, `implementation_guide`).

**6. Ingestion Mechanism (Laravel Seeders)**

*   **Implementation:** Backend developers will create the necessary Seeder classes within the `database/seeders/` directory.
*   **Specific Seeders:**
    *   `PlanSeeder.php`: Creates the 'Free' and 'Premium' plan records. Should use `updateOrCreate` to avoid duplicates on re-seeding.
    *   `EpisodeSeeder.php`: Creates placeholder Episode records if needed for relationships.
    *   `FoundationalProtocolsSeeder.php`: Creates the initial `Protocol` records from the prepared Markdown content.
    *   `SummariesSeeder.php`: Creates the initial `Summary` records, linking them to the appropriate `Protocol` or `Episode` IDs created in previous seeders.
    *   `EpisodeProtocolSeeder.php`: Links Episodes and Protocols in the pivot table if necessary for MVP structure.
*   **Execution:** Seeders will be executed using `php artisan db:seed`. They will be called sequentially from the main `DatabaseSeeder.php` file to ensure relational integrity (e.g., create protocols before summaries that link to them).
*   **Environment:** Seeders should be designed to run safely in development environments. Running seeders in staging/production needs careful consideration (usually only done for initial setup or specific reference data like Plans).

**7. Responsibilities**

*   **Content Curator:** Identify source material, extract information, write/format descriptions & summaries in Markdown, review for accuracy.
*   **Backend Developer:** Create/update Seeder classes, integrate Markdown content into PHP arrays within seeders, ensure seeders run correctly and populate the database as expected, handle relationships.
*   **QA / PM / Client:** Review the content *as it appears in the running application* (after seeding) to ensure it displays correctly and matches requirements.

**8. Future Content Management**

*   **Limitation of Seeders:** Seeders are primarily for initial data setup and developer environments. They are **not** a suitable mechanism for ongoing content updates by non-developers in a production environment.
*   **Post-MVP:** A separate strategy and implementation plan will be required for ongoing content management. This will likely involve developing an Admin Panel or integrating a Headless CMS to allow the Content Curator or other authorized users to add, edit, and manage protocols, episodes, and summaries without requiring code changes and deployments.

**9. Conclusion**

This plan outlines a clear process for handling the initial content load for the Huberman App MVP. By defining the source, curation process, formatting (Markdown), and ingestion mechanism (Laravel Seeders directly using PHP arrays), we can ensure the necessary foundational content is reliably populated for development, testing, and the initial launch. The need for a more robust, long-term content management solution post-MVP is acknowledged.
--- END FILE: app_documentation/content_strategy_management.md ---

--- START FILE: app_documentation/database_migrations_plan.md ---

**Huberman App: Database Migrations Plan**

**1. Introduction**

This document outlines the plan for translating the conceptual SQL schema defined in `database_plan.md` into executable Laravel migration files. These migrations will provide a version-controlled, repeatable, and database-agnostic way (within Laravel's supported databases) to define and evolve the application's database structure.

**2. Process Overview**

1.  **Review SQL Schema:** Thoroughly review the `database_plan.md` file to understand table structures, data types, constraints (NOT NULL, UNIQUE), foreign key relationships, `ON DELETE` behavior, and indexes.
2.  **Map SQL to Laravel Schema Builder:** Translate each `CREATE TABLE` and `CREATE INDEX` statement into the corresponding Laravel `Schema` facade methods (`Schema::create`, `$table->id()`, `$table->string()`, `$table->foreignId()`, `$table->constrained()`, `$table->unique()`, `$table->index()`, `$table->timestamps()`, `$table->softDeletes()`, etc.).
3.  **Determine Migration Order:** Create migrations in an order that respects foreign key constraints. Tables must exist before they can be referenced by a foreign key.
    *   Order: `users`, `plans`, `episodes`, `protocols` -> `subscriptions`, `episode_protocol`, `summaries`, `notes` -> `user_protocol_tracking` (if implemented). Standard Laravel tables (`password_resets`, `jobs`, `failed_jobs`) can usually be created anytime or might already exist.
4.  **Generate Migration Files:** Use the `php artisan make:migration create_table_name_table` command for each table.
5.  **Implement `up()` Method:** Populate the `up()` method in each migration file with the `Schema::create(...)` logic derived in step 2.
6.  **Implement `down()` Method:** Populate the `down()` method with the corresponding `Schema::dropIfExists('table_name')` to ensure migrations can be rolled back cleanly.
7.  **Refine Constraints and Indexes:** Double-check:
    *   **Data Types:** Use appropriate types (`string`, `text`, `integer`, `bigInteger`, `boolean`, `date`, `timestamp`, `jsonb` for Postgres).
    *   **Nullability:** Apply `->nullable()` where needed.
    *   **Uniqueness:** Use `->unique()`.
    *   **Defaults:** Use `->default(...)`.
    *   **Foreign Keys:** Use `->foreignId('column')->constrained('related_table')->onDelete('action')`. Choose `cascade`, `restrict`, `set null`, or `no action` carefully based on relationships (e.g., `cascade` for user-owned data like notes/subscriptions, `restrict` for plans linked to active subscriptions).
    *   **Indexes:** Add `->index()` for frequently queried columns (FKs often indexed automatically by `constrained()`, status fields, categories, dates). Use array syntax for composite indexes (`->index(['col1', 'col2'])`).
    *   **Timestamps/Soft Deletes:** Use `$table->timestamps()` and `$table->softDeletes()` where appropriate.
8.  **Testing:** Run `php artisan migrate` on a local development database to verify syntax and execution. Test rollbacks using `php artisan migrate:rollback`.
9.  **Version Control:** Commit the generated migration files to the Git repository.

**3. Migration File Structure (Conceptual)**

Below is the conceptual structure for each required migration file. Specific commands to generate them are included.

**(Note:** Assumes a fresh Laravel project structure. Some standard migrations like `users`, `password_resets`, `failed_jobs` might pre-exist and need modification instead of creation.)

---

**1. Create Users Table**

*   **Command:** `php artisan make:migration create_users_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_users_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id(); // Bigint, unsigned, auto-increment, primary key
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->string('profile_picture_url', 2048)->nullable();
            $table->rememberToken();
            $table->timestamps(); // created_at, updated_at (nullable timestamps)
            $table->softDeletes(); // deleted_at (nullable timestamp)
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};
```

---

**2. Create Plans Table**

*   **Command:** `php artisan make:migration create_plans_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_plans_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('plans', function (Blueprint $table) {
            $table->id(); // Standard auto-incrementing primary key
            $table->string('name')->unique();
            $table->text('description')->nullable();
            $table->string('stripe_product_id')->nullable()->unique(); // Ensure unique if provider used
            $table->string('apple_product_id')->nullable()->unique();
            $table->string('google_product_id')->nullable()->unique();
            $table->jsonb('features')->nullable(); // Use jsonb for PostgreSQL efficiency
            $table->boolean('is_active')->default(true)->index();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('plans');
    }
};
```

---

**3. Create Subscriptions Table**

*   **Command:** `php artisan make:migration create_subscriptions_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_subscriptions_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('subscriptions', function (Blueprint $table) {
            $table->id(); // Bigint primary key
            $table->foreignId('user_id')->constrained('users')->onDelete('cascade'); // FK to users
            $table->foreignId('plan_id')->constrained('plans')->onDelete('restrict'); // FK to plans
            $table->string('status', 50)->index(); // e.g., active, canceled
            $table->string('provider', 50); // e.g., stripe, apple, google
            $table->string('provider_id'); // Subscription ID from provider
            $table->string('provider_plan_id')->nullable(); // Plan ID from provider
            $table->timestamp('trial_ends_at')->nullable();
            $table->timestamp('ends_at')->nullable()->index(); // Current period end or cancellation date
            $table->timestamps();
            $table->softDeletes(); // Keep record even if canceled by user action immediately

            // Composite index for efficient webhook lookups
            $table->index(['provider', 'provider_id']);
            // Optional: Unique constraint depending on provider ID handling
            // $table->unique(['user_id', 'provider', 'provider_id']); // Re-evaluate if needed
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('subscriptions');
    }
};
```

---

**4. Create Episodes Table**

*   **Command:** `php artisan make:migration create_episodes_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_episodes_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('episodes', function (Blueprint $table) {
            $table->id();
            $table->string('title', 512);
            $table->string('podcast_source')->default('Huberman Lab');
            $table->integer('episode_number')->nullable();
            $table->date('published_at')->nullable()->index();
            $table->text('description')->nullable();
            $table->string('audio_url', 2048)->nullable();
            $table->string('source_url', 2048)->nullable();
            $table->integer('duration_seconds')->nullable();
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('episodes');
    }
};
```

---

**5. Create Protocols Table**

*   **Command:** `php artisan make:migration create_protocols_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_protocols_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('protocols', function (Blueprint $table) {
            $table->id();
            $table->string('name')->unique();
            $table->text('description');
            $table->string('category', 100)->nullable()->index();
            $table->text('implementation_guide')->nullable();
            $table->jsonb('research_links')->nullable(); // Use jsonb for PostgreSQL
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('protocols');
    }
};
```

---

**6. Create Episode-Protocol Pivot Table**

*   **Command:** `php artisan make:migration create_episode_protocol_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_episode_protocol_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('episode_protocol', function (Blueprint $table) {
            $table->foreignId('episode_id')->constrained('episodes')->onDelete('cascade');
            $table->foreignId('protocol_id')->constrained('protocols')->onDelete('cascade');

            // Define composite primary key
            $table->primary(['episode_id', 'protocol_id']);

            // No timestamps by default for basic pivot
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('episode_protocol');
    }
};
```

---

**7. Create Summaries Table**

*   **Command:** `php artisan make:migration create_summaries_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_summaries_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('summaries', function (Blueprint $table) {
            $table->id();
            // Foreign key automatically indexed by constrained()
            $table->foreignId('episode_id')->constrained('episodes')->onDelete('cascade');
            // Optional: Protocol ID if summary is protocol-specific within episode
            // $table->foreignId('protocol_id')->nullable()->constrained('protocols')->onDelete('set null');
            $table->text('content');
            $table->string('type', 50)->default('summary')->index(); // Index type for filtering
            $table->timestamps();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('summaries');
    }
};
```

---

**8. Create Notes Table**

*   **Command:** `php artisan make:migration create_notes_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_notes_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('notes', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->onDelete('cascade');
            $table->foreignId('episode_id')->constrained('episodes')->onDelete('cascade');
            $table->text('content');
            $table->boolean('is_public')->default(false);
            $table->timestamps();

            // Composite index for fetching user's notes for an episode
            $table->index(['user_id', 'episode_id']);
            // Index for finding public notes for an episode (community feature)
            $table->index(['episode_id', 'is_public']); // Basic index; partial index requires raw SQL if essential
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('notes');
    }
};
```

---

**9. (Optional) Create User Protocol Tracking Table**

*   **Command:** `php artisan make:migration create_user_protocol_tracking_table`
*   **File:** `database/migrations/YYYY_MM_DD_HHMMSS_create_user_protocol_tracking_table.php`

```php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB; // Needed for default date

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('user_protocol_tracking', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->onDelete('cascade');
            $table->foreignId('protocol_id')->constrained('protocols')->onDelete('cascade');
            // Use default date function appropriate for the database
            $table->date('tracked_at')->default(DB::raw('CURRENT_DATE'));
            $table->text('notes')->nullable();
            $table->jsonb('metadata')->nullable(); // Use jsonb for PostgreSQL
            $table->timestamps(); // Use standard created_at/updated_at

            // Prevent duplicate tracking entries for the same user, protocol, and day
            $table->unique(['user_id', 'protocol_id', 'tracked_at']);
            // Note: The unique constraint implicitly creates an index covering (user_id, protocol_id, tracked_at)
            // A separate index on (user_id, protocol_id) is usually redundant.
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('user_protocol_tracking');
    }
};
```

---

**10. Standard Laravel Tables (If needed)**

*   **Password Resets:** `php artisan make:migration create_password_resets_table` (Check if exists first)
*   **Jobs:** `php artisan queue:table` then `php artisan migrate`
*   **Failed Jobs:** `php artisan make:migration create_failed_jobs_table` (Check if exists first)

---

**4. Execution**

After creating and reviewing these files:

1.  Ensure your `.env` file is configured with the correct database connection details.
2.  Run `php artisan migrate` from your project root in the terminal.
3.  Laravel will execute the `up()` method of each pending migration in chronological order.

**5. Outcome**

The result will be a database schema matching the application's requirements, managed entirely through version-controlled Laravel migration files. This allows for consistent setup across development, staging, and production environments, and provides a clear history of schema changes.
--- END FILE: app_documentation/database_migrations_plan.md ---

--- START FILE: app_documentation/database_plan.md ---
CREATE TABLE users (
    id BIGSERIAL PRIMARY KEY,                     -- Unique identifier for the user
    name VARCHAR(255) NOT NULL,                  -- User's display name
    email VARCHAR(255) NOT NULL UNIQUE,          -- User's email address (used for login, must be unique)
    password VARCHAR(255) NOT NULL,              -- Hashed password
    email_verified_at TIMESTAMP NULL,            -- Timestamp when the user verified their email address
    profile_picture_url VARCHAR(2048) NULL,      -- URL to the user's profile picture (optional)
    remember_token VARCHAR(100) NULL,            -- For "remember me" functionality (Laravel standard)
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL                    -- For soft deletes, if enabled
);

-- Index for faster email lookups (login)
CREATE INDEX idx_users_email ON users(email);

-- Plans Table: Defines the available subscription tiers (including Free).
CREATE TABLE plans (
    id SERIAL PRIMARY KEY,                       -- Unique identifier for the plan
    name VARCHAR(255) NOT NULL UNIQUE,           -- Human-readable name (e.g., 'Free', 'Premium Monthly', 'Premium Annual')
    description TEXT NULL,                       -- Optional description of the plan
    -- Provider-specific identifiers are crucial for mapping
    stripe_product_id VARCHAR(255) NULL UNIQUE,  -- Corresponding Product ID in Stripe (if using Stripe)
    apple_product_id VARCHAR(255) NULL UNIQUE,   -- Corresponding Product ID in App Store Connect (for IAP)
    google_product_id VARCHAR(255) NULL UNIQUE,  -- Corresponding Product ID in Google Play Console (for IAP)
    features JSONB NULL,                         -- Store list of features or entitlements as JSON (flexible)
    is_active BOOLEAN NOT NULL DEFAULT TRUE,     -- Flag to activate/deactivate plans without deleting
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    -- Note: Price details are often better managed within Stripe/App Stores or a separate related table
    --       if multiple prices exist per plan (e.g., different regions, currencies).
    --       Alternatively, add stripe_price_id etc. here if simple 1 price per plan.
);

-- Index for quickly finding active plans
CREATE INDEX idx_plans_is_active ON plans(is_active);

-- Subscriptions Table: Tracks user subscriptions to specific plans.
CREATE TABLE subscriptions (
    id BIGSERIAL PRIMARY KEY,                     -- Unique identifier for the subscription record
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE, -- Link to the user
    plan_id INT NOT NULL REFERENCES plans(id) ON DELETE RESTRICT, -- Link to the subscribed plan (RESTRICT prevents deleting a plan with active subs)
    status VARCHAR(50) NOT NULL,                 -- Current status (e.g., 'active', 'trialing', 'past_due', 'canceled', 'expired', 'incomplete')
    provider VARCHAR(50) NOT NULL,               -- Source ('stripe', 'apple', 'google')
    provider_id VARCHAR(255) NOT NULL,           -- Subscription ID from the payment provider (e.g., Stripe sub_xxx, Apple original_transaction_id, Google purchaseToken)
    provider_plan_id VARCHAR(255) NULL,          -- Plan/Product ID from the provider (redundant but useful for verification)
    trial_ends_at TIMESTAMP NULL,                -- Timestamp when the trial period ends (if applicable)
    ends_at TIMESTAMP NULL,                      -- Timestamp when the current subscription period ends (renews or expires)
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL                    -- For soft deletes (e.g., keep history even if user cancels immediately)

    -- Ensure a user + provider combo doesn't have duplicate active subscription IDs from the provider
    -- Note: Uniqueness might depend on how provider IDs are handled (e.g., Google Play tokens change)
    -- A composite unique index might be needed based on specific provider behavior.
    -- UNIQUE (user_id, provider, provider_id) -- Consider implications carefully
);

-- Indexes for common lookups
CREATE INDEX idx_subscriptions_user_id ON subscriptions(user_id);
CREATE INDEX idx_subscriptions_status ON subscriptions(status);
CREATE INDEX idx_subscriptions_ends_at ON subscriptions(ends_at);
CREATE INDEX idx_subscriptions_provider_id ON subscriptions(provider, provider_id); -- Useful for webhook lookups

-- Episodes Table: Stores information about podcast episodes.
CREATE TABLE episodes (
    id BIGSERIAL PRIMARY KEY,
    title VARCHAR(512) NOT NULL,                 -- Title of the episode
    podcast_source VARCHAR(255) NOT NULL DEFAULT 'Huberman Lab', -- Source podcast name
    episode_number INT NULL,                     -- Episode number, if applicable
    published_at DATE NULL,                      -- Original air date
    description TEXT NULL,                       -- Show notes or description
    audio_url VARCHAR(2048) NULL,                -- Link to the audio file (optional)
    source_url VARCHAR(2048) NULL,               -- Link to the original episode page/source
    duration_seconds INT NULL,                   -- Duration in seconds (optional)
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Index for sorting/filtering by publication date
CREATE INDEX idx_episodes_published_at ON episodes(published_at);

-- Protocols Table: Defines the health/performance protocols discussed.
CREATE TABLE protocols (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,           -- Name of the protocol (e.g., 'Morning Sunlight Viewing')
    description TEXT NOT NULL,                   -- Detailed explanation of the protocol
    category VARCHAR(100) NULL,                  -- Category (e.g., 'Sleep', 'Focus', 'Nutrition', 'Fitness')
    implementation_guide TEXT NULL,              -- Step-by-step guide or tips for implementation
    research_links JSONB NULL,                   -- Store relevant research paper links as JSON array/objects
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Index for filtering by category
CREATE INDEX idx_protocols_category ON protocols(category);

-- Episode_Protocol Pivot Table: Many-to-many relationship between episodes and protocols.
CREATE TABLE episode_protocol (
    episode_id BIGINT NOT NULL REFERENCES episodes(id) ON DELETE CASCADE,
    protocol_id BIGINT NOT NULL REFERENCES protocols(id) ON DELETE CASCADE,
    -- Optional: Add fields like relevance_score, timestamps_mentioned (JSONB) if needed
    PRIMARY KEY (episode_id, protocol_id) -- Composite primary key ensures uniqueness and creates index
);

-- Summaries Table: Stores summaries, key takeaways, or soundbites related to episodes.
CREATE TABLE summaries (
    id BIGSERIAL PRIMARY KEY,
    episode_id BIGINT NOT NULL REFERENCES episodes(id) ON DELETE CASCADE, -- Link to the episode
    -- Optional: protocol_id BIGINT NULL REFERENCES protocols(id) ON DELETE SET NULL, -- If a summary is specific to a protocol within an episode
    content TEXT NOT NULL,                       -- The summary text itself
    type VARCHAR(50) NOT NULL DEFAULT 'summary', -- Type ('summary', 'key_takeaway', 'soundbite', 'quote')
    -- Optional: Add start/end timestamps if linking to specific audio points
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Index for quickly finding summaries for an episode
CREATE INDEX idx_summaries_episode_id ON summaries(episode_id);

-- Notes Table: Stores user-generated notes, linked to episodes.
CREATE TABLE notes (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE, -- Link to the note author
    episode_id BIGINT NOT NULL REFERENCES episodes(id) ON DELETE CASCADE, -- Link to the related episode
    content TEXT NOT NULL,                       -- The content of the note
    is_public BOOLEAN NOT NULL DEFAULT FALSE,    -- Flag for public vs. private notes
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for common note queries
CREATE INDEX idx_notes_user_id ON notes(user_id);
CREATE INDEX idx_notes_episode_id ON notes(episode_id);
-- Composite index might be useful for fetching user's notes for a specific episode
CREATE INDEX idx_notes_user_episode ON notes(user_id, episode_id);
-- Index for finding public notes for an episode (community feature)
CREATE INDEX idx_notes_public_episode ON notes(episode_id, is_public) WHERE is_public = TRUE;

-- (Optional) User Protocol Settings/Tracking Table: If advanced tracking is added.
-- CREATE TABLE user_protocol_tracking (
--     id BIGSERIAL PRIMARY KEY,
--     user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
--     protocol_id BIGINT NOT NULL REFERENCES protocols(id) ON DELETE CASCADE,
--     tracked_at DATE NOT NULL DEFAULT CURRENT_DATE, -- Date the protocol was marked as done/tracked
--     notes TEXT NULL,                              -- Optional notes specific to this tracking instance
--     metadata JSONB NULL,                          -- For storing extra data (e.g., duration, intensity)
--     created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
--     UNIQUE (user_id, protocol_id, tracked_at) -- Prevent duplicate tracking per day
-- );
-- CREATE INDEX idx_user_protocol_tracking_user_protocol ON user_protocol_tracking(user_id, protocol_id);

-- Standard Laravel Tables (Optional but common):
-- These might be created automatically by Laravel migrations if used.

-- CREATE TABLE password_resets (
--     email VARCHAR(255) PRIMARY KEY,
--     token VARCHAR(255) NOT NULL,
--     created_at TIMESTAMP NULL
-- );

-- CREATE TABLE jobs (
--     id BIGSERIAL PRIMARY KEY,
--     queue VARCHAR(255) NOT NULL,
--     payload TEXT NOT NULL,
--     attempts SMALLINT NOT NULL,
--     reserved_at INT NULL,
--     available_at INT NOT NULL,
--     created_at INT NOT NULL
-- );
-- CREATE INDEX idx_jobs_queue_reserved_at ON jobs(queue, reserved_at);

-- CREATE TABLE failed_jobs (
--     id BIGSERIAL PRIMARY KEY,
--     connection TEXT NOT NULL,
--     queue TEXT NOT NULL,
--     payload TEXT NOT NULL,
--     exception TEXT NOT NULL,
--     failed_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
-- );

**Key Relationships Summary:**

- **User <-> Subscription:** One User has many Subscription records (potentially over time), each linking to one Plan.
- **User <-> Note:** One User has many Notes.
- **Episode <-> Note:** One Episode has many Notes.
- **Episode <-> Protocol:** Many Episodes can discuss many Protocols (via episode_protocol pivot table).
- **Episode <-> Summary:** One Episode has many Summaries.
- **Plan <-> Subscription:** One Plan can be associated with many Subscriptions.--- END FILE: app_documentation/database_plan.md ---

--- START FILE: app_documentation/detailed_plan.md ---


**Huberman App (Optimize Guide): Implementation Preparation Plan**

**1. Transition Summary**

We have successfully completed the high-level application description and architectural blueprint phases for the Huberman App. The architecture outlines a Modular Monolith (Laravel/PHP backend), a React Native frontend, PostgreSQL database, Redis caching/queuing, and a RESTful API, all designed to support the defined Freemium subscription model. This document details the next crucial phase: transitioning from the architectural vision to actionable technical specifications, project setup, and environment preparation necessary to initiate development efficiently and effectively. The objective is to establish a solid foundation for the implementation lifecycle.

**2. Detailed Technical Design & Specifications**

This phase focuses on refining the high-level architecture into granular component designs and technical specifications.

*   **Component Breakdown (Modular Monolith):**
    *   **Process:** Decompose the Laravel backend into logical, domain-driven modules (Namespaces/Folders). Based on the architecture and features, initial modules will likely include: `Authentication`, `UserManagement`, `SubscriptionBilling` (integrating with chosen payment provider/Cashier), `ContentManagement` (Episodes, Protocols, Summaries), `ProtocolEngine` (Reminder logic, Tracking), `NotesService`, `CommunityFeatures` (if applicable early), and `CoreApi`.
    *   **Outcome:** Clearly defined code boundaries and responsibilities within the Laravel application structure.
*   **Component Interfaces & Interactions:**
    *   **Process:** Define the specific internal contracts (Service Classes, Interfaces, Events) for how these backend modules interact. Document the flow of data and control, especially for cross-cutting concerns like subscription status checks. For frontend-backend interaction, focus on the API.
    *   **Outcome:** Documented internal interaction patterns (e.g., Sequence Diagrams for key flows) and clear responsibilities for each module.
*   **API Design & Documentation:**
    *   **Process:** Formalize the RESTful API contract. Utilize OpenAPI (Swagger) specification to define all endpoints, request/response schemas, authentication methods (Laravel Sanctum/Passport), and authorization requirements. Explicitly tag endpoints requiring 'Premium' subscription status. Key areas include: Auth (login, register, password reset), User Profile, Plans/Subscriptions (fetching offers, potentially linking to provider portals), Content (fetching episodes, protocols, summaries - with filtering for free/premium), Notes (CRUD, public/private flags), Reminders (CRUD for premium), Tracking (logging adherence for premium). Define error handling standards (HTTP status codes, error response structure). Define webhook endpoints for payment providers (Stripe/Paddle, Apple App Store Server Notifications, Google Play Developer API).
    *   **Outcome:** A version-controlled `openapi.yaml` or `swagger.json` file serving as the definitive API contract for both frontend and backend teams.
*   **Database Schema Refinement:**
    *   **Process:** Review the provided `database_plan.md` SQL schema. Convert it into Laravel Migrations. Finalize data types, constraints (NOT NULL, UNIQUE), foreign key relationships (with appropriate ON DELETE behavior - e.g., CASCADE for notes on user delete, RESTRICT for plans on active subscriptions). Define necessary indexes based on anticipated query patterns (e.g., indexing `subscriptions.user_id`, `subscriptions.status`, `subscriptions.ends_at`, `notes.user_id`, `notes.episode_id`, `protocols.category`). Plan for potential future schema evolution using migrations.
    *   **Outcome:** A complete set of executable Laravel migration files checked into version control, representing the definitive database structure.
*   **Complex Workflow/Algorithm Design:**
    *   **Process:** Document the specific logic for complex features identified in the architecture:
        *   **Subscription Lifecycle Management:** Detail the state machine for subscriptions (`trialing`, `active`, `past_due`, `canceled`, `expired`) and how webhook events from Stripe/Paddle/Apple/Google trigger state transitions and update the `subscriptions` table.
        *   **Feature Gating Logic:** Specify the implementation details for Laravel Middleware/Policies that check the user's active subscription status (querying `subscriptions` table, potentially using cached flags from Redis) before granting access to premium API routes or features.
        *   **Customizable Reminders (Premium):** Design the scheduling mechanism (likely using Laravel's Task Scheduling + Queues) to trigger push notifications based on user-defined times/frequencies for specific protocols.
        *   **Tracking & Visualization Logic (Premium):** Define how adherence data is stored and how it will be aggregated for progress visualizations (e.g., streak calculation).
    *   **Outcome:** Sequence diagrams, state diagrams, or pseudo-code documenting the core logic for these critical flows.
*   **Technology Version & Library Finalization:**
    *   **Process:** Lock down specific versions: PHP (e.g., 8.2+), Laravel (e.g., 10.x/11.x), PostgreSQL (e.g., 17), Redis (e.g., 7.x), Node.js (LTS for React Native tooling), React Native (latest stable). Select and document key libraries: `laravel/cashier-stripe` or `laravel/cashier-paddle`, `react-native-iap`, Push Notification library (e.g., `react-native-push-notification` or cloud provider SDKs), state management for RN (e.g., Redux Toolkit, Zustand).
    *   **Outcome:** Updated `composer.json`, `package.json`, and potentially a project README or Architecture Decision Record (ADR) listing finalized versions and libraries.

**3. Project Planning & Development Readiness**

Translate the technical design into a manageable project plan and prepare the team.

*   **Requirements Refinement (User Stories):**
    *   **Process:** Break down the features from `app_description.md` (both Free and Premium tiers) into granular User Stories (e.g., "As a Free User, I want to see summaries for foundational protocols so that I can understand the basics," "As a Premium User, I want to set a custom daily reminder for 'Morning Sunlight Viewing' so that I don't forget," "As a Premium User, I want to mark a protocol as completed for the day so that I can track my adherence"). Use a tool like Jira or Trello. Prioritize stories for an MVP, focusing on core free functionality and the subscription mechanism first, followed by premium features.
    *   **Outcome:** A populated backlog of estimated User Stories in the chosen project management tool.
*   **Detailed Estimation:**
    *   **Process:** Estimate the effort for each User Story based on the detailed technical designs (e.g., using Story Points or time estimates). This should be done collaboratively by the development team.
    *   **Outcome:** Estimated backlog providing a basis for timeline creation.
*   **Granular Project Timeline & Milestones:**
    *   **Process:** Develop a sprint-based or Kanban-based timeline. Define key milestones:
        *   M1: Project Setup Complete (Repo, CI/CD Base, Local Env).
        *   M2: Core Backend Ready (Auth, User Mgmt, DB Migrations, Basic API Shell).
        *   M3: Basic Content Display (Free Tier Protocols/Summaries visible in RN App).
        *   M4: Subscription Flow PoC (IAP Integration, Backend Webhooks, Basic Feature Gate).
        *   M5: Free Tier Feature Complete (Basic Reminders, Notes).
        *   M6: Premium Feature Set 1 (e.g., Full Content Access, Custom Reminders).
        *   M7: Premium Feature Set 2 (e.g., Tracking, Offline Access).
        *   M8: Beta Release / Production Readiness.
    *   **Outcome:** A documented project plan with sprints/phases, milestones, and dependencies visualized.
*   **Resource Allocation:**
    *   **Process:** Assign development team members (Backend Devs, Frontend RN Devs, QA, potentially DevOps support) to specific modules, epics, or sprints based on skills and availability.
    *   **Outcome:** Clear ownership of tasks/modules within the team.
*   **Essential Tooling Setup:**
    *   **Process:** Configure and grant access to necessary tools:
        *   Project Management: Jira/Trello board setup.
        *   Version Control: GitHub/GitLab/Bitbucket repository creation, branch strategy definition (e.g., Gitflow).
        *   Communication: Slack/Teams channel setup.
        *   Documentation: Confluence/Notion space creation for technical docs, ADRs, meeting notes.
    *   **Outcome:** Operational project infrastructure ready for team use.
*   **Development Environment Configuration:**
    *   **Process:** Finalize and distribute the Docker configuration (`docker-compose.yml`) as specified in the architecture. Ensure it includes containers for PHP-FPM, Nginx/Caddy, PostgreSQL, Redis, and Node.js (for frontend tooling). Provide clear instructions for setup and usage. Standardize environment variable management (e.g., `.env` files with templates).
    *   **Outcome:** Developers can quickly and consistently set up identical local development environments.

**4. UI/UX Design Integration (If Applicable)**

If not already completed, this is a critical parallel activity, especially for the React Native frontend.

*   **Process:** Ensure finalized, high-fidelity mockups and prototypes are available and signed off. These must cover:
    *   All key user flows (onboarding, browsing content, setting reminders, taking notes, tracking progress).
    *   Clear visual differentiation between Free and Premium features/content.
    *   User-friendly prompts and flows for upgrading to Premium.
    *   Platform-specific design conventions (iOS/Android).
    *   Creation of a component library/design system for consistency.
*   **Outcome:** Signed-off UI/UX designs and a style guide/component library ready for frontend development.

**5. Infrastructure & Environment Setup**

Prepare the cloud/hosting environments required beyond local development.

*   **Infrastructure Planning:**
    *   **Process:** Based on the Laravel Forge/Vapor choice, plan the specific server sizes/configurations (if using Forge) or review Vapor's serverless scaling model. Estimate initial database (PostgreSQL) and cache (Redis) resource needs (using managed services). Plan for object storage (S3/GCS) for potential offline content or user uploads.
    *   **Outcome:** Documented infrastructure requirements and initial sizing estimates.
*   **Cloud Service Selection:**
    *   **Process:** Confirm choices: Forge/Vapor for hosting, AWS RDS/Managed Postgres provider, AWS ElastiCache/Managed Redis provider, S3/GCS for storage. Set up accounts if necessary.
    *   **Outcome:** Finalized list of cloud services and providers.
*   **Environment Provisioning:**
    *   **Process:** Use Forge/Vapor (or Terraform/Pulumi if more control is desired) to provision the initial Dev, Staging, and Production environments. This includes setting up servers/services, databases, caches, and configuring network access/security groups.
    *   **Outcome:** Functional cloud environments ready for deployment.
*   **Monitoring, Logging, Alerting Setup:**
    *   **Process:** Integrate monitoring tools (e.g., Datadog, Sentry, CloudWatch, Prometheus/Grafana) into the provisioned environments. Configure basic logging aggregation (e.g., Vapor logs, CloudWatch Logs, ELK stack). Set up initial alerts for critical events (e.g., high error rates, server down, high DB connections). Integrate Laravel Telescope for Dev/Staging.
    *   **Outcome:** Foundational observability infrastructure in place.
*   **Backup & Recovery Planning:**
    *   **Process:** Configure automated database backups (e.g., using RDS snapshots or provider tools) with defined retention policies. Document the recovery procedure (e.g., restoring from a snapshot).
    *   **Outcome:** Initial backup strategy implemented and documented.

**6. Security Deep Dive & Planning**

Integrate security rigorously from the start.

*   **Detailed Threat Modeling:**
    *   **Process:** Conduct a threat modeling session (e.g., using STRIDE) based on the detailed technical design, data flows, and features (especially authentication, subscription handling, user notes, potential community features). Identify potential threats and vulnerabilities.
    *   **Outcome:** A documented threat model identifying key risks and potential attack vectors.
*   **Define Specific Technical Security Controls:**
    *   **Process:** Based on the threat model and architecture, define concrete security controls:
        *   **Authentication:** Specify token expiry, refresh token strategy, password complexity rules, brute-force protection (rate limiting).
        *   **Authorization:** Detail the implementation of Laravel Policies/Middleware for checking `subscriptions.status` for premium features. Ensure no business logic relies solely on client-side checks.
        *   **Encryption:** Enforce TLS 1.2+ (HTTPS), confirm database encryption at rest, define secure storage for API keys/secrets (e.g., environment variables injected via Forge/Vapor, potentially a secrets manager).
        *   **Input Validation:** Define strategy (e.g., Laravel Form Requests) for validating all incoming API request data.
        *   **Payment Security:** Reiterate server-side validation of IAP receipts and secure webhook handling (signature verification).
        *   **Dependency Scanning:** Plan for tools like `composer audit`, `npm audit`.
    *   **Outcome:** A checklist or document detailing specific security controls to be implemented and verified.
*   **Security Testing Planning:**
    *   **Process:** Plan for integrating security testing into the development lifecycle:
        *   **SAST:** Configure static analysis tools (e.g., PHPStan, Psalm, ESLint security plugins) to run locally and/or in CI.
        *   **DAST:** Plan for using basic dynamic analysis tools against the Staging environment later in the cycle.
        *   **Penetration Testing:** Allocate budget/time for external penetration testing before major production launches.
    *   **Outcome:** Security testing activities integrated into the project plan and CI/CD strategy.

**7. CI/CD Pipeline Foundation**

Automate the build, test, and deployment process early.

*   **Process:** Set up the initial CI/CD pipeline (using GitHub Actions, GitLab CI, Bitbucket Pipelines, or Jenkins) connected to the version control repository. Configure initial stages:
    *   Trigger on push/merge to `develop` and `main` branches.
    *   Checkout code.
    *   Install dependencies (`composer install`, `npm install`).
    *   Run linters and static analysis (SAST tools).
    *   Run automated tests (Unit, Integration - e.g., `php artisan test`, `npm test`).
    *   Build frontend assets (`npm run build`).
    *   (Initial) Deploy script targeting the Dev/Staging environment using Forge CLI/API or Vapor CLI deployment commands.
*   **Outcome:** A basic, functional CI/CD pipeline that automates testing and deployment to lower environments, ready to be expanded as the project progresses.

**8. Initiation of Development**

With the detailed plans and setup complete, development can commence.

*   **Process:** The development team begins implementation based on the prioritized backlog (User Stories), detailed technical designs, API specifications, and established environment/tooling setup.
*   **Initial Focus:**
    *   Setting up the base Laravel and React Native project structures.
    *   Implementing core database migrations (Users, Plans, Subscriptions, initial Content tables).
    *   Building the Authentication flow (backend API and frontend screens).
    *   Establishing basic API communication between frontend and backend.
    *   Setting up the basic subscription scaffolding (e.g., integrating Laravel Cashier, defining Plan models).
*   **Outcome:** Development kickoff, focusing on foundational components and demonstrating core connectivity.

--- END FILE: app_documentation/detailed_plan.md ---

--- START FILE: app_documentation/frontend_implementation_todo.md ---
# Huberman App: Frontend Implementation TODO Checklist (React Native)

**Project Goal:** Implement the React Native mobile application frontend for the Huberman App, providing an intuitive user interface aligned with the Microsoft Fluent UI aesthetic, consuming the backend API, handling state, and integrating native features like In-App Purchases and Push Notifications.

**Development Approach:** Component-Driven Development, integrating features iteratively. Testing (Unit, Component, Integration) should be incorporated throughout. Collaboration with Backend and UI/UX teams is crucial.

**Legend:**
*   `[ ]` - To Do
*   `[x]` - Done
*   `(UI)` - Depends on UI/UX Handoff (Figma)
*   `(API)` - Depends on Backend API Endpoint(s) Readiness
*   `(Test)` - Indicates steps where writing tests is highly recommended.

---

## Phase 1: Project Setup & Foundation

*   **Environment & Tooling:**
    *   `[ ]` Initialize React Native project (`npx react-native init hubermanAppFrontend --template react-native-template-typescript` recommended).
    *   `[ ]` Install core dependencies:
        *   `[ ]` Navigation: `@react-navigation/native`, `@react-navigation/native-stack`, `@react-navigation/bottom-tabs` (or other required navigators).
        *   `[ ]` State Management: `zustand`.
        *   `[ ]` Secure Storage: `react-native-keychain`.
        *   `[ ]` Potentially UI Library: `fluentui-react-native` (if decided upon, see `ui_ux_handoff_integration.md`).
        *   `[ ]` API Client: `axios` (or `fetch` wrapper).
    *   `[ ]` Set up project structure (`src/screens`, `src/components`, `src/navigation`, `src/services`, `src/store`, `src/assets`, `src/hooks`, `src/theme`).
    *   `[ ]` Configure ESLint & Prettier for code quality and consistency.
    *   `[ ]` Set up TypeScript configuration (`tsconfig.json`).
    *   `[ ]` Configure basic testing environment (Jest is included, add `@testing-library/react-native`).
    *   `[ ]` Establish basic Git workflow (branching strategy defined with backend team).
    *   `[ ]` Configure environment variables (e.g., using `react-native-config`) for API base URL (local, staging, prod).

*   **Core Structure & Base Components:**
    *   `[ ]` Define base theme (colors, typography, spacing) aligned with Fluent UI and Figma styles (`src/theme`). Apply theme provider if necessary (depends on UI library choice).
    *   `[ ]` (Test) Create foundational reusable components based on early UI designs/Fluent principles (e.g., `Button`, `TextInput`, `Card`, `ScreenWrapper`).
    *   `[ ]` Set up Storybook (optional but recommended) to develop and showcase reusable components in isolation.
    *   `[ ]` Implement root navigation structure (`src/navigation/RootNavigator.tsx`): differentiate between Auth stack and Main App stack based on authentication status.

---

## Phase 2: Authentication Flow (UI & API Integration)

*   **Screens:**
    *   `[ ]` (UI) Build Login screen (`src/screens/Auth/LoginScreen.tsx`).
    *   `[ ]` (UI) Build Registration screen (`src/screens/Auth/RegisterScreen.tsx`).
    *   `[ ]` (UI) Build Forgot Password screen / flow screens.
*   **API Service:**
    *   `[ ]` Implement API service functions (`src/services/api/auth.ts`) to call backend endpoints:
        *   `[ ]` `/register` (API)
        *   `[ ]` `/login` (API)
        *   `[ ]` `/logout` (API)
        *   `[ ]` `/forgot-password`, `/reset-password` (API)
*   **State Management:**
    *   `[ ]` (Test) Implement Zustand store (`src/store/authStore.ts`) to manage:
        *   `[ ]` Authentication token (`accessToken`).
        *   `[ ]` User information (basic profile, `is_premium` flag).
        *   `[ ]` Authentication status (`isAuthenticated`).
    *   `[ ]` Implement logic to securely store/retrieve token using `react-native-keychain`.
    *   `[ ]` Implement actions/logic in the store for `login`, `register`, `logout`.
*   **Integration:**
    *   `[ ]` Connect Auth screens to API service functions and state management.
    *   `[ ]` Handle loading states and display errors from API responses.
    *   `[ ]` Implement navigation logic: navigate to Main App stack on successful login/register, navigate to Auth stack on logout or initial load if not authenticated.
    *   `[ ]` (Test) Write component tests for Auth screens, mocking navigation and API calls.

---

## Phase 3: Main App Shell & Basic Content Display (Free Tier)

*   **Navigation:**
    *   `[ ]` (UI) Implement main app navigation (e.g., Bottom Tab Navigator for Protocols, Notes (placeholder), Settings).
    *   `[ ]` (UI) Implement stack navigators within tabs where needed (e.g., Protocol List -> Protocol Detail).
*   **Screens:**
    *   `[ ]` (UI) Build Protocol List screen (`src/screens/Protocols/ProtocolListScreen.tsx`).
    *   `[ ]` (UI) Build Protocol Detail screen (`src/screens/Protocols/ProtocolDetailScreen.tsx`).
    *   `[ ]` (UI) Build Settings screen shell (`src/screens/Settings/SettingsScreen.tsx`).
*   **API Service:**
    *   `[ ]` Implement API service functions (`src/services/api/content.ts`) for:
        *   `[ ]` Fetching protocols (`/protocols`) (API)
        *   `[ ]` Fetching protocol details (`/protocols/{id}`) (API)
*   **Integration:**
    *   `[ ]` Fetch and display foundational protocol list/summaries on relevant screens.
    *   `[ ]` Handle navigation between list and detail views.
    *   `[ ]` Display loading/error states for content fetching.
    *   `[ ]` (UI) Implement visual indicators/prompts for premium-only content/features based on Figma designs.
    *   `[ ]` Conditionally render limited content based on *backend API response* (backend determines free content).

---

## Phase 4: Subscription Flow (IAP Integration)

*   **IAP Setup:**
    *   `[ ]` Install `react-native-iap` and link native dependencies.
    *   `[ ]` Configure products (Premium Monthly, Premium Annual) in App Store Connect and Google Play Console. Ensure IDs match backend `plans` table identifiers.
    *   `[ ]` Implement platform-specific setup for `react-native-iap` (iOS capabilities, Android billing dependency).
*   **API Service:**
    *   `[ ]` Implement API service functions (`src/services/api/billing.ts`) for:
        *   `[ ]` Fetching available plans (`/plans`) (API)
        *   `[ ]` Fetching current user subscription status (`/user/subscription`) (API)
*   **Screens:**
    *   `[ ]` (UI) Build "Go Premium" / Subscription Offers screen. Display plans fetched from API.
*   **State Management:**
    *   `[ ]` Add subscription status (`plan`, `status`, `ends_at`) to relevant store (`authStore` or dedicated `billingStore`).
    *   `[ ]` Implement logic to periodically fetch/refresh subscription status from `/user/subscription` API.
*   **Integration:**
    *   `[ ]` Use `react-native-iap` functions to:
        *   `[ ]` Fetch product details (`getProducts`).
        *   `[ ]` Initiate purchase flow (`requestSubscription`).
    *   `[ ]` Handle IAP purchase results (success, failure, cancellation).
        *   *Note:* The primary validation happens backend via webhooks. Frontend may need to inform the backend "purchase initiated" or simply refresh user/subscription status after a short delay or upon app foregrounding to reflect changes validated by the backend. Discuss exact flow with backend team.
    *   `[ ]` Display current subscription status on Settings screen.
    *   `[ ]` Conditionally display "Upgrade" prompts or premium features based on subscription status from the state store.
    *   `[ ]` Handle IAP initialization errors and loading states.
    *   `(Test)` Write tests for store logic related to subscription status.

---

## Phase 5: Premium Features (MVP Scope)

*   **Content Display:**
    *   `[ ]` Enhance Protocol Detail screen to display *full summaries/details* if user state indicates premium (`authStore.user.is_premium` or `billingStore.isActive`). Fetch potentially richer data from `/protocols/{id}` API (API needs to return it for premium users).
*   **Custom Reminders:**
    *   `[ ]` (UI) Build Reminder List screen (Premium only).
    *   `[ ]` (UI) Build Create/Edit Reminder screen (Premium only).
    *   `[ ]` Implement API service functions (`src/services/api/reminders.ts`) for CRUD:
        *   `[ ]` `GET /reminders` (API)
        *   `[ ]` `POST /reminders` (API)
        *   `[ ]` `PUT /reminders/{id}` (API)
        *   `[ ]` `DELETE /reminders/{id}` (API)
    *   `[ ]` Fetch and display existing reminders.
    *   `[ ]` Implement form for creating/editing reminders (selecting protocol, time).
    *   `[ ]` Integrate screens with API calls, handling loading/error states.
    *   `[ ]` Ensure Reminder screens/features are only accessible/visible to premium users.

---

## Phase 6: Push Notifications Setup

*   **Firebase Setup:**
    *   `[ ]` Install `@react-native-firebase/app` and `@react-native-firebase/messaging`.
    *   `[ ]` Configure Firebase project (iOS/Android apps). Download and add config files (`GoogleService-Info.plist`, `google-services.json`).
    *   `[ ]` Implement native setup for Firebase messaging (AppDelegate, Podfile, build.gradle changes).
*   **Token Handling:**
    *   `[ ]` Implement logic to request user permission for notifications.
    *   `[ ]` Implement logic to get the FCM device token using `@react-native-firebase/messaging`.
    *   `[ ]` Implement API service function (`src/services/api/user.ts`) to send the token to the backend (`POST /api/user/device-token`) (API).
    *   `[ ]` Send token to backend upon successful login or when the token refreshes.
*   **Notification Handling:**
    *   `[ ]` Implement listeners for foreground notifications.
    *   `[ ]` Implement listeners/setup for background/quit state notification handling.
    *   `[ ]` Implement logic to display incoming reminder notifications (or let OS handle basic display).

---

## Phase 7: Refinement, Testing & QA

*   **Styling & Polish:**
    *   `[ ]` (UI) Perform visual review across all screens against Figma designs. Adjust styles for consistency and pixel-perfection (within reason).
    *   `[ ]` Ensure consistent loading indicators and empty states.
    *   `[ ]` Ensure responsive layout handling on different screen sizes/orientations.
*   **Error Handling:**
    *   `[ ]` Implement user-friendly display for API errors (e.g., toast messages, inline errors).
    *   `[ ]` Handle network connectivity issues gracefully.
*   **Testing:**
    *   `[ ]` (Test) Write/improve unit tests for utility functions, hooks, store logic.
    *   `[ ]` (Test) Write/improve component tests using `@testing-library/react-native`.
    *   `[ ]` Perform manual end-to-end testing of all user flows (Free & Premium).
*   **Accessibility (A11y):**
    *   `[ ]` Add appropriate `accessibilityLabel`, `accessibilityHint`, `accessibilityRole` props.
    *   `[ ]` Check color contrast ratios.
    *   `[ ]` Test with screen readers (VoiceOver, TalkBack).
*   **Performance:**
    *   `[ ]` Profile app performance if necessary (React Native Perf Monitor, Flipper). Optimize slow components or heavy computations.

---

## Phase 8: Build & Deployment Preparation

*   **Configuration:**
    *   `[ ]` Configure app icons and splash screens.
    *   `[ ]` Configure build settings (version codes, bundle IDs, signing certificates) for iOS and Android release builds.
    *   `[ ]` Ensure environment variable configuration works correctly for different builds (staging, production pointing to correct API URLs).
*   **App Store Setup:**
    *   `[ ]` Create app listings in App Store Connect and Google Play Console.
    *   `[ ]` Prepare required metadata (descriptions, screenshots, privacy policy URL).
*   **Build & Test:**
    *   `[ ]` Generate release builds for iOS (`.ipa`) and Android (`.aab`).
    *   `[ ]` Test release builds thoroughly on physical devices.

---

## Phase 9: Launch & Post-Launch

*   **Release:**
    *   `[ ]` Submit builds to TestFlight (iOS) / Internal Testing (Android) for final QA.
    *   `[ ]` Submit builds for App Store / Google Play review.
    *   `[ ]` Coordinate release timing with backend team.
*   **Monitoring:**
    *   `[ ]` Integrate and configure crash reporting service (Sentry, Bugsnag).
    *   `[ ]` Monitor crash reports and user feedback post-launch.
    *   `[ ]` Address critical issues promptly via patches/updates.
--- END FILE: app_documentation/frontend_implementation_todo.md ---

--- START FILE: app_documentation/infrastructure_devops_details.md ---
Okay, let's create the `infrastructure_devops_details.md` file to provide concrete starting points for Docker, CI/CD, Monitoring, Logging, and Backups.

--- START OF FILE infrastructure_devops_details.md ---

**Huberman App: Infrastructure & DevOps Specifics**

**1. Introduction**

This document provides more specific details and initial configurations for the infrastructure and DevOps components outlined in the project plan and backend TODO list. It includes a concrete example for `docker-compose.yml`, a basic CI/CD pipeline structure using GitHub Actions, and initial recommendations for monitoring, logging, and backup configurations. These are starting points and should be refined based on specific hosting choices (Forge/Vapor) and evolving project needs.

**2. Local Development Environment (`docker-compose.yml`)**

This configuration provides the necessary services for local backend development and testing. Place this file in the project root.

```yaml
# docker-compose.yml
version: '3.8'

services:
  # PHP Service (Application Server)
  app:
    build:
      context: .
      dockerfile: Dockerfile # Assumes a Dockerfile exists for PHP setup
      args:
        UID: "${UID:-1000}" # Pass host user ID for permissions
        GID: "${GID:-1000}" # Pass host group ID for permissions
    container_name: huberman_app_php
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
      # Pass environment variables from .env file
      PHP_IDE_CONFIG: "serverName=Docker" # Example for Xdebug integration
      XDEBUG_MODE: "${XDEBUG_MODE:-off}" # Control Xdebug mode via .env
      XDEBUG_CONFIG: "client_host=host.docker.internal" # Xdebug config for Docker Desktop
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html # Mount application code
      # Persist bash history (optional)
      # - ./docker-data/bashhistory:/root/.bash_history_docker
    networks:
      - huberman_app_network
    depends_on:
      - db
      - redis

  # Web Server (Nginx)
  webserver:
    image: nginx:alpine
    container_name: huberman_app_nginx
    restart: unless-stopped
    tty: true
    ports:
      - "${APP_PORT:-8000}:80" # Expose app port from .env or default 8000
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/ # Mount custom Nginx config
    networks:
      - huberman_app_network
    depends_on:
      - app

  # Database Server (PostgreSQL)
  db:
    image: postgres:16-alpine
    container_name: huberman_app_db
    restart: unless-stopped
    tty: true
    ports:
      - "${DB_PORT:-5432}:5432" # Expose DB port from .env or default 5432
    environment:
      POSTGRES_DB: "${DB_DATABASE:-huberman_db}"
      POSTGRES_USER: "${DB_USERNAME:-sail}" # Use Sail defaults or .env values
      POSTGRES_PASSWORD: "${DB_PASSWORD:-password}"
      POSTGRES_HOST_AUTH_METHOD: "trust" # For easy local connections, change if needed
    volumes:
      - huberman_db_data:/var/lib/postgresql/data # Persistent DB data
      # Optional: Mount init scripts
      # - ./docker/db/init:/docker-entrypoint-initdb.d
    networks:
      - huberman_app_network
    healthcheck: # Basic healthcheck
      test: ["CMD", "pg_isready", "-U", "${DB_USERNAME:-sail}", "-d", "${DB_DATABASE:-huberman_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Server (Redis)
  redis:
    image: redis:7-alpine
    container_name: huberman_app_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379" # Expose Redis port from .env or default 6379
    volumes:
      - huberman_redis_data:/data # Persistent Redis data
    networks:
      - huberman_app_network
    healthcheck: # Basic healthcheck
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# Define Networks
networks:
  huberman_app_network:
    driver: bridge

# Define Volumes
volumes:
  huberman_db_data:
    driver: local
  huberman_redis_data:
    driver: local

```

**Notes on `docker-compose.yml`:**

*   **`Dockerfile`:** This setup assumes a `Dockerfile` in the root for the `app` service to handle PHP setup, installing extensions (like `pdo_pgsql`, `pgsql`, `redis`, `bcmath`, `pcntl`, `gd`), composer installation, and potentially setting user permissions correctly. You'll need to create this file.
*   **`.env` Integration:** It relies heavily on your project's `.env` file for configuration (ports, DB credentials, etc.). Ensure your `.env` file is present and correctly configured. Use `.env.example` as a template.
*   **UID/GID:** Passing host user/group IDs helps avoid permission issues with mounted volumes, especially file creation by PHP.
*   **Nginx Config:** Requires a custom Nginx configuration file (e.g., `docker/nginx/conf.d/app.conf`) to proxy requests to the `app` service (PHP-FPM on port 9000).
*   **Xdebug:** Includes basic Xdebug configuration for easier debugging. Control via `XDEBUG_MODE` in `.env`.
*   **Healthchecks:** Basic checks added to ensure services are responsive.

**3. CI/CD Pipeline Definition (GitHub Actions Example)**

This provides a basic pipeline structure for running tests and static analysis on pushes/PRs to `main` and `develop`. Place this in `.github/workflows/ci.yml`.

```yaml
# .github/workflows/ci.yml
name: Laravel CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    services: # Start dependent services for testing
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: huberman_test_db
          POSTGRES_USER: sail
          POSTGRES_PASSWORD: password
          POSTGRES_HOST_AUTH_METHOD: trust # Easiest for CI connection
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2' # Match project version
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, pgsql, pdo_pgsql, redis, bcmath, gd # Match required extensions
        tools: composer:v2
        coverage: none # Set to pcov or xdebug if generating coverage reports

    - name: Setup Node.js (Optional, if needed for frontend assets/tools)
      uses: actions/setup-node@v4
      with:
        node-version: '20.x' # Match project version
        cache: 'npm'

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer Dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Install Composer Dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Prepare Laravel Environment
      run: |
        cp .env.example .env
        sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/g' .env # Ensure localhost for service access
        sed -i 's/DB_PORT=5432/DB_PORT=5432/g' .env
        sed -i 's/DB_DATABASE=laravel/DB_DATABASE=huberman_test_db/g' .env
        sed -i 's/DB_USERNAME=root/DB_USERNAME=sail/g' .env
        sed -i 's/DB_PASSWORD=/DB_PASSWORD=password/g' .env
        sed -i 's/REDIS_HOST=127.0.0.1/REDIS_HOST=127.0.0.1/g' .env
        sed -i 's/REDIS_PORT=6379/REDIS_PORT=6379/g' .env
        php artisan key:generate

    - name: Wait for Services (Postgres)
      run: |
        echo "Waiting for PostgreSQL to start..."
        until pg_isready -h 127.0.0.1 -p 5432 -U sail; do
          sleep 1
        done
        echo "PostgreSQL started!"

    - name: Run Database Migrations
      run: php artisan migrate --force # Use --force to run without prompt in CI

    - name: Run Linters (Pint)
      run: ./vendor/bin/pint --test

    - name: Run Static Analysis (PHPStan)
      run: ./vendor/bin/phpstan analyse --memory-limit=2G

    - name: Run Tests (PHPUnit)
      run: php artisan test

    # Optional: NPM Steps if needed for backend assets
    # - name: Install NPM Dependencies
    #   run: npm ci
    # - name: Build Assets
    #   run: npm run build
```

**Notes on `ci.yml`:**

*   **Services:** Uses GitHub Actions `services` to run PostgreSQL and Redis alongside the main job container, making them accessible on `127.0.0.1`.
*   **Environment:** Copies `.env.example` and modifies it specifically for the CI environment database/redis services.
*   **Dependencies:** Caches Composer dependencies for faster runs.
*   **Tests:** Runs Pint, PHPStan, and PHPUnit. Add other checks as needed.
*   **Deployment:** Deployment steps (Forge, Vapor, etc.) are *not* included here but would typically be added as separate jobs triggered manually or on merges to `main`.

**4. Monitoring, Logging & Backup Specifics (Initial Recommendations)**

These are starting points, adjust based on provider capabilities (Forge/Vapor often provide defaults) and application sensitivity.

*   **Monitoring:**
    *   **Key Metrics:**
        *   System: CPU (<80%), Memory (<85%), Disk Space (<90% full).
        *   Application: 5xx Error Rate (<1%), Average API Response Time (<500ms), Requests Per Minute.
        *   Queue: `jobs` table count (< 100 pending for > 5 mins), `failed_jobs` count (> 0).
    *   **Tools:** Leverage Forge/Vapor built-in monitoring. Consider Sentry (or Flare for Laravel) for error tracking & basic performance monitoring. For more depth, look at Datadog or New Relic later.

*   **Logging:**
    *   **Level:** Production: `WARNING` or `ERROR`. Staging/Dev: `DEBUG`.
    *   **Channel (Laravel `config/logging.php`):**
        *   Use the `stack` channel.
        *   Include `daily` file logging (`path/to/storage/logs/laravel.log`).
        *   Integrate a log aggregation service (if using Forge/Vapor check their recommendations, otherwise Papertrail, Logtail, Datadog Logs). Configure a `syslog` or dedicated driver pointing to the service.
    *   **Format:** Configure the `stack` channel or aggregation channel to use a `Monolog\Formatter\JsonFormatter` for structured logging.
    *   **Key Events to Log (Contextual):** User registration/login failures, password resets, subscription webhook received (start/end/status), subscription state changes, job processing start/end/failure, critical errors caught in exception handler, manual logging for complex workflow steps. **AVOID LOGGING SENSITIVE DATA.**

*   **Alerting (Initial Critical Alerts):**
    *   Configure via monitoring tool (Forge/Vapor/Datadog/Sentry):
        *   5xx Error Rate > 2% over 5 minutes.
        *   Server/Instance Unreachable.
        *   CPU or Memory > 90% for 5 minutes.
        *   Disk Space > 95% full.
        *   Failed Jobs Count increases significantly or > X total.
        *   Queue length grows consistently without processing.
        *   Sentry/Flare reports a spike in new or existing errors.

*   **Backups (Database - PostgreSQL):**
    *   **Mechanism:** **Strongly recommend** using the managed database provider's automated snapshot feature (e.g., AWS RDS, Google Cloud SQL, DigitalOcean Managed DB).
    *   **Frequency:** Daily automated snapshots.
    *   **Retention:** Start with **7 days**. Evaluate if longer retention (e.g., 14-30 days) is needed based on recovery requirements.
    *   **Verification:** **Schedule and perform quarterly test restores** of a recent backup to a temporary database instance to confirm integrity and practice the recovery procedure. Document the process.
    *   **Location:** Ensure backups are stored geographically separate (usually handled by cloud providers).

**5. Conclusion**

These concrete configurations provide a solid starting point for the Huberman App's infrastructure and DevOps practices. They establish a consistent local development environment, automate basic testing and validation via CI, and outline initial strategies for observing and protecting the application in deployed environments. Remember to version control `docker-compose.yml`, `Dockerfile`, `nginx.conf`, and `.github/workflows/ci.yml`, and adapt these configurations as the project evolves and specific hosting choices are finalized.
--- END FILE: app_documentation/infrastructure_devops_details.md ---

--- START FILE: app_documentation/openapi.yaml ---

openapi: 3.0.3
info:
  title: Huberman App API
  description: API for the Huberman Companion App (Optimize Guide) supporting free and premium features.
  version: 1.0.0
servers:
  - url: http://localhost:8000/api/v1 # Local development
  - url: https://staging.hubermanapp.com/api/v1 # Staging
  - url: https://api.hubermanapp.com/api/v1 # Production
tags:
  - name: Authentication
    description: User registration, login, logout, password reset.
  - name: UserManagement
    description: User profile operations.
  - name: SubscriptionBilling
    description: Managing subscription plans and user status.
  - name: ContentManagement
    description: Accessing episodes, protocols, and summaries.
  - name: NotesService
    description: User notes management.
  - name: ProtocolEngine
    description: Premium features - Reminders and Tracking.
  - name: Webhooks
    description: Incoming webhooks from payment providers.

components:
  schemas:
    # --- Data Models ---
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        # ... other user fields
        is_premium: # Convenience flag based on subscription
          type: boolean
          readOnly: true
    Plan:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string # e.g., 'Free', 'Premium Monthly'
        # ... provider IDs if needed by frontend
        features:
          type: array
          items:
            type: string
    Subscription:
      type: object
      properties:
        plan:
          $ref: '#/components/schemas/Plan'
        status:
          type: string
          enum: [active, trialing, past_due, canceled, expired, incomplete]
        ends_at:
          type: string
          format: date-time
        # ... other fields
    Episode:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        published_at:
          type: string
          format: date
        # ... other fields
    Protocol:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        category:
          type: string
        description: # Short description always available
          type: string
        implementation_guide: # Potentially premium only
          type: string
          nullable: true
        # ... other fields
    Note:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        episode_id:
          type: integer
        content:
          type: string
        is_public:
          type: boolean
        created_at:
          type: string
          format: date-time
        # ... other fields
    Reminder:
      # Schema for Reminder (Premium)
      type: object
      properties:
        id:
          type: integer
        protocol_id:
          type: integer
        user_id:
          type: integer
        # ... reminder settings (time, frequency)
    TrackingLog:
      # Schema for Tracking Log (Premium)
      type: object
      properties:
        id:
          type: integer
        protocol_id:
          type: integer
        user_id:
          type: integer
        tracked_at:
          type: string
          format: date
        # ... other tracking fields

    # --- Error Responses ---
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: General error message.
      required:
        - message
    ValidationErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Validation failed message (e.g., "The given data was invalid.").
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Field-specific validation errors.
      required:
        - message
        - errors

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Use the token obtained from /login or /register.

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Unauthenticated.
    ForbiddenError:
      description: Authenticated user does not have permission for the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: This action is unauthorized.
    NotFoundError:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Not Found
    ValidationError:
      description: Input validation failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
          example:
            message: The given data was invalid.
            errors:
              email: ["The email field is required."]
              password: ["The password must be at least 8 characters."]
    InternalServerError:
      description: An unexpected error occurred on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Internal Server Error

paths:
  # --- Authentication ---
  /register:
    post:
      tags: [Authentication]
      summary: Register a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string, format: password }
                password_confirmation: { type: string, format: password }
              required: [name, email, password, password_confirmation]
      responses:
        '201':
          description: User registered successfully, returns user and token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: '#/components/schemas/User' }
                  token: { type: string }
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /login:
    post:
      tags: [Authentication]
      summary: Log in a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
                # device_name: { type: string } # Optional for Sanctum token naming
              required: [email, password]
      responses:
        '200':
          description: Login successful, returns user and token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: '#/components/schemas/User' }
                  token: { type: string }
        '401': # Specific error for invalid credentials
          description: Invalid credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid credentials.
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /logout:
    post:
      tags: [Authentication]
      summary: Log out the current user (invalidate token).
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logout successful.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # --- User Management ---
  /user/profile:
    get:
      tags: [UserManagement]
      summary: Get the current user's profile.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags: [UserManagement]
      summary: Update the current user's profile.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                # Other updatable fields
      responses:
        '200':
          description: Profile updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  # --- Subscription/Billing ---
  /plans:
    get:
      tags: [SubscriptionBilling]
      summary: Get available subscription plans.
      responses:
        '200':
          description: List of plans.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
  /user/subscription:
    get:
      tags: [SubscriptionBilling]
      summary: Get the current user's subscription status.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's current subscription details.
          content:
            application/json:
              schema:
                # Might be null if no subscription
                nullable: true
                $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # --- Content Management ---
  /protocols:
    get:
      tags: [ContentManagement]
      summary: Get list of protocols.
      description: Returns foundational protocols for free users, all for premium. Backend filters based on auth/subscription status.
      parameters:
        - name: category
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of protocols.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Protocol' # Note: 'implementation_guide' might be null for free users
  /protocols/{id}:
    get:
      tags: [ContentManagement]
      summary: Get details for a specific protocol.
      description: Returns full details (incl. implementation guide) for premium users, potentially limited details for free users. Backend handles logic.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Protocol details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Protocol'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # --- Notes Service ---
  /notes:
    get:
      tags: [NotesService]
      summary: Get the current user's notes.
      security:
        - bearerAuth: []
      parameters:
        - name: episode_id
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of user's notes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags: [NotesService]
      summary: Create a new note.
      description: Free users may have limits. Premium users can create public notes. Backend enforces limits/permissions.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                episode_id: { type: integer }
                content: { type: string }
                is_public: { type: boolean, default: false } # Requires premium permission if true
              required: [episode_id, content]
      responses:
        '201':
          description: Note created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403': # If limit reached or trying public note without premium
          $ref: '#/components/responses/ForbiddenError'
        '422':
          $ref: '#/components/responses/ValidationError'

  # --- Protocol Engine (Premium) ---
  /reminders:
    get:
      tags: [ProtocolEngine]
      summary: Get user's reminders.
      description: Requires active Premium subscription.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of reminders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reminder'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403': # If user is not premium
          $ref: '#/components/responses/ForbiddenError'
    post:
      tags: [ProtocolEngine]
      summary: Create a new reminder.
      description: Requires active Premium subscription.
      security:
        - bearerAuth: []
      requestBody:
        # ... Reminder details (protocol_id, time, frequency)
        required: true
        content:
          application/json:
            schema:
              # ... schema for creating a reminder
              type: object
              properties:
                protocol_id: { type: integer }
                # ... other fields
      responses:
        '201':
          description: Reminder created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reminder'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403': # If user is not premium
          $ref: '#/components/responses/ForbiddenError'
        '422':
          $ref: '#/components/responses/ValidationError'

  # --- Webhooks ---
  /webhooks/stripe:
    post:
      tags: [Webhooks]
      summary: Stripe webhook handler.
      description: Handles incoming events from Stripe. Security via signature verification (handled by backend, not bearer token).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # Schema matching Stripe event object structure
              type: object
              description: Structure depends on Stripe event type.
      responses:
        '200':
          description: Webhook received successfully.
        '400': # e.g., Invalid signature, malformed payload
          $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  # ... similar entries for /webhooks/apple, /webhooks/google

```
--- END FILE: app_documentation/openapi.yaml ---

--- START FILE: app_documentation/security_plan.md ---
**Huberman App: Security Plan**

**1. Introduction**

Security is a critical aspect of the Huberman App, especially considering user data, authentication, and subscription payments. This document outlines the plan for integrating security practices throughout the development lifecycle, including threat modeling, defining specific technical controls, and planning for security testing. The goal is to build a secure and trustworthy application by proactively identifying and mitigating potential vulnerabilities.

**2. Detailed Threat Modeling**

*   **Process:**
    *   A dedicated threat modeling session will be conducted early in the implementation phase, involving backend developers, potentially frontend developers, and project leads.
    *   The **STRIDE methodology** (Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, Elevation of Privilege) will be used as a framework.
    *   The analysis will focus on key data flows and components based on the detailed technical design (`component_interfaces_interactions.md`, `complex_workflows.md`) and API contract (`api_design_documentation.md`), specifically targeting:
        *   Authentication flow (Registration, Login, Password Reset, Token Handling)
        *   Subscription lifecycle management (IAP, Webhooks, Status Updates)
        *   Feature Gating logic (Free vs. Premium access)
        *   User-generated content (Notes - storage, access control, potential public sharing)
        *   API endpoints (Input validation, Authorization checks)
        *   Data storage (Database, Cache)
        *   Third-party integrations (Payment providers, Push notification services)
    *   For each component/flow, potential threats based on STRIDE categories will be identified, documented, and ranked based on potential impact and likelihood.
*   **Outcome:**
    *   A documented Threat Model (e.g., in a separate document linked here, or appended).
    *   This model will list identified threats, potential attack vectors, existing planned mitigations (from this document), and any additional required security controls or areas needing further investigation.
    *   This document will serve as a living reference, revisited if major architectural changes occur.

**3. Specific Technical Security Controls**

Based on the architecture, known best practices, and anticipated threats, the following technical security controls will be implemented and verified:

**3.1. Authentication & Session Management**

*   **Mechanism:** Laravel Sanctum for API token authentication.
*   **Token Strategy:**
    *   Issue API tokens upon successful login/registration.
    *   Tokens will have a configured expiration time (e.g., configurable, potentially hours or days for mobile usability, balancing security and UX). *Decision: Initially target [e.g., 7 days] expiry, review based on UX/security needs.*
    *   Refresh tokens are *not* part of Sanctum's default API token flow; re-authentication will be required after token expiry. Consider Sanctum's SPA authentication if persistent sessions are strongly desired and feasible with React Native setup, but API tokens are simpler initially.
*   **Password Policy:** Enforce minimum password complexity (e.g., length, character types) during registration and password reset using Laravel validation rules.
*   **Brute-Force Protection:** Implement rate limiting on authentication endpoints (`/login`, `/register`, `/forgot-password`, `/reset-password`) using Laravel's built-in rate limiter or dedicated packages.
*   **Secure Storage:** Passwords stored securely using Laravel's default hashing mechanism (Bcrypt).

**3.2. Authorization**

*   **Backend Enforcement:** All authorization decisions MUST be made on the backend (Laravel). No reliance on client-side (React Native) checks for controlling access to data or features.
*   **Subscription Checks:** Use dedicated Middleware (e.g., `CheckPremiumAccess`) applied to API routes/groups requiring premium status. This middleware will leverage the `SubscriptionServiceInterface` to check for an active, valid premium subscription (status `active` or `trialing`, within `ends_at` date).
*   **Ownership & Policies:** Use Laravel Policies (e.g., `NotePolicy`, `ReminderPolicy`) to ensure users can only access and modify their own resources (preventing Insecure Direct Object References - IDOR). Policies check `user_id` matches the authenticated user.
*   **Principle of Least Privilege:** Ensure API endpoints only return data necessary for the specific function.

**3.3. Encryption**

*   **In Transit:** Enforce HTTPS (TLS 1.2+) for all communication between the React Native app and the Laravel API. Configure web server (via Forge/Vapor) for HTTPS only, potentially with HSTS headers.
*   **At Rest:** Leverage database encryption-at-rest features provided by the managed PostgreSQL provider (e.g., AWS RDS, Google Cloud SQL). Confirm this is enabled during infrastructure setup.
*   **Secrets Management:**
    *   API keys, database credentials, payment provider secrets, and other sensitive configuration MUST NOT be hardcoded in the repository.
    *   Use environment variables (`.env` file locally, secure environment variable injection via Forge/Vapor in deployed environments).
    *   Consider using a dedicated secrets manager (like AWS Secrets Manager, Google Secret Manager, or HashiCorp Vault) for production keys if complexity warrants it later.

**3.4. Input Validation & Sanitization**

*   **Validation:** Use Laravel Form Requests for validating all incoming data from API requests (query parameters, request bodies). Define strict validation rules for data types, formats, lengths, presence, etc.
*   **Output Encoding:** Use Blade's default encoding (`{{ }}`) if rendering any user content in web views (less likely for API). For API responses, ensure proper JSON encoding handles special characters. Avoid rendering user-provided content directly as HTML in the frontend without appropriate sanitization/encoding (React Native generally handles this well).
*   **Sanitization:** While strict validation is key, sanitize input specifically intended for database queries where complex filtering might occur, although Eloquent/Query Builder typically provides protection against SQL injection.

**3.5. Payment Security**

*   **IAP Receipt Validation:** All Apple App Store and Google Play In-App Purchase receipts MUST be validated server-side by sending them from the Laravel backend to the respective provider's validation endpoints. Do not trust client-side validation results.
*   **Webhook Security:** Securely handle incoming webhooks from payment providers (Stripe/Paddle/Apple/Google) by:
    *   Verifying the request signature using the provider's secret key (configured via environment variables). Reject any requests with invalid signatures.
    *   Processing events idempotently where possible (e.g., check if the subscription status is already updated before applying the change again).

**3.6. Dependency Management**

*   **Scanning:** Regularly scan for known vulnerabilities in dependencies:
    *   Backend: Run `composer audit` locally and/or in the CI pipeline.
    *   Frontend: Run `npm audit` locally and/or in the CI pipeline.
*   **Updates:** Keep dependencies reasonably up-to-date, prioritizing security patches. Use tools like GitHub Dependabot to automate update pull requests.

**3.7. General Security**

*   **Security Headers:** Configure appropriate HTTP security headers (e.g., `Strict-Transport-Security`, `X-Content-Type-Options`, `X-Frame-Options`, potentially `Content-Security-Policy` if serving any web content) via web server or middleware.
*   **Error Handling:** Configure Laravel error reporting to avoid exposing sensitive information (stack traces, database details) in production API responses. Return generic error messages for 5xx errors.
*   **Logging:** Implement sufficient logging to track key security events (e.g., login attempts, password resets, subscription changes, significant errors), but avoid logging sensitive data like passwords or full payment details. Centralize logs for monitoring.

**4. Security Testing Planning**

Security testing will be integrated throughout the development lifecycle:

*   **Static Application Security Testing (SAST):**
    *   **Tools:** Configure static analysis tools like PHPStan/Psalm with security-focused extensions (e.g., `psalm/plugin-security-analysis`) for the backend. Use ESLint with security plugins (e.g., `eslint-plugin-security`) for React Native frontend code.
    *   **Integration:** Run SAST tools locally via Git hooks (optional) and mandatorily within the CI/CD pipeline on every commit/pull request to catch potential issues early.
*   **Dynamic Application Security Testing (DAST):**
    *   **Timing:** Periodically run DAST scans against the deployed application in the Staging environment.
    *   **Tools:** Initially, consider using OWASP ZAP (Zed Attack Proxy) for basic automated scanning of common web vulnerabilities (e.g., XSS, SQLi - though less likely with framework defaults, still worth checking). Explore more advanced tools or services if budget allows later.
*   **Manual Code Review:** Encourage security-focused code reviews as part of the standard pull request process, especially for critical areas like authentication, authorization, and payment handling.
*   **Penetration Testing:**
    *   **Timing:** Schedule external penetration testing by a reputable third-party vendor before the first major production launch and potentially before subsequent major feature releases or annually.
    *   **Scope:** Define the scope to cover key application functionality, including authentication, subscription flows, premium feature access, notes handling, API endpoints, and infrastructure configuration.
    *   **Budget:** Allocate budget and time for engaging penetration testing services and remediating identified findings.

**5. Incident Response (Basic Considerations)**

*   While a full incident response plan is beyond this scope, basic readiness includes:
    *   Having access to centralized logs.
    *   Defining communication channels for reporting and handling security incidents.
    *   Understanding how to quickly revoke compromised credentials or disable features if necessary.

**6. Conclusion**

This security plan provides a framework for building security into the Huberman App from the ground up. By implementing the defined technical controls, performing regular testing, and fostering a security-aware development culture, we aim to significantly reduce the risk of security vulnerabilities and protect user data and trust. This plan should be treated as a living document and updated as the application evolves.
--- END FILE: app_documentation/security_plan.md ---

--- START FILE: app_documentation/technology_versions_libraries.md ---

**Huberman App: Finalized Technology Versions & Key Libraries**

**1. Introduction**

This document specifies the finalized versions for the core technologies and selected key third-party libraries to be used in the Huberman App project. These choices aim to provide a stable, secure, and maintainable foundation for development, based on the architectural decisions (`architecture_pan.md`) and implementation plan (`detailed_plan.md`). This information will directly inform the `composer.json` (backend) and `package.json` (frontend) files and serve as a reference point for developers.

**2. Core Technology Versions**

*   **PHP:**
    *   **Version:** `8.2+`
    *   **Justification:** Provides modern language features and performance improvements. Required by Laravel 11.x. Aim for the latest stable 8.2.x or 8.3.x patch release available at project start.
*   **Laravel Framework:**
    *   **Version:** `11.x`
    *   **Justification:** Latest major stable release (as of Q1/Q2 2024), offering the longest support window and latest features. Ensures access to up-to-date ecosystem packages.
*   **Database:**
    *   **Version:** `PostgreSQL 17.x`
    *   **Justification:** Latest stable major release offering advanced features and performance. *Note: Verify compatibility and availability with the chosen managed database provider (e.g., AWS RDS, Google Cloud SQL) before final provisioning.* If the latest isn't available, fall back to the latest supported major version (e.g., 15.x).
*   **Cache / Queue Broker:**
    *   **Version:** `Redis 7.x`
    *   **Justification:** Current, high-performance, stable version widely supported for caching and queuing.
*   **Frontend Runtime:**
    *   **Version:** `Node.js 20.x (LTS)`
    *   **Justification:** Use the current Long-Term Support (LTS) version for stability and extended support, required for React Native tooling (Metro, CLI).
*   **Frontend Framework:**
    *   **Version:** `React Native (Latest Stable)`
    *   **Justification:** Use the latest stable release available at project kickoff to leverage the newest features, performance improvements, and security patches. Version number to be confirmed at initialization (e.g., `0.73.x` or newer).

**3. Key Libraries Selection**

**3.1. Backend (Laravel - `composer.json`)**

*   **Payment Processing:**
    *   **Library:** `laravel/cashier-stripe`
    *   **Version:** `^15.0` (or version compatible with Laravel 11.x)
    *   **Justification:** Official Laravel package providing a fluent interface for Stripe's subscription billing services, simplifying integration. *Chosen over Paddle for this document, assuming Stripe preference/fit.*
*   **API Authentication:**
    *   **Library:** `laravel/sanctum`
    *   **Version:** Bundled with Laravel 11.x (or latest compatible)
    *   **Justification:** Official lightweight system for API token authentication, suitable for mobile apps and SPAs. Preferred over Passport for this use case unless OAuth server features are explicitly needed.

**3.2. Frontend (React Native - `package.json`)**

*   **In-App Purchases:**
    *   **Library:** `react-native-iap`
    *   **Version:** `Latest Stable`
    *   **Justification:** De facto standard community library for handling In-App Purchases across both iOS and Android platforms. Requires careful platform-specific setup.
*   **Push Notifications:**
    *   **Library:** `@react-native-firebase/app` & `@react-native-firebase/messaging`
    *   **Version:** `Latest Stable`
    *   **Justification:** Official Firebase modules for React Native. Provides a robust, cross-platform solution for handling push notifications via Firebase Cloud Messaging (FCM), which handles delivery to both APNS (iOS) and Android. Assumes Firebase project setup.
*   **State Management:**
    *   **Library:** `zustand`
    *   **Version:** `Latest Stable`
    *   **Justification:** A small, fast, and scalable state-management solution using simplified flux principles. Chosen for its simplicity and minimal boilerplate compared to Redux, potentially suitable for the app's expected state complexity.
*   **Navigation:**
    *   **Library:** `react-navigation` (`@react-navigation/native`, `@react-navigation/native-stack`, etc.)
    *   **Version:** `Latest Stable`
    *   **Justification:** The standard and most widely used library for handling navigation and screen transitions in React Native applications.

**4. Documentation and Updates**

*   The exact versions used will be locked in the respective `composer.lock` and `package-lock.json` files.
*   The primary `composer.json` and `package.json` files will reflect the target version constraints (e.g., `^11.0` for Laravel).
*   This document (`technology_versions_libraries.md`) serves as the initial decision record. It can be formalized into an Architecture Decision Record (ADR) if desired.
*   The project's main `README.md` should ideally include a summary of the core technology stack and versions for quick reference.
*   Dependency versions should be periodically reviewed and updated (e.g., using `composer update`, `npm update`, `Dependabot`) following appropriate testing procedures to incorporate security patches and improvements.

**5. Conclusion**

These technology and library choices provide a modern, robust, and well-supported stack for the Huberman App. Finalizing these versions allows the development team to proceed with project setup and initial implementation with clarity and consistency.
--- END FILE: app_documentation/technology_versions_libraries.md ---

--- START FILE: app_documentation/testing_strategy.md ---
**Huberman App: Holistic Testing Strategy**

**1. Introduction**

This document outlines the comprehensive testing strategy for the Huberman App project, encompassing both the backend (Laravel) and frontend (React Native) components. The primary goal is to ensure the delivery of a high-quality, reliable, secure, and user-friendly application that meets all functional and non-functional requirements. This strategy adopts a multi-layered approach, integrating various testing types throughout the development lifecycle.

**2. Testing Objectives**

*   **Verify Requirements:** Ensure the application functions according to the defined user stories and acceptance criteria (`user_stories_mvp.md`).
*   **Prevent Regressions:** Detect defects introduced by new code changes or refactoring early in the cycle.
*   **Build Confidence:** Provide confidence to the team, stakeholders, and users in the application's stability and correctness before release.
*   **Early Defect Detection:** Identify and fix bugs as early as possible in the development process, reducing the cost and effort of remediation.
*   **Ensure Quality Attributes:** Validate non-functional requirements, including performance, security, and usability.

**3. Testing Levels & Scope**

We will employ a balanced mix of automated and manual testing across different levels:

*   **Level 1: Unit Tests**
    *   **Scope:** Focus on testing the smallest isolated parts of the codebase (individual functions, methods, classes, components, hooks, utils). Dependencies are typically mocked or stubbed.
    *   **Backend (Laravel):** Test model logic, service class methods, form request validation rules, utility functions. Follows TDD principles outlined in `backend_implementation_todo.md`.
    *   **Frontend (React Native):** Test individual UI components' rendering and basic interactions, utility functions, state management logic (store actions/reducers/selectors), custom hooks.
    *   **Goal:** Verify the correctness of individual code units, fast feedback for developers.
    *   **Execution:** Run locally by developers during development, automatically in the CI pipeline on every commit/PR.

*   **Level 2: Integration Tests (Backend)**
    *   **Scope:** Verify the interaction and communication between multiple backend modules or components (e.g., Controller -> Service -> Repository/Model, Event -> Listener). May involve interaction with a test database and cache.
    *   **Goal:** Ensure different parts of the backend work together as expected.
    *   **Execution:** Run locally by developers, automatically in the CI pipeline.

*   **Level 3: Component Tests (Frontend)**
    *   **Scope:** Test React Native components with more complex interactions, including state changes, prop handling, and basic rendering within a simulated environment, but without full navigation or backend APIs.
    *   **Goal:** Verify component behavior and integration with state management or child components.
    *   **Execution:** Run locally by developers, automatically in the CI pipeline.

*   **Level 4: API / Contract Tests (Backend)**
    *   **Scope:** Test the backend API endpoints directly, verifying adherence to the defined contract (`openapi.yaml`). Check request validation, authentication/authorization logic, response structure, status codes, and basic business logic execution.
    *   **Goal:** Ensure the API behaves as expected from an external consumer's perspective (the frontend) and prevent breaking changes.
    *   **Execution:** Run locally by developers (Laravel Feature Tests), automatically in the CI pipeline.

*   **Level 5: End-to-End (E2E) Tests**
    *   **Scope:** Simulate real user scenarios by interacting with the complete, deployed application (React Native app interacting with the backend API in a dedicated test/staging environment).
    *   **Goal:** Validate complete user flows from start to finish across the entire stack.
    *   **Execution:** Run primarily in Staging environment. Due to complexity, initial focus might be on automating critical paths (e.g., login, core free feature, subscription purchase, core premium feature access). May run nightly or on-demand rather than every commit. Can be supplemented heavily by manual testing initially.

*   **Level 6: Manual Exploratory & Acceptance Testing**
    *   **Scope:** Human-driven testing involving unscripted exploration of the application to uncover usability issues, edge cases, and unexpected behavior. Also includes scripted testing based on user story acceptance criteria.
    *   **Goal:** Catch issues missed by automated tests, validate the user experience, confirm requirements are met from a user perspective. Includes Design QA (comparing implementation to Figma designs).
    *   **Execution:** Performed primarily on Staging builds by QA, Product Owners, and Designers.

*   **Level 7: Security Testing**
    *   **Scope:** As defined in `security_plan.md`. Includes SAST, DAST, and planned external Penetration Testing.
    *   **Goal:** Identify and mitigate security vulnerabilities.
    *   **Execution:** SAST in CI pipeline. DAST periodically on Staging. Penetration testing before major releases.

*   **Level 8: Performance Testing**
    *   **Scope:** Assess backend API response times under simulated load, frontend app startup time, screen transition performance, memory usage.
    *   **Goal:** Ensure the application meets performance expectations and scales appropriately.
    *   **Execution:** Primarily post-MVP or before major releases on a Staging environment resembling production. Initial checks via developer tools during development.

*   **Level 9: Usability Testing**
    *   **Scope:** Observing representative users interacting with the application to perform specific tasks.
    *   **Goal:** Identify usability friction points and gather qualitative feedback on the user experience.
    *   **Execution:** Planned sessions coordinated by UX designers/researchers, likely conducted periodically during development and before major launches.

**4. Tools & Technologies**

*   **Backend Unit/Integration/API:** PHPUnit
*   **Frontend Unit/Component:** Jest, React Native Testing Library (RNTL)
*   **Frontend E2E:** Detox / Appium / Maestro (Selection TBD based on team expertise/needs)
*   **SAST:** PHPStan/Psalm (Backend), ESLint + Security Plugins (Frontend)
*   **DAST:** OWASP ZAP (Initial), potentially commercial scanners later.
*   **Performance:** k6/JMeter (Backend Load), React Native Perf Monitor/Flipper (Frontend Profiling)
*   **Manual Testing/Management:** Jira/Trello (Test Cases/Bug Tracking), potentially TestRail/Zephyr
*   **Device Testing:** BrowserStack / Sauce Labs (or physical device pool)

**5. Roles & Responsibilities**

*   **Developers (Backend & Frontend):**
    *   Write and maintain Unit, Integration, and Component tests for their code.
    *   Write API/Contract tests (Backend).
    *   Run tests locally before committing code.
    *   Fix bugs identified during testing.
    *   Participate in code reviews focusing on testability and coverage.
    *   Integrate and run SAST tools.
    *   Contribute to E2E test automation (optional/based on skill).
    *   Conduct initial performance profiling.
*   **QA Engineers / SDETs (if applicable):**
    *   Develop and execute manual test plans and exploratory testing.
    *   Develop and maintain automated E2E tests.
    *   Perform regression testing.
    *   Manage bug tracking process.
    *   Execute DAST scans.
    *   Coordinate acceptance testing.
*   **Designers:**
    *   Perform Design QA against implemented features.
    *   Conduct usability testing.
*   **Product Owners / Managers:**
    *   Define acceptance criteria for user stories.
    *   Participate in acceptance testing.
    *   Prioritize bug fixes.
*   **DevOps / Infrastructure:**
    *   Maintain testing environments.
    *   Integrate tests into CI/CD pipeline.
    *   Configure monitoring for performance and errors.

**6. Testing Environments**

*   **Local:** Developers run Unit, Integration, Component, API tests during coding.
*   **CI (Continuous Integration):** Automated execution of Unit, Integration, Component, API tests, and SAST checks upon code commits/PRs. Build failures block merges.
*   **Staging:** Deployed environment closely resembling production. Used for Manual QA, Acceptance Testing, E2E automation runs, DAST scans, Performance testing.
*   **Production:** Live environment. Testing is limited to essential post-deployment smoke tests and ongoing monitoring.

**7. Integration with Development Process**

*   **CI/CD Pipeline:** Automated tests (Levels 1-4) are mandatory gates in the CI pipeline. A failing build prevents code merging. E2E tests may run separately (e.g., nightly).
*   **Definition of Done (DoD):** A user story or task is considered "Done" only when:
    *   Code is implemented according to requirements.
    *   Relevant unit, integration, component, and API tests are written and passing.
    *   Code passes CI checks (including SAST).
    *   Code is peer-reviewed.
    *   Functionality is successfully tested by QA (manual/automated E2E) in Staging.
    *   Design QA is completed (if applicable).
    *   Acceptance criteria are met (verified by PO).
    *   Documentation (code comments, relevant diagrams, READMEs) is updated.

**8. Bug Tracking & Reporting**

*   **Tool:** Jira/Trello will be used for tracking bugs identified during any testing phase.
*   **Process:** Bugs will be reported with clear steps to reproduce, expected vs. actual results, severity/priority, environment details, and relevant screenshots/logs. Bugs will be assigned, prioritized, fixed, and then verified by QA in the Staging environment before closure.

**9. Conclusion**

This holistic testing strategy provides a framework for ensuring the quality and reliability of the Huberman App. By combining automated tests at various levels with thorough manual testing, security checks, and performance considerations, integrated tightly with the CI/CD pipeline and Definition of Done, we aim to deliver a robust and user-trusted application. This strategy will be reviewed and adapted as the project progresses.
--- END FILE: app_documentation/testing_strategy.md ---

--- START FILE: app_documentation/TODO.md ---
Okay, let's translate the high-level vision for the "Huberman App" (Optimize Guide) into a detailed technical plan and setup outline for the implementation phase.

---

**Huberman App (Optimize Guide): Implementation Preparation Plan**

**1. Transition Summary**

We have successfully completed the high-level application description and architectural blueprint phases for the Huberman App. The architecture outlines a Modular Monolith (Laravel/PHP backend), a React Native frontend, PostgreSQL database, Redis caching/queuing, and a RESTful API, all designed to support the defined Freemium subscription model. This document details the next crucial phase: transitioning from the architectural vision to actionable technical specifications, project setup, and environment preparation necessary to initiate development efficiently and effectively. The objective is to establish a solid foundation for the implementation lifecycle.

**2. Detailed Technical Design & Specifications**

This phase focuses on refining the high-level architecture into granular component designs and technical specifications.

*   **Component Breakdown (Modular Monolith):**
    *   **Process:** Decompose the Laravel backend into logical, domain-driven modules (Namespaces/Folders). Based on the architecture and features, initial modules will likely include: `Authentication`, `UserManagement`, `SubscriptionBilling` (integrating with chosen payment provider/Cashier), `ContentManagement` (Episodes, Protocols, Summaries), `ProtocolEngine` (Reminder logic, Tracking), `NotesService`, `CommunityFeatures` (if applicable early), and `CoreApi`.
    *   **Outcome:** Clearly defined code boundaries and responsibilities within the Laravel application structure.
*   **Component Interfaces & Interactions:**
    *   **Process:** Define the specific internal contracts (Service Classes, Interfaces, Events) for how these backend modules interact. Document the flow of data and control, especially for cross-cutting concerns like subscription status checks. For frontend-backend interaction, focus on the API.
    *   **Outcome:** Documented internal interaction patterns (e.g., Sequence Diagrams for key flows) and clear responsibilities for each module.
*   **API Design & Documentation:**
    *   **Process:** Formalize the RESTful API contract. Utilize OpenAPI (Swagger) specification to define all endpoints, request/response schemas, authentication methods (Laravel Sanctum/Passport), and authorization requirements. Explicitly tag endpoints requiring 'Premium' subscription status. Key areas include: Auth (login, register, password reset), User Profile, Plans/Subscriptions (fetching offers, potentially linking to provider portals), Content (fetching episodes, protocols, summaries - with filtering for free/premium), Notes (CRUD, public/private flags), Reminders (CRUD for premium), Tracking (logging adherence for premium). Define error handling standards (HTTP status codes, error response structure). Define webhook endpoints for payment providers (Stripe/Paddle, Apple App Store Server Notifications, Google Play Developer API).
    *   **Outcome:** A version-controlled `openapi.yaml` or `swagger.json` file serving as the definitive API contract for both frontend and backend teams.
*   **Database Schema Refinement:**
    *   **Process:** Review the provided `database_plan.md` SQL schema. Convert it into Laravel Migrations. Finalize data types, constraints (NOT NULL, UNIQUE), foreign key relationships (with appropriate ON DELETE behavior - e.g., CASCADE for notes on user delete, RESTRICT for plans on active subscriptions). Define necessary indexes based on anticipated query patterns (e.g., indexing `subscriptions.user_id`, `subscriptions.status`, `subscriptions.ends_at`, `notes.user_id`, `notes.episode_id`, `protocols.category`). Plan for potential future schema evolution using migrations.
    *   **Outcome:** A complete set of executable Laravel migration files checked into version control, representing the definitive database structure.
*   **Complex Workflow/Algorithm Design:**
    *   **Process:** Document the specific logic for complex features identified in the architecture:
        *   **Subscription Lifecycle Management:** Detail the state machine for subscriptions (`trialing`, `active`, `past_due`, `canceled`, `expired`) and how webhook events from Stripe/Paddle/Apple/Google trigger state transitions and update the `subscriptions` table.
        *   **Feature Gating Logic:** Specify the implementation details for Laravel Middleware/Policies that check the user's active subscription status (querying `subscriptions` table, potentially using cached flags from Redis) before granting access to premium API routes or features.
        *   **Customizable Reminders (Premium):** Design the scheduling mechanism (likely using Laravel's Task Scheduling + Queues) to trigger push notifications based on user-defined times/frequencies for specific protocols.
        *   **Tracking & Visualization Logic (Premium):** Define how adherence data is stored and how it will be aggregated for progress visualizations (e.g., streak calculation).
    *   **Outcome:** Sequence diagrams, state diagrams, or pseudo-code documenting the core logic for these critical flows.
*   **Technology Version & Library Finalization:**
    *   **Process:** Lock down specific versions: PHP (e.g., 8.2+), Laravel (e.g., 10.x/11.x), PostgreSQL (e.g., 17), Redis (e.g., 7.x), Node.js (LTS for React Native tooling), React Native (latest stable). Select and document key libraries: `laravel/cashier-stripe` or `laravel/cashier-paddle`, `react-native-iap`, Push Notification library (e.g., `react-native-push-notification` or cloud provider SDKs), state management for RN (e.g., Redux Toolkit, Zustand).
    *   **Outcome:** Updated `composer.json`, `package.json`, and potentially a project README or Architecture Decision Record (ADR) listing finalized versions and libraries.

**3. Project Planning & Development Readiness**

Translate the technical design into a manageable project plan and prepare the team.

*   **Requirements Refinement (User Stories):**
    *   **Process:** Break down the features from `app_description.md` (both Free and Premium tiers) into granular User Stories (e.g., "As a Free User, I want to see summaries for foundational protocols so that I can understand the basics," "As a Premium User, I want to set a custom daily reminder for 'Morning Sunlight Viewing' so that I don't forget," "As a Premium User, I want to mark a protocol as completed for the day so that I can track my adherence"). Use a tool like Jira or Trello. Prioritize stories for an MVP, focusing on core free functionality and the subscription mechanism first, followed by premium features.
    *   **Outcome:** A populated backlog of estimated User Stories in the chosen project management tool.
*   **Detailed Estimation:**
    *   **Process:** Estimate the effort for each User Story based on the detailed technical designs (e.g., using Story Points or time estimates). This should be done collaboratively by the development team.
    *   **Outcome:** Estimated backlog providing a basis for timeline creation.
*   **Granular Project Timeline & Milestones:**
    *   **Process:** Develop a sprint-based or Kanban-based timeline. Define key milestones:
        *   M1: Project Setup Complete (Repo, CI/CD Base, Local Env).
        *   M2: Core Backend Ready (Auth, User Mgmt, DB Migrations, Basic API Shell).
        *   M3: Basic Content Display (Free Tier Protocols/Summaries visible in RN App).
        *   M4: Subscription Flow PoC (IAP Integration, Backend Webhooks, Basic Feature Gate).
        *   M5: Free Tier Feature Complete (Basic Reminders, Notes).
        *   M6: Premium Feature Set 1 (e.g., Full Content Access, Custom Reminders).
        *   M7: Premium Feature Set 2 (e.g., Tracking, Offline Access).
        *   M8: Beta Release / Production Readiness.
    *   **Outcome:** A documented project plan with sprints/phases, milestones, and dependencies visualized.
*   **Resource Allocation:**
    *   **Process:** Assign development team members (Backend Devs, Frontend RN Devs, QA, potentially DevOps support) to specific modules, epics, or sprints based on skills and availability.
    *   **Outcome:** Clear ownership of tasks/modules within the team.
*   **Essential Tooling Setup:**
    *   **Process:** Configure and grant access to necessary tools:
        *   Project Management: Jira/Trello board setup.
        *   Version Control: GitHub/GitLab/Bitbucket repository creation, branch strategy definition (e.g., Gitflow).
        *   Communication: Slack/Teams channel setup.
        *   Documentation: Confluence/Notion space creation for technical docs, ADRs, meeting notes.
    *   **Outcome:** Operational project infrastructure ready for team use.
*   **Development Environment Configuration:**
    *   **Process:** Finalize and distribute the Docker configuration (`docker-compose.yml`) as specified in the architecture. Ensure it includes containers for PHP-FPM, Nginx/Caddy, PostgreSQL, Redis, and Node.js (for frontend tooling). Provide clear instructions for setup and usage. Standardize environment variable management (e.g., `.env` files with templates).
    *   **Outcome:** Developers can quickly and consistently set up identical local development environments.

**4. UI/UX Design Integration (If Applicable)**

If not already completed, this is a critical parallel activity, especially for the React Native frontend.

*   **Process:** Ensure finalized, high-fidelity mockups and prototypes are available and signed off. These must cover:
    *   All key user flows (onboarding, browsing content, setting reminders, taking notes, tracking progress).
    *   Clear visual differentiation between Free and Premium features/content.
    *   User-friendly prompts and flows for upgrading to Premium.
    *   Platform-specific design conventions (iOS/Android).
    *   Creation of a component library/design system for consistency.
*   **Outcome:** Signed-off UI/UX designs and a style guide/component library ready for frontend development.

**5. Infrastructure & Environment Setup**

Prepare the cloud/hosting environments required beyond local development.

*   **Infrastructure Planning:**
    *   **Process:** Based on the Laravel Forge/Vapor choice, plan the specific server sizes/configurations (if using Forge) or review Vapor's serverless scaling model. Estimate initial database (PostgreSQL) and cache (Redis) resource needs (using managed services). Plan for object storage (S3/GCS) for potential offline content or user uploads.
    *   **Outcome:** Documented infrastructure requirements and initial sizing estimates.
*   **Cloud Service Selection:**
    *   **Process:** Confirm choices: Forge/Vapor for hosting, AWS RDS/Managed Postgres provider, AWS ElastiCache/Managed Redis provider, S3/GCS for storage. Set up accounts if necessary.
    *   **Outcome:** Finalized list of cloud services and providers.
*   **Environment Provisioning:**
    *   **Process:** Use Forge/Vapor (or Terraform/Pulumi if more control is desired) to provision the initial Dev, Staging, and Production environments. This includes setting up servers/services, databases, caches, and configuring network access/security groups.
    *   **Outcome:** Functional cloud environments ready for deployment.
*   **Monitoring, Logging, Alerting Setup:**
    *   **Process:** Integrate monitoring tools (e.g., Datadog, Sentry, CloudWatch, Prometheus/Grafana) into the provisioned environments. Configure basic logging aggregation (e.g., Vapor logs, CloudWatch Logs, ELK stack). Set up initial alerts for critical events (e.g., high error rates, server down, high DB connections). Integrate Laravel Telescope for Dev/Staging.
    *   **Outcome:** Foundational observability infrastructure in place.
*   **Backup & Recovery Planning:**
    *   **Process:** Configure automated database backups (e.g., using RDS snapshots or provider tools) with defined retention policies. Document the recovery procedure (e.g., restoring from a snapshot).
    *   **Outcome:** Initial backup strategy implemented and documented.

**6. Security Deep Dive & Planning**

Integrate security rigorously from the start.

*   **Detailed Threat Modeling:**
    *   **Process:** Conduct a threat modeling session (e.g., using STRIDE) based on the detailed technical design, data flows, and features (especially authentication, subscription handling, user notes, potential community features). Identify potential threats and vulnerabilities.
    *   **Outcome:** A documented threat model identifying key risks and potential attack vectors.
*   **Define Specific Technical Security Controls:**
    *   **Process:** Based on the threat model and architecture, define concrete security controls:
        *   **Authentication:** Specify token expiry, refresh token strategy, password complexity rules, brute-force protection (rate limiting).
        *   **Authorization:** Detail the implementation of Laravel Policies/Middleware for checking `subscriptions.status` for premium features. Ensure no business logic relies solely on client-side checks.
        *   **Encryption:** Enforce TLS 1.2+ (HTTPS), confirm database encryption at rest, define secure storage for API keys/secrets (e.g., environment variables injected via Forge/Vapor, potentially a secrets manager).
        *   **Input Validation:** Define strategy (e.g., Laravel Form Requests) for validating all incoming API request data.
        *   **Payment Security:** Reiterate server-side validation of IAP receipts and secure webhook handling (signature verification).
        *   **Dependency Scanning:** Plan for tools like `composer audit`, `npm audit`.
    *   **Outcome:** A checklist or document detailing specific security controls to be implemented and verified.
*   **Security Testing Planning:**
    *   **Process:** Plan for integrating security testing into the development lifecycle:
        *   **SAST:** Configure static analysis tools (e.g., PHPStan, Psalm, ESLint security plugins) to run locally and/or in CI.
        *   **DAST:** Plan for using basic dynamic analysis tools against the Staging environment later in the cycle.
        *   **Penetration Testing:** Allocate budget/time for external penetration testing before major production launches.
    *   **Outcome:** Security testing activities integrated into the project plan and CI/CD strategy.

**7. CI/CD Pipeline Foundation**

Automate the build, test, and deployment process early.

*   **Process:** Set up the initial CI/CD pipeline (using GitHub Actions, GitLab CI, Bitbucket Pipelines, or Jenkins) connected to the version control repository. Configure initial stages:
    *   Trigger on push/merge to `develop` and `main` branches.
    *   Checkout code.
    *   Install dependencies (`composer install`, `npm install`).
    *   Run linters and static analysis (SAST tools).
    *   Run automated tests (Unit, Integration - e.g., `php artisan test`, `npm test`).
    *   Build frontend assets (`npm run build`).
    *   (Initial) Deploy script targeting the Dev/Staging environment using Forge CLI/API or Vapor CLI deployment commands.
*   **Outcome:** A basic, functional CI/CD pipeline that automates testing and deployment to lower environments, ready to be expanded as the project progresses.

**8. Initiation of Development**

With the detailed plans and setup complete, development can commence.

*   **Process:** The development team begins implementation based on the prioritized backlog (User Stories), detailed technical designs, API specifications, and established environment/tooling setup.
*   **Initial Focus:**
    *   Setting up the base Laravel and React Native project structures.
    *   Implementing core database migrations (Users, Plans, Subscriptions, initial Content tables).
    *   Building the Authentication flow (backend API and frontend screens).
    *   Establishing basic API communication between frontend and backend.
    *   Setting up the basic subscription scaffolding (e.g., integrating Laravel Cashier, defining Plan models).
*   **Outcome:** Development kickoff, focusing on foundational components and demonstrating core connectivity.

---

This comprehensive plan provides the necessary detail and structure to effectively transition the Huberman App project from architecture into the implementation phase, ensuring all critical technical, planning, infrastructure, and security aspects are addressed upfront.--- END FILE: app_documentation/TODO.md ---

--- START FILE: app_documentation/ui_ux_handoff_integration.md ---

**Huberman App: UI/UX Design Handoff & Integration Plan**

**1. Introduction**

This document outlines the standardized process for handing off finalized User Interface (UI) and User Experience (UX) designs from the design team to the frontend (React Native) development team for the Huberman App. The goal is to ensure a smooth, efficient, and accurate translation of the design vision into a functional application, maintaining fidelity with the intended **Microsoft Fluent UI** aesthetic.

**2. Guiding Principles**

*   **Collaboration:** Open communication between design and development is essential throughout the process.
*   **Clarity:** Handoff materials must be clear, unambiguous, and provide all necessary details for implementation.
*   **Consistency:** Designs should adhere to a consistent design system and component library approach.
*   **Efficiency:** Utilize standard tools and processes to minimize friction and rework.

**3. Target Aesthetic: Microsoft Fluent UI**

The application aims for a look and feel inspired by Microsoft's Fluent Design System. This influences the handoff in several ways:

*   **Design References:** Designers should utilize official Fluent Design System documentation (web guidelines, potentially WinUI/MAUI examples for principles) as a primary reference, adapting concepts appropriately for a mobile React Native context.
*   **Component Library Strategy (Key Decision Needed):**
    *   **Option A (Recommended if mature):** Leverage an existing Fluent UI library for React Native (e.g., `fluentui-react-native` provided by Microsoft). Designers should align their components with those available in the chosen library where possible. The handoff must clearly indicate which standard library components are used and specify any required customizations (theming, styling overrides).
    *   **Option B (Custom Build):** If a suitable library isn't available or doesn't meet needs, developers will build custom components based strictly on Fluent guidelines and the provided Figma specifications. This requires more development effort and very precise specifications from the designer.
    *   **Decision:** The specific library (or decision to build custom) needs to be finalized collaboratively between design and frontend development leads early on. This document assumes a library *might* be used, requiring designers to reference it.
*   **Figma Toolkit:** Designers are encouraged to use a Fluent UI Design Kit for Figma (if available and suitable) to maintain consistency and speed up the design process.

**4. Key Tools**

*   **Design & Prototyping:** **Figma** will be the primary tool for creating designs, prototypes, specifications, and exporting assets.
*   **Component Documentation (Developer Built):** **Storybook** will be used by frontend developers to build and document the reusable React Native components interactively, based on Figma specs. Designers will reference Storybook during Design QA.
*   **Communication:** **Slack/Teams** (specify channel) for asynchronous communication and quick questions. Regular sync meetings as needed.
*   **Project Management:** **Jira/Trello** (specify board/project) for tracking UI implementation user stories/tasks derived from the designs.

**5. Handoff Process**

1.  **Design Finalization & Review:**
    *   Designer completes user flows, screen designs, and component definitions in Figma for a specific feature or set of features.
    *   Internal design review is conducted.
    *   Designs are reviewed with Product Management/Stakeholders for functional sign-off.

2.  **Preparation in Figma:**
    *   **Organization:** Figma file is well-organized with clear page structures (e.g., by flow, by feature) and layer naming conventions.
    *   **Components:** Reusable elements (buttons, inputs, cards, list items, navigation bars etc.) are created as Figma Components with variants defined (e.g., states like disabled, different sizes) aligned with Fluent principles and the chosen library strategy (see Sec 3).
    *   **Styles:** Colors, typography (font families - specify font files if custom, sizes, weights), spacing values, and grids/layouts are defined as Figma Styles.
    *   **Specs:** Auto-layout and constraints are used effectively to ensure responsive behavior and clear spacing/padding intent. Measurements, colors, and typography details should be easily inspectable using Figma's built-in "Inspect" panel.
    *   **Assets:** All icons, illustrations, or images needed are prepared as exportable assets within Figma (preferably SVG for icons, PNG @1x, @2x, @3x resolutions for raster images). Naming conventions for assets should be established.
    *   **Prototyping:** Key user flows are linked using Figma's prototyping features to demonstrate navigation and interactions.

3.  **Handoff Meeting:**
    *   The Designer schedules a walkthrough session with the assigned Frontend Developer(s) and relevant QA/PM roles.
    *   **Agenda:**
        *   Present the overall user flow(s).
        *   Walk through key screens, highlighting interactions, transitions, and edge cases.
        *   Review reusable components and their variants/states.
        *   Point out specific Fluent UI patterns or library components being used/customized.
        *   Explain the structure of the Figma file (Styles, Components, Assets).
        *   Answer developer questions.

4.  **Providing Access:**
    *   Frontend developers are given "View" or "Edit" (if needed for inspection plugins) access to the finalized Figma file/page.

5.  **Implementation & Clarification:**
    *   Frontend developers translate the Figma designs and specifications into React Native code, utilizing the agreed-upon component library strategy.
    *   Developers use the Figma Inspect panel to get exact values for styles and spacing.
    *   Developers export required assets directly from Figma.
    *   Developers use the designated communication channel (Slack/Teams) to ask clarifying questions as they arise during implementation. Designers should be responsive.

6.  **Design QA:**
    *   Once a feature/component is implemented (preferably on a device or simulator build shared via a Staging/Dev environment), the Designer performs a Design QA review.
    *   Compare the implementation against the Figma designs for visual fidelity, pixel perfection (within reason), interaction accuracy, and adherence to Fluent UI principles.
    *   Provide feedback via the project management tool (Jira/Trello comments/bugs) or a dedicated feedback tool, referencing specific screens/components.

**6. Key Deliverables from Design**

*   **Link to the finalized Figma file**, properly organized and prepared as described above.
*   Clear specification of **required font files** if using custom fonts not available by default.
*   Defined **asset export settings** and naming conventions.
*   Documentation (within Figma or linked) clarifying the **component library strategy** (use of `fluentui-react-native` vs. custom build) and specific customizations needed.

**7. Frontend Developer Responsibilities**

*   Attend the handoff meeting and ask clarifying questions.
*   Use the Figma file and Inspect panel as the source of truth for UI specifications.
*   Implement components and screens adhering to the provided specs and Fluent UI guidelines.
*   Build/update the Storybook documentation for reusable components.
*   Export assets correctly.
*   Communicate proactively if ambiguities or technical limitations arise.
*   Facilitate Design QA by providing access to implemented builds.
*   Address Design QA feedback.

**8. Conclusion**

This handoff process, centered around Figma and clear communication, aims to streamline the integration of finalized Fluent UI-inspired designs into the Huberman App's React Native frontend. By following these steps, we can ensure consistency, accuracy, and efficient collaboration between the design and development teams.
--- END FILE: app_documentation/ui_ux_handoff_integration.md ---

--- START FILE: app_documentation/user_stories_mvp.md ---

**Huberman App: User Stories & MVP Definition**

**1. Introduction**

This document translates the features outlined in `app_description.md` into specific User Stories using the standard "As a..., I want..., so that..." format. These stories form the basis for the product backlog. It also proposes a Minimum Viable Product (MVP) scope, focusing on delivering core value and validating the fundamental Freemium model.

These stories should be imported into a project management tool (e.g., Jira, Trello) for estimation, tracking, and prioritization.

**2. User Story Backlog**

*(Note: These stories represent functional requirements. Technical tasks like "Set up CI/CD" or "Configure database backups" are also necessary but are typically tracked separately or as sub-tasks.)*

**2.1. Core & Foundation (Applies to All Users)**

*   **Story (Onboarding):** As a New User, I want to experience a simple onboarding flow that explains the app's core purpose and how to navigate basic features (like finding protocols and summaries) so that I can quickly understand how to use the app.
*   **Story (Authentication):** As a User, I want to register for a new account using my email and a password so that I can securely access the app's features.
*   **Story (Authentication):** As a registered User, I want to log in using my email and password so that I can access my personalized data and subscription status.
*   **Story (Authentication):** As a logged-in User, I want to be able to log out of the app so that I can secure my session.
*   **Story (Authentication):** As a User who forgot their password, I want to request a password reset via email so that I can regain access to my account.
*   **Story (Navigation):** As a User, I want clear and intuitive navigation (e.g., bottom tabs, menus) so that I can easily find different sections like protocols, notes, and settings.

**2.2. Free Tier Features**

*   **Story (Content Access):** As a Free User, I want to view short summaries and brief explanations for a pre-defined set of foundational protocols so that I can understand the core concepts without a subscription.
*   **Story (Reminders):** As a Free User, I want to receive pre-set (non-customizable) push notification reminders for foundational daily protocols (e.g., Morning Sunlight) so that I can start building basic habits.
*   **Story (Notes):** As a Free User, I want to create and view a limited number of simple text notes linked to foundational protocols/episodes so that I can record my personal reflections within basic limits.
*   **Story (Premium Prompt):** As a Free User, I want to see clear indicators for premium-only content/features and prompts/information on how to upgrade so that I understand the value proposition of the Premium tier.

**2.3. Premium Tier Features**

*   **Story (Subscription Purchase):** As a User, I want to easily view the Premium subscription offers (monthly/annual pricing) and initiate the purchase process through the native App Store/Google Play interface so that I can upgrade my account.
*   **Story (Subscription Status):** As a User, I want to see my current subscription status (Free/Premium, renewal/expiry date) within the app settings so that I know my access level.
*   **Story (Content Access - Premium):** As a Premium User, I want to access the *full library* of protocols (beyond foundational ones) so that I can explore and apply the complete range of Huberman Lab recommendations.
*   **Story (Content Access - Premium):** As a Premium User, I want to access detailed explanations, step-by-step implementation guides, and curated resource links (where available) for *all* protocols so that I can fully understand the science and apply the protocols effectively.
*   **Story (Content Access - Premium):** As a Premium User, I want to read 'key takeaway' summaries for episodes/protocols so that I can quickly grasp the most critical points.
*   **Story (Reminders - Premium):** As a Premium User, I want to set *customizable* push notification reminders for *any* protocol (choosing time, frequency, specific days) so that I can get timely prompts tailored to my routine.
*   **Story (Reminders - Premium):** As a Premium User, I want to manage my custom reminders (edit time/frequency, activate/deactivate, delete) so that I can keep my prompts up-to-date.
*   **Story (Notes - Premium):** As a Premium User, I want to create *unlimited* personal notes so that I can record extensive thoughts without restriction.
*   **Story (Tracking - Premium):** As a Premium User, I want to mark specific protocols as 'completed' for a given day so that I can track my adherence.
*   **Story (Tracking - Premium):** As a Premium User, I want to see basic visualizations of my tracking data (e.g., a completion calendar view, current streak) for a selected protocol so that I can monitor my consistency.
*   **Story (Offline Access - Premium):** As a Premium User, I want to download protocol summaries, guides, and my personal notes for offline access so that I can use the app when I don't have connectivity. *(Potential Post-MVP)*
*   **Story (Advanced Notes - Premium):** As a Premium User, I want advanced organization features for notes (like tags or search) so that I can effectively manage my learning and reflections. *(Potential Post-MVP)*
*   **Story (Community Notes - Premium):** As a Premium User, I want the *option* to make specific notes public (linked to an episode/protocol) so that I can share my takeaways with the community. *(Potential Post-MVP)*
*   **Story (Community Notes - Premium):** As a Premium User, I want to view public notes shared by other premium users on specific episodes/protocols so that I can learn from the community's insights. *(Potential Post-MVP)*
*   **Story (Personalized Routines - Premium):** As a Premium User, I want to create personalized routines ('stacks') by grouping selected protocols together so that I can manage my daily/weekly practices efficiently. *(Potential Post-MVP)*

**2.4. Technical / Backend Stories**

*   **Story (Tech):** Implement backend API endpoints for user registration, login (token generation), logout, and password reset flow.
*   **Story (Tech):** Implement backend API endpoints for CRUD operations on user profiles.
*   **Story (Tech):** Implement backend API endpoints to serve content (episodes, protocols, summaries) with filtering logic based on user subscription status (Free vs. Premium).
*   **Story (Tech):** Implement backend API endpoints for CRUD operations on notes, enforcing free-tier limits and premium permissions.
*   **Story (Tech):** Implement backend API endpoints for CRUD operations on custom reminders (Premium only).
*   **Story (Tech):** Implement backend API endpoints for logging and retrieving adherence tracking data (Premium only).
*   **Story (Tech):** Implement backend webhook endpoints for Stripe/Apple/Google to receive and process subscription lifecycle events (created, renewed, canceled, expired, failed).
*   **Story (Tech):** Implement core subscription status checking logic (`SubscriptionServiceInterface::userHasActivePremiumSubscription`) including caching.
*   **Story (Tech):** Implement API middleware (`CheckPremiumAccess`) to protect premium endpoints.
*   **Story (Tech):** Implement the reminder scheduling logic (Console command + Queued Jobs) and push notification sending via Firebase Admin SDK / APNS.
*   **Story (Tech):** Define and implement all required database migrations based on `database_plan.md`.
*   **Story (Tech):** Set up project foundation: Base Laravel application, React Native project, Dockerized local development environment.

**3. Proposed Minimum Viable Product (MVP) Scope**

The MVP aims to validate the core value proposition: providing structured Huberman content and actionable reminders, with a functional path to upgrade for more comprehensive features.

**MVP Backlog:**

*   **Foundation:**
    *   All stories under "Core & Foundation" (Onboarding, Auth, Navigation).
    *   Tech: Set up project foundation (Laravel, RN, Docker).
    *   Tech: Implement basic database migrations (users, plans, subscriptions, basic content).
    *   Tech: Implement Auth API endpoints.
*   **Free Tier Experience:**
    *   Story: View short summaries/explanations for *foundational* protocols.
    *   Story: Receive *pre-set* reminders for foundational protocols.
    *   Story: See clear prompts/indicators to upgrade.
    *   Tech: Implement content API with basic free/premium filtering.
    *   Tech: Implement basic reminder sending logic for free tier.
*   **Subscription Flow:**
    *   Story: View Premium subscription offers and initiate purchase via IAP.
    *   Story: See current subscription status in settings.
    *   Tech: Implement API endpoints for plans/subscription status.
    *   Tech: Implement *full* backend webhook handling for chosen provider(s) to update `subscriptions` table correctly.
    *   Tech: Implement *frontend* IAP purchase flow (`react-native-iap`).
    *   Tech: Implement API middleware/policies for feature gating (`CheckPremiumAccess`).
*   **Core Premium Value (Validation):**
    *   Story: Access the *full library* of protocol *summaries* (unlocking more content than free tier).
    *   Story: Set *one type* of simple customizable reminder (e.g., daily at a specific time) for *any* protocol. (Demonstrates core premium reminder value).
    *   Tech: Implement custom reminder API endpoints (basic create/view/delete).
    *   Tech: Implement scheduling/sending logic for custom reminders.

**Excluded from MVP (Potential Phase 2+):**

*   Detailed explanations/implementation guides (Premium Content Depth)
*   Resource links (Premium Content Depth)
*   Key Takeaways (Premium Content Depth)
*   Advanced reminder customization (complex frequencies, snooze)
*   Note-taking (even limited Free tier might be deferred if complex)
*   Tracking features (logging adherence, visualizations)
*   Offline Access
*   Advanced Note features (unlimited, tags, search, public notes)
*   Community Features
*   Personalized Routines/Stacks
*   Password Reset (could be deferred slightly if needed, but usually core)

**4. Next Steps**

1.  Import these stories into the chosen project management tool (Jira/Trello).
2.  Refine story details and add acceptance criteria.
3.  Estimate the effort for each story (e.g., using Story Points) with the development team.
4.  Prioritize the backlog further, confirming the MVP scope based on estimations and strategic goals.
5.  Begin sprint planning based on the prioritized MVP backlog.
--- END FILE: app_documentation/user_stories_mvp.md ---

--- START FILE: artisan ---
#!/usr/bin/env php
<?php

use Illuminate\Foundation\Application;
use Symfony\Component\Console\Input\ArgvInput;

define('LARAVEL_START', microtime(true));

// Register the Composer autoloader...
require __DIR__.'/vendor/autoload.php';

// Bootstrap Laravel and handle the command...
/** @var Application $app */
$app = require_once __DIR__.'/bootstrap/app.php';

$status = $app->handleCommand(new ArgvInput);

exit($status);
--- END FILE: artisan ---

--- START FILE: bootstrap/app.php ---
<?php

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware) {
        //
    })
    ->withExceptions(function (Exceptions $exceptions) {
        //
    })->create();
--- END FILE: bootstrap/app.php ---

--- START FILE: bootstrap/providers.php ---
<?php

return [
    App\Providers\AppServiceProvider::class,
];
--- END FILE: bootstrap/providers.php ---

--- START FILE: composer.json ---
{
    "$schema": "https://getcomposer.org/schema.json",
    "name": "laravel/laravel",
    "type": "project",
    "description": "The skeleton application for the Laravel framework.",
    "keywords": ["laravel", "framework"],
    "license": "MIT",
    "require": {
        "php": "^8.2",
        "laravel/framework": "^12.0",
        "laravel/tinker": "^2.10.1"
    },
    "require-dev": {
        "fakerphp/faker": "^1.23",
        "larastan/larastan": "^3.4",
        "laravel/pail": "^1.2.2",
        "laravel/pint": "^1.13",
        "laravel/sail": "^1.41",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.6",
        "phpstan/phpstan": "^2.1",
        "phpunit/phpunit": "^11.5.3",
        "vimeo/psalm": "^6.10"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php artisan migrate --graceful --ansi"
        ],
        "dev": [
            "Composer\\Config::disableProcessTimeout",
            "npx concurrently -c \"#93c5fd,#c4b5fd,#fb7185,#fdba74\" \"php artisan serve\" \"php artisan queue:listen --tries=1\" \"php artisan pail --timeout=0\" \"npm run dev\" --names=server,queue,logs,vite"
        ],
        "test": [
            "@php artisan config:clear --ansi",
            "@php artisan test"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}
--- END FILE: composer.json ---

--- START FILE: config/app.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application, which will be used when the
    | framework needs to place the application's name in a notification or
    | other UI elements where an application name needs to be displayed.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | the application so that it's available within Artisan commands.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. The timezone
    | is set to "UTC" by default as it is suitable for most use cases.
    |
    */

    'timezone' => 'UTC',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by Laravel's translation / localization methods. This option can be
    | set to any locale for which you plan to have translation strings.
    |
    */

    'locale' => env('APP_LOCALE', 'en'),

    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),

    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is utilized by Laravel's encryption services and should be set
    | to a random, 32 character string to ensure that all encrypted values
    | are secure. You should do this prior to deploying the application.
    |
    */

    'cipher' => 'AES-256-CBC',

    'key' => env('APP_KEY'),

    'previous_keys' => [
        ...array_filter(
            explode(',', env('APP_PREVIOUS_KEYS', ''))
        ),
    ],

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
        'store' => env('APP_MAINTENANCE_STORE', 'database'),
    ],

];
--- END FILE: config/app.php ---

--- START FILE: config/auth.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the amount of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];
--- END FILE: config/auth.php ---

--- START FILE: config/cache.php ---
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */

    'default' => env('CACHE_STORE', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),

];
--- END FILE: config/cache.php ---

--- START FILE: config/database.php ---
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for database operations. This is
    | the connection which will be utilized unless another connection
    | is explicitly specified when you execute a query / statement.
    |
    */

    'default' => env('DB_CONNECTION', 'sqlite'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Below are all of the database connections defined for your application.
    | An example configuration is provided for each database system which
    | is supported by Laravel. You're free to add / remove connections.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DB_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
            'busy_timeout' => null,
            'journal_mode' => null,
            'synchronous' => null,
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'mariadb' => [
            'driver' => 'mariadb',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run on the database.
    |
    */

    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as Memcached. You may define your connection settings here.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
            'persistent' => env('REDIS_PERSISTENT', false),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];
--- END FILE: config/database.php ---

--- START FILE: config/filesystems.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application for file storage.
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Below you may configure as many filesystem disks as necessary, and you
    | may even configure multiple disks for the same driver. Examples for
    | most supported storage drivers are configured here for reference.
    |
    | Supported drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app/private'),
            'serve' => true,
            'throw' => false,
            'report' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
            'report' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
            'report' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];
--- END FILE: config/filesystems.php ---

--- START FILE: config/logging.php ---
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that is utilized to write
    | messages to your logs. The value provided here should match one of
    | the channels present in the list of "channels" configured below.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Laravel
    | utilizes the Monolog PHP logging library, which includes a variety
    | of powerful log handlers and formatters that you're free to use.
    |
    | Available drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog", "custom", "stack"
    |
    */

    'channels' => [

        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'handler_with' => [
                'stream' => 'php://stderr',
            ],
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],

    ],

];
--- END FILE: config/logging.php ---

--- START FILE: config/mail.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send all email
    | messages unless another mailer is explicitly specified when sending
    | the message. All additional mailers can be configured within the
    | "mailers" array. Examples of each type of mailer are provided.
    |
    */

    'default' => env('MAIL_MAILER', 'log'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers that can be used
    | when delivering an email. You may specify which one you're using for
    | your mailers below. You may also add additional mailers if needed.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "resend", "log", "array",
    |            "failover", "roundrobin"
    |
    */

    'mailers' => [

        'smtp' => [
            'transport' => 'smtp',
            'scheme' => env('MAIL_SCHEME'),
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url(env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'resend' => [
            'transport' => 'resend',
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
            'retry_after' => 60,
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
            'retry_after' => 60,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all emails sent by your application to be sent from
    | the same address. Here you may specify a name and address that is
    | used globally for all emails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

];
--- END FILE: config/mail.php ---

--- START FILE: config/queue.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue supports a variety of backends via a single, unified
    | API, giving you convenient access to each backend using identical
    | syntax for each. The default queue connection is defined below.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection options for every queue backend
    | used by your application. An example configuration is provided for
    | each backend supported by Laravel. You're also free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'),
            'table' => env('DB_QUEUE_TABLE', 'jobs'),
            'queue' => env('DB_QUEUE', 'default'),
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
            'queue' => env('BEANSTALKD_QUEUE', 'default'),
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control how and where failed jobs are stored. Laravel ships with
    | support for storing failed jobs in a simple file or in a database.
    |
    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'failed_jobs',
    ],

];
--- END FILE: config/queue.php ---

--- START FILE: config/services.php ---
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

    'resend' => [
        'key' => env('RESEND_KEY'),
    ],

    'slack' => [
        'notifications' => [
            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
        ],
    ],

];
--- END FILE: config/services.php ---

--- START FILE: config/session.php ---
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */

    'lifetime' => (int) env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];
--- END FILE: config/session.php ---

--- START FILE: create_snapshot.sh ---
#!/bin/bash
# -----------------------------------------------------------------------------
# Script Name: create_snapshot.sh
# Description: Scans a Git repository, extracts content from text files and
#              paths of image/other files, ignores specified directories/files,
#              and consolidates the information into a single snapshot file
#              in the project root, prepended with an AI context instruction.
#              Finally, attempts to reveal the snapshot file in the default
#              file manager (opens folder, selects file where possible).
# Usage:       Place this script anywhere. Run it from within a Git repository
#              or any subdirectory. It will automatically find the root.
#              ./create_snapshot.sh
# Output:      Creates/overwrites 'project_snapshot.txt' in the Git repo root.
#              Opens the project root folder in the default file manager,
#              attempting to select 'project_snapshot.txt'.
# Requirements: bash, git, find, file (core utilities), and potentially
#               xdg-utils (Linux), wslpath (WSL), specific file managers
#               (nautilus, dolphin, thunar) on Linux, or appropriate commands
#               for your OS.
# -----------------------------------------------------------------------------

# --- 1. Script Setup ---
# Exit immediately if a command exits with a non-zero status.
set -e
# Treat unset variables as an error when substituting. (Optional but good practice)
# set -u # Uncomment if needed, but ensure all variables are handled.
# Pipe commands should fail if any command in the pipeline fails, not just the last one.
set -o pipefail

# --- 2. Identify Git Workspace Root ---
echo "INFO: Identifying Git repository root..."
PROJECT_ROOT=$(git rev-parse --show-toplevel 2>/dev/null) || {
  echo "ERROR: Not inside a Git repository (or git command not found)." >&2
  exit 1
}
echo "INFO: Found project root: $PROJECT_ROOT"
# Change directory to the project root for consistent relative paths
cd "$PROJECT_ROOT"
echo "INFO: Changed directory to project root."

# --- 3. Define Ignored Directories and Output File ---
# Array of directory/file names to ignore. Add more as needed.
# IMPORTANT: .git is crucial to prevent scanning the git history itself.
# Also ignoring the script's own output file.
OUTPUT_FILENAME="project_snapshot.txt"
IGNORED_ITEMS=(
    # Version Control
    ".git"
    # Dependencies
    "node_modules"
    "vendor"
    "bower_components"
    # Common Build/Output Directories
    "dist"
    "build"
    "out"
    "target"
    "public/build" # e.g., Remix, Laravel Mix
    "www"          # e.g., Ionic
    # Framework-Specific Build/Cache
    ".next"        # Next.js
    ".nuxt"        # Nuxt.js
    ".svelte-kit"  # SvelteKit
    ".cache"       # Gatsby, Parcel, etc.
    # Python
    ".venv"
    "venv"
    "__pycache__"
    ".pytest_cache"
    ".mypy_cache"
    "htmlcov"
    # Testing
    "coverage"
    # Logs & Temporary Files
    "logs"
    "tmp"
    "temp"
    # IDE & Editor Directories
    ".idea"
    ".vscode"
    ".project"
    ".settings"
    # OS Generated Files
    ".DS_Store"
    "Thumbs.db"
    "storage/logs"
    # This script's output file
    "$OUTPUT_FILENAME"
    "composer.lock"
    # Laravel
    "storage/framework"
    "bootstrap/cache"
)


# Define the name of the output snapshot file.
# Since we've cd'd to the PROJECT_ROOT, the output file path is relative to it.
OUTPUT_FILE="$OUTPUT_FILENAME" # This is just the filename, relative to PROJECT_ROOT
# Get the absolute path to the output file for file manager commands
ABSOLUTE_OUTPUT_FILE="$PWD/$OUTPUT_FILENAME"

# Define common file extensions that should always be treated as text,
# overriding potential misidentification by the 'file' command.
TEXT_EXTENSIONS=(
    ".php" ".js" ".css" ".html" ".htm" ".json" ".xml" ".sh" ".py" ".rb" ".java"
    ".c" ".cpp" ".h" ".hpp" ".vue" ".blade.php" ".md" ".yml" ".yaml" ".sql" ".env"
    ".txt" ".log" ".ini" ".cfg" ".conf" ".gitignore" ".editorconfig" ".gitattributes"
    ".env.example" ".lock" ".svg" # SVG is XML-based text
)


echo "INFO: Ignoring directories/files: ${IGNORED_ITEMS[*]}"
echo "INFO: Output file set to: $OUTPUT_FILE (relative to project root)"

# --- 4. Prepare Output File & Add Header ---
# Write the AI context header to the output file.
# This command uses '>' which creates the file or overwrites it if it exists.
echo "INFO: Writing AI context header to '$OUTPUT_FILE'..."
echo "# AI Context Reference: Please analyze the following project snapshot thoroughly to understand the codebase structure and content." > "$OUTPUT_FILE"
# Any subsequent writes to the file in this script MUST use '>>' (append).

# --- 5. Find and Process Files ---
echo "INFO: Scanning files and generating snapshot content..."

# Construct the -prune arguments for find dynamically based on IGNORED_ITEMS
# We need to handle both directories and specific files like the output file.
prune_args=()
if [ ${#IGNORED_ITEMS[@]} -gt 0 ]; then
    prune_args+=("(")
    first=true
    for item in "${IGNORED_ITEMS[@]}"; do
        if [ "$first" = false ]; then
            prune_args+=("-o")
        fi
        # Match by path - works for both files and directories at any depth
        # Use './' prefix to match paths relative to the current directory '.'
        prune_args+=("-path" "./$item") # Changed -name to -path and added ./ prefix
        first=false
    done
    # We want to prune the matching directories or files
    prune_args+=(")" "-prune")
fi

# --- 7. Append Output to File ---
# Find files, excluding specified items, and pipe to the processing loop.
# The redirection '>> "$OUTPUT_FILE"' at the end APPENDS the output of the
# 'while' loop to the file already created/cleared in Step 4.
find . "${prune_args[@]}" -o -type f -print0 | while IFS= read -r -d $'\0' file; do
    # --- 6. Inside the Loop: Process Each File ---

    # Get Relative Path (remove leading './')
    RELATIVE_PATH="${file#./}"

    # Double-check: Skip the output file itself (prune should handle it, but belt-and-suspenders)
    if [[ "$RELATIVE_PATH" == "$OUTPUT_FILENAME" ]]; then
        continue
    fi

    # Determine File Type using MIME types
    # Use '|| true' to prevent script exit if 'file' command fails (e.g., permission denied)
    MIME_TYPE=$(file --mime-type -b "$file" || echo "unknown/error") # Provide default on error

    # Conditional Processing based on MIME Type or Extension
    if [[ "$MIME_TYPE" == "unknown/error" ]]; then
        # Handle cases where file command failed
        echo "--- SKIPPED FILE (Could not determine type): $RELATIVE_PATH ---"
        echo ""
    elif [[ $MIME_TYPE == image/* ]]; then
        # Image File: Print only the path marker
        echo "--- IMAGE FILE: $RELATIVE_PATH ---"
        echo "" # Blank line for separation
    else
        # Check if it's a text file, either by MIME type or by extension
        IS_TEXT=false
        if [[ $MIME_TYPE == text/* ]]; then
            IS_TEXT=true
        else
            # Check against the list of known text extensions (case-insensitive)
            # Use tr for lowercase conversion for compatibility with older bash versions
            lower_relative_path=$(echo "$RELATIVE_PATH" | tr '[:upper:]' '[:lower:]')
            for ext in "${TEXT_EXTENSIONS[@]}"; do
                lower_ext=$(echo "$ext" | tr '[:upper:]' '[:lower:]')
                # Check if the lowercase relative path ends with the lowercase extension
                if [[ "$lower_relative_path" == *"$lower_ext" ]]; then
                    IS_TEXT=true
                    break
                fi
            done
        fi

        if [ "$IS_TEXT" = true ]; then
            # Text File: Print header, content, footer, and newline
            echo "--- START FILE: $RELATIVE_PATH ---"
            # Use cat and handle potential errors reading the file gracefully
            if cat "$file"; then
                : # No-op, cat succeeded
            else
                echo "[Error reading file content for $RELATIVE_PATH]"
            fi
            echo "--- END FILE: $RELATIVE_PATH ---"
            echo "" # Blank line for separation
        else
            # Other File Types (e.g., binary, application/*): Print a path marker with MIME type
            echo "--- OTHER FILE ($MIME_TYPE): $RELATIVE_PATH ---"
            echo "" # Blank line for separation
        fi
    fi

done >> "$OUTPUT_FILE" # Step 7 Implementation: APPEND loop output here.

# --- 8. Final Touches & Testing ---
# Final confirmation message. Testing steps are performed manually by the user.
echo "INFO: Snapshot generation complete."
echo "INFO: Output written to: $PROJECT_ROOT/$OUTPUT_FILE"


# --- 9. Reveal Snapshot File in File Manager ---
echo "INFO: Attempting to reveal '$OUTPUT_FILE' in the default file manager..."
# Goal: Open the containing folder ($PROJECT_ROOT) and select the file.
# This works reliably via specific commands on macOS and Windows.
# On Linux, we attempt specific file manager commands known to support selection,
# falling back to opening the folder if none are found or if the file is missing.

# We are in PROJECT_ROOT. Use ABSOLUTE_OUTPUT_FILE for commands needing it.

case "$(uname -s)" in
    Darwin)
        # macOS: Use 'open -R' which reveals (opens folder and selects) the file in Finder.
        if [ -f "$OUTPUT_FILE" ]; then
            open -R "$OUTPUT_FILE" && echo "INFO: Revealed '$OUTPUT_FILE' in Finder (opened folder and selected file)." || echo "WARN: Failed to reveal file using 'open -R'."
        else
            echo "WARN: Output file '$OUTPUT_FILE' not found. Cannot select it. Opening folder instead."
            open . && echo "INFO: Opened folder using 'open .'" || echo "WARN: Failed to open folder using 'open .'."
        fi
        ;;
    Linux)
        # Linux: Check for WSL first
        if [[ -f /proc/version ]] && grep -qiE "(Microsoft|WSL)" /proc/version &> /dev/null ; then
            # WSL: Use explorer.exe /select which reveals the file in Windows Explorer.
            if command -v wslpath &> /dev/null; then
                if [ -f "$OUTPUT_FILE" ]; then
                    WIN_PATH=$(wslpath -w "$ABSOLUTE_OUTPUT_FILE") # Use absolute path for wslpath
                    explorer.exe /select,"$WIN_PATH" && echo "INFO: Revealed '$OUTPUT_FILE' in Windows Explorer (opened folder and selected file)." || echo "WARN: Failed to reveal file using 'explorer.exe /select'. Ensure explorer.exe is accessible."
                else
                    echo "WARN: Output file '$OUTPUT_FILE' not found. Cannot select it. Opening folder instead."
                    explorer.exe . && echo "INFO: Opened folder in Windows Explorer using 'explorer.exe .'" || echo "WARN: Failed to open folder using 'explorer.exe .'."
                fi
            else
                echo "WARN: 'wslpath' command not found. Cannot determine Windows path to select file. Opening folder instead."
                explorer.exe . && echo "INFO: Opened folder in Windows Explorer using 'explorer.exe .'" || echo "WARN: Failed to open folder using 'explorer.exe .'."
            fi
        else
            # Standard Linux: Try specific file managers known to support selection.
            revealed=false
            if [ ! -f "$OUTPUT_FILE" ]; then
                 echo "WARN: Output file '$OUTPUT_FILE' not found. Cannot select it."
                 # Proceed to fallback (xdg-open .) below
            else
                # Try Nautilus (GNOME, Ubuntu default)
                if command -v nautilus &> /dev/null; then
                    echo "INFO: Found Nautilus. Attempting reveal using 'nautilus --select'..."
                    # Run in background, suppress output
                    nautilus --select "$ABSOLUTE_OUTPUT_FILE" &> /dev/null &
                    revealed=true
                    echo "INFO: Requested reveal via Nautilus."
                fi

                # Try Dolphin (KDE) if not already revealed
                if [ "$revealed" = false ] && command -v dolphin &> /dev/null; then
                    echo "INFO: Found Dolphin. Attempting reveal using 'dolphin --select'..."
                    dolphin --select "$ABSOLUTE_OUTPUT_FILE" &> /dev/null &
                    revealed=true
                    echo "INFO: Requested reveal via Dolphin."
                fi

                # Try Thunar (XFCE) if not already revealed
                # Thunar often selects when given the direct path, but less guaranteed.
                if [ "$revealed" = false ] && command -v thunar &> /dev/null; then
                    echo "INFO: Found Thunar. Attempting reveal by opening file path (may select file)..."
                    thunar "$ABSOLUTE_OUTPUT_FILE" &> /dev/null &
                    revealed=true
                    echo "INFO: Requested reveal via Thunar (behavior might vary)."
                fi
            fi

            # Fallback: If no specific manager was found/used or file was missing, use xdg-open to open the folder.
            if [ "$revealed" = false ]; then
                if command -v xdg-open &> /dev/null; then
                    echo "INFO: No specific file manager found or file missing. Falling back to opening the containing folder using 'xdg-open .'."
                    xdg-open . &> /dev/null
                    if [ $? -eq 0 ]; then
                        echo "INFO: Successfully requested opening current folder via 'xdg-open .'."
                    else
                        echo "WARN: Fallback 'xdg-open .' failed."
                    fi
                else
                    echo "WARN: No specific file manager found, and fallback 'xdg-open' command not found. Cannot automatically open folder. Please install xdg-utils or a supported file manager (Nautilus, Dolphin, Thunar)."
                fi
            fi
        fi
        ;;
    CYGWIN*|MINGW*|MSYS*)
        # Windows environments (Git Bash, etc.): Use explorer.exe /select which reveals the file.
         if [ -f "$OUTPUT_FILE" ]; then
            # Using the relative filename works because we are in the correct CWD ($PROJECT_ROOT).
            explorer.exe /select,"$OUTPUT_FILE" && echo "INFO: Revealed '$OUTPUT_FILE' in Windows Explorer (opened folder and selected file)." || echo "WARN: Failed to reveal file using 'explorer.exe /select'."
         else
            echo "WARN: Output file '$OUTPUT_FILE' not found. Cannot select it. Opening folder instead."
            explorer.exe . && echo "INFO: Opened folder in Windows Explorer using 'explorer.exe .'" || echo "WARN: Failed to open folder using 'explorer.exe .'."
         fi
        ;;
    *)
        # Unsupported OS
        echo "WARN: Unsupported OS '$(uname -s)'. Cannot automatically reveal the file."
        ;;
esac

echo "INFO: Script finished."
# --- End of Script ------ END FILE: create_snapshot.sh ---

--- START FILE: database/.gitignore ---
*.sqlite*
--- END FILE: database/.gitignore ---

--- START FILE: database/factories/UserFactory.php ---
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}
--- END FILE: database/factories/UserFactory.php ---

--- START FILE: database/migrations/0001_01_01_000000_create_users_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class () extends Migration {
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};
--- END FILE: database/migrations/0001_01_01_000000_create_users_table.php ---

--- START FILE: database/migrations/0001_01_01_000001_create_cache_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class () extends Migration {
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};
--- END FILE: database/migrations/0001_01_01_000001_create_cache_table.php ---

--- START FILE: database/migrations/0001_01_01_000002_create_jobs_table.php ---
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class () extends Migration {
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};
--- END FILE: database/migrations/0001_01_01_000002_create_jobs_table.php ---

--- START FILE: database/seeders/DatabaseSeeder.php ---
<?php

namespace Database\Seeders;

use App\Models\User;
// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        // User::factory(10)->create();

        User::factory()->create([
            'name' => 'Test User',
            'email' => 'test@example.com',
        ]);
    }
}
--- END FILE: database/seeders/DatabaseSeeder.php ---

--- START FILE: docker/nginx/conf.d/app.conf ---
server {
    listen 80;
    server_name localhost; # Or your specific domain if needed
    root /var/www/html/public;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";

    index index.php;

    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ \.php$ {
        fastcgi_pass app:9000; # Pass requests to the PHP service container named 'app' on port 9000
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi_params;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
--- END FILE: docker/nginx/conf.d/app.conf ---

--- START FILE: docker-compose.yml ---


services:
  # PHP Service (Application Server)
  app:
    build:
      context: .
      dockerfile: Dockerfile # Assumes a Dockerfile exists for PHP setup
      args:
        UID: "${UID:-1000}" # Pass host user ID for permissions
        GID: "${GID:-1000}" # Pass host group ID for permissions
    container_name: huberman_app_php
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
      # Pass environment variables from .env file
      PHP_IDE_CONFIG: "serverName=Docker" # Example for Xdebug integration
      XDEBUG_MODE: "${XDEBUG_MODE:-off}" # Control Xdebug mode via .env
      XDEBUG_CONFIG: "client_host=host.docker.internal" # Xdebug config for Docker Desktop
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html # Mount application code
      # Persist bash history (optional)
      # - ./docker-data/bashhistory:/root/.bash_history_docker
    networks:
      - huberman_app_network
    depends_on:
      - db
      - redis

  # Web Server (Nginx)
  webserver:
    image: nginx:alpine
    container_name: huberman_app_nginx
    restart: unless-stopped
    tty: true
    ports:
      - "${APP_PORT:-8000}:80" # Expose app port from .env or default 8000
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/ # Mount custom Nginx config
    networks:
      - huberman_app_network
    depends_on:
      - app

  # Database Server (PostgreSQL)
  db:
    image: postgres:16-alpine
    container_name: huberman_app_db
    restart: unless-stopped
    tty: true
    ports:
      - "${DB_PORT:-5432}:5432" # Expose DB port from .env or default 5432
    environment:
      POSTGRES_DB: "${DB_DATABASE:-huberman_db}"
      POSTGRES_USER: "${DB_USERNAME:-sail}" # Use Sail defaults or .env values
      POSTGRES_PASSWORD: "${DB_PASSWORD:-password}"
      POSTGRES_HOST_AUTH_METHOD: "trust" # For easy local connections, change if needed
    volumes:
      - huberman_db_data:/var/lib/postgresql/data # Persistent DB data
      # Optional: Mount init scripts
      # - ./docker/db/init:/docker-entrypoint-initdb.d
    networks:
      - huberman_app_network
    healthcheck: # Basic healthcheck
      test: ["CMD", "pg_isready", "-U", "${DB_USERNAME:-sail}", "-d", "${DB_DATABASE:-huberman_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache Server (Redis)
  redis:
    image: redis:7-alpine
    container_name: huberman_app_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379" # Expose Redis port from .env or default 6379
    volumes:
      - huberman_redis_data:/data # Persistent Redis data
    networks:
      - huberman_app_network
    healthcheck: # Basic healthcheck
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# Define Networks
networks:
  huberman_app_network:
    driver: bridge

# Define Volumes
volumes:
  huberman_db_data:
    driver: local
  huberman_redis_data:
    driver: local
--- END FILE: docker-compose.yml ---

--- START FILE: Dockerfile ---
FROM php:8.2-fpm

WORKDIR /var/www/html

RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    libzip-dev \
    zip \
    unzip \
    git \
    curl \
    nodejs \
    npm \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN docker-php-ext-install pdo pdo_pgsql zip bcmath opcache

RUN curl -sS https://getcomposer.org/installer \
    | php -- --install-dir=/usr/local/bin --filename=composer

RUN groupadd -g 1000 appuser \
    && useradd -u 1000 -ms /bin/bash -g appuser appuser \
    && chown -R appuser:appuser /var/www/html
USER appuser

RUN git config --global --add safe.directory /var/www/html

COPY --chown=appuser:appuser composer.json composer.lock ./
COPY --chown=appuser:appuser artisan ./
COPY --chown=appuser:appuser bootstrap bootstrap
COPY --chown=appuser:appuser config config
COPY --chown=appuser:appuser routes routes

RUN mkdir -p storage/framework/{views,cache/data,sessions} storage/logs

RUN composer install \
    --no-interaction \
    --prefer-dist \
    --no-dev \
    --optimize-autoloader

COPY --chown=appuser:appuser . .

# Switch back to root to set permissions & install entrypoint
USER root

# copy and make your entrypoint executable

RUN chown -R appuser:www-data storage bootstrap/cache \
    && chmod -R ug+rwx storage bootstrap/cache

USER appuser

# Expose port 9000 for PHP-FPM
EXPOSE 9000

# rely on the entrypoint we installed above

CMD ["php-fpm"]--- END FILE: Dockerfile ---

--- START FILE: package.json ---
{
    "private": true,
    "type": "module",
    "scripts": {
        "build": "vite build",
        "dev": "vite"
    },
    "devDependencies": {
        "@tailwindcss/vite": "^4.0.0",
        "axios": "^1.8.2",
        "concurrently": "^9.0.1",
        "laravel-vite-plugin": "^1.2.0",
        "tailwindcss": "^4.0.0",
        "vite": "^6.2.4"
    }
}
--- END FILE: package.json ---

--- START FILE: phpstan.neon ---

includes:
    - ./vendor/larastan/larastan/extension.neon

parameters:
    paths:
        - app/
        # - routes/ # Uncomment if you want to analyze routes
        # - config/ # Uncomment if you want to analyze config files

    # Level 5 is a good balance between strictness and practicality for Laravel projects
    level: 5

    # Optional: Ignore specific errors if necessary (use sparingly)
    # ignoreErrors:
    #     - '#PHPDoc tag @var contains unknown class#'

    # Optional: Specify memory limit if needed for large projects
    # memoryLimit: 1G

    # Larastan specific configurations
    # larastan:
        # Optional: Specify database connection for schema analysis
        # database_connection: testing

        # Optional: Specify paths to check for model properties from factories
        # factory_paths:
        #     - database/factories
--- END FILE: phpstan.neon ---

--- START FILE: phpunit.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory>tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory>tests/Feature</directory>
        </testsuite>
    </testsuites>
    <source>
        <include>
            <directory>app</directory>
        </include>
    </source>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="APP_MAINTENANCE_DRIVER" value="file"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_STORE" value="array"/>
        <env name="DB_CONNECTION" value="pgsql"/>
        <env name="DB_HOST" value="127.0.0.1"/>
        <env name="DB_PORT" value="5433"/>
        <env name="DB_DATABASE" value="huberman_app_test"/>
        <env name="DB_USERNAME" value="huberman_user"/>
        <env name="DB_PASSWORD" value="secret"/>
        <env name="MAIL_MAILER" value="array"/>
        <env name="PULSE_ENABLED" value="false"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
    </php>
</phpunit>
--- END FILE: phpunit.xml ---

--- START FILE: pint.json ---
{
  "preset": "psr12"
}--- END FILE: pint.json ---

--- START FILE: psalm.xml ---
<?xml version="1.0"?>
<psalm
    errorLevel="4"
    resolveFromConfigFile="true"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="https://getpsalm.org/schema/config"
    xsi:schemaLocation="https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd"
    findUnusedBaselineEntry="true"
    findUnusedCode="true"
>
    <projectFiles>
        <directory name="app" />
        <directory name="database/factories" />
        <directory name="database/seeders" />
        <ignoreFiles>
            <directory name="vendor" />
        </ignoreFiles>
    </projectFiles>
</psalm>
--- END FILE: psalm.xml ---

--- START FILE: public/.htaccess ---
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Handle X-XSRF-Token Header
    RewriteCond %{HTTP:x-xsrf-token} .
    RewriteRule .* - [E=HTTP_X_XSRF_TOKEN:%{HTTP:X-XSRF-Token}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>
--- END FILE: public/.htaccess ---

--- OTHER FILE (inode/x-empty): public/favicon.ico ---

--- START FILE: public/index.php ---
<?php

use Illuminate\Foundation\Application;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

// Determine if the application is in maintenance mode...
if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

// Register the Composer autoloader...
require __DIR__.'/../vendor/autoload.php';

// Bootstrap Laravel and handle the request...
/** @var Application $app */
$app = require_once __DIR__.'/../bootstrap/app.php';

$app->handleRequest(Request::capture());
--- END FILE: public/index.php ---

--- START FILE: public/robots.txt ---
User-agent: *
Disallow:
--- END FILE: public/robots.txt ---

--- START FILE: README.md ---
<p align="center"><a href="https://laravel.com" target="_blank"><img src="https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg" width="400" alt="Laravel Logo"></a></p>

<p align="center">
<a href="https://github.com/laravel/framework/actions"><img src="https://github.com/laravel/framework/workflows/tests/badge.svg" alt="Build Status"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/dt/laravel/framework" alt="Total Downloads"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/v/laravel/framework" alt="Latest Stable Version"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/l/laravel/framework" alt="License"></a>
</p>

## About Laravel

Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

- [Simple, fast routing engine](https://laravel.com/docs/routing).
- [Powerful dependency injection container](https://laravel.com/docs/container).
- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
- [Robust background job processing](https://laravel.com/docs/queues).
- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).

Laravel is accessible, powerful, and provides tools required for large, robust applications.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

You may also try the [Laravel Bootcamp](https://bootcamp.laravel.com), where you will be guided through building a modern Laravel application from scratch.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains thousands of video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Laravel Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the [Laravel Partners program](https://partners.laravel.com).

### Premium Partners

- **[Vehikl](https://vehikl.com/)**
- **[Tighten Co.](https://tighten.co)**
- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
- **[64 Robots](https://64robots.com)**
- **[Curotec](https://www.curotec.com/services/technologies/laravel/)**
- **[DevSquad](https://devsquad.com/hire-laravel-developers)**
- **[Redberry](https://redberry.international/laravel-development/)**
- **[Active Logic](https://activelogic.com)**

## Contributing

Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).
--- END FILE: README.md ---

--- START FILE: resources/css/app.css ---
@import 'tailwindcss';

@source '../../vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php';
@source '../../storage/framework/views/*.php';
@source '../**/*.blade.php';
@source '../**/*.js';

@theme {
    --font-sans: 'Instrument Sans', ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
        'Segoe UI Symbol', 'Noto Color Emoji';
}
--- END FILE: resources/css/app.css ---

--- START FILE: resources/js/app.js ---
import './bootstrap';
--- END FILE: resources/js/app.js ---

--- START FILE: resources/js/bootstrap.js ---
import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
--- END FILE: resources/js/bootstrap.js ---

--- START FILE: resources/views/welcome.blade.php ---
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Laravel</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=instrument-sans:400,500,600" rel="stylesheet" />

        <!-- Styles / Scripts -->
        @if (file_exists(public_path('build/manifest.json')) || file_exists(public_path('hot')))
            @vite(['resources/css/app.css', 'resources/js/app.js'])
        @else
            <style>
                /*! tailwindcss v4.0.7 | MIT License | https://tailwindcss.com */@layer theme{:root,:host{--font-sans:'Instrument Sans',ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";--font-serif:ui-serif,Georgia,Cambria,"Times New Roman",Times,serif;--font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;--color-red-50:oklch(.971 .013 17.38);--color-red-100:oklch(.936 .032 17.717);--color-red-200:oklch(.885 .062 18.334);--color-red-300:oklch(.808 .114 19.571);--color-red-400:oklch(.704 .191 22.216);--color-red-500:oklch(.637 .237 25.331);--color-red-600:oklch(.577 .245 27.325);--color-red-700:oklch(.505 .213 27.518);--color-red-800:oklch(.444 .177 26.899);--color-red-900:oklch(.396 .141 25.723);--color-red-950:oklch(.258 .092 26.042);--color-orange-50:oklch(.98 .016 73.684);--color-orange-100:oklch(.954 .038 75.164);--color-orange-200:oklch(.901 .076 70.697);--color-orange-300:oklch(.837 .128 66.29);--color-orange-400:oklch(.75 .183 55.934);--color-orange-500:oklch(.705 .213 47.604);--color-orange-600:oklch(.646 .222 41.116);--color-orange-700:oklch(.553 .195 38.402);--color-orange-800:oklch(.47 .157 37.304);--color-orange-900:oklch(.408 .123 38.172);--color-orange-950:oklch(.266 .079 36.259);--color-amber-50:oklch(.987 .022 95.277);--color-amber-100:oklch(.962 .059 95.617);--color-amber-200:oklch(.924 .12 95.746);--color-amber-300:oklch(.879 .169 91.605);--color-amber-400:oklch(.828 .189 84.429);--color-amber-500:oklch(.769 .188 70.08);--color-amber-600:oklch(.666 .179 58.318);--color-amber-700:oklch(.555 .163 48.998);--color-amber-800:oklch(.473 .137 46.201);--color-amber-900:oklch(.414 .112 45.904);--color-amber-950:oklch(.279 .077 45.635);--color-yellow-50:oklch(.987 .026 102.212);--color-yellow-100:oklch(.973 .071 103.193);--color-yellow-200:oklch(.945 .129 101.54);--color-yellow-300:oklch(.905 .182 98.111);--color-yellow-400:oklch(.852 .199 91.936);--color-yellow-500:oklch(.795 .184 86.047);--color-yellow-600:oklch(.681 .162 75.834);--color-yellow-700:oklch(.554 .135 66.442);--color-yellow-800:oklch(.476 .114 61.907);--color-yellow-900:oklch(.421 .095 57.708);--color-yellow-950:oklch(.286 .066 53.813);--color-lime-50:oklch(.986 .031 120.757);--color-lime-100:oklch(.967 .067 122.328);--color-lime-200:oklch(.938 .127 124.321);--color-lime-300:oklch(.897 .196 126.665);--color-lime-400:oklch(.841 .238 128.85);--color-lime-500:oklch(.768 .233 130.85);--color-lime-600:oklch(.648 .2 131.684);--color-lime-700:oklch(.532 .157 131.589);--color-lime-800:oklch(.453 .124 130.933);--color-lime-900:oklch(.405 .101 131.063);--color-lime-950:oklch(.274 .072 132.109);--color-green-50:oklch(.982 .018 155.826);--color-green-100:oklch(.962 .044 156.743);--color-green-200:oklch(.925 .084 155.995);--color-green-300:oklch(.871 .15 154.449);--color-green-400:oklch(.792 .209 151.711);--color-green-500:oklch(.723 .219 149.579);--color-green-600:oklch(.627 .194 149.214);--color-green-700:oklch(.527 .154 150.069);--color-green-800:oklch(.448 .119 151.328);--color-green-900:oklch(.393 .095 152.535);--color-green-950:oklch(.266 .065 152.934);--color-emerald-50:oklch(.979 .021 166.113);--color-emerald-100:oklch(.95 .052 163.051);--color-emerald-200:oklch(.905 .093 164.15);--color-emerald-300:oklch(.845 .143 164.978);--color-emerald-400:oklch(.765 .177 163.223);--color-emerald-500:oklch(.696 .17 162.48);--color-emerald-600:oklch(.596 .145 163.225);--color-emerald-700:oklch(.508 .118 165.612);--color-emerald-800:oklch(.432 .095 166.913);--color-emerald-900:oklch(.378 .077 168.94);--color-emerald-950:oklch(.262 .051 172.552);--color-teal-50:oklch(.984 .014 180.72);--color-teal-100:oklch(.953 .051 180.801);--color-teal-200:oklch(.91 .096 180.426);--color-teal-300:oklch(.855 .138 181.071);--color-teal-400:oklch(.777 .152 181.912);--color-teal-500:oklch(.704 .14 182.503);--color-teal-600:oklch(.6 .118 184.704);--color-teal-700:oklch(.511 .096 186.391);--color-teal-800:oklch(.437 .078 188.216);--color-teal-900:oklch(.386 .063 188.416);--color-teal-950:oklch(.277 .046 192.524);--color-cyan-50:oklch(.984 .019 200.873);--color-cyan-100:oklch(.956 .045 203.388);--color-cyan-200:oklch(.917 .08 205.041);--color-cyan-300:oklch(.865 .127 207.078);--color-cyan-400:oklch(.789 .154 211.53);--color-cyan-500:oklch(.715 .143 215.221);--color-cyan-600:oklch(.609 .126 221.723);--color-cyan-700:oklch(.52 .105 223.128);--color-cyan-800:oklch(.45 .085 224.283);--color-cyan-900:oklch(.398 .07 227.392);--color-cyan-950:oklch(.302 .056 229.695);--color-sky-50:oklch(.977 .013 236.62);--color-sky-100:oklch(.951 .026 236.824);--color-sky-200:oklch(.901 .058 230.902);--color-sky-300:oklch(.828 .111 230.318);--color-sky-400:oklch(.746 .16 232.661);--color-sky-500:oklch(.685 .169 237.323);--color-sky-600:oklch(.588 .158 241.966);--color-sky-700:oklch(.5 .134 242.749);--color-sky-800:oklch(.443 .11 240.79);--color-sky-900:oklch(.391 .09 240.876);--color-sky-950:oklch(.293 .066 243.157);--color-blue-50:oklch(.97 .014 254.604);--color-blue-100:oklch(.932 .032 255.585);--color-blue-200:oklch(.882 .059 254.128);--color-blue-300:oklch(.809 .105 251.813);--color-blue-400:oklch(.707 .165 254.624);--color-blue-500:oklch(.623 .214 259.815);--color-blue-600:oklch(.546 .245 262.881);--color-blue-700:oklch(.488 .243 264.376);--color-blue-800:oklch(.424 .199 265.638);--color-blue-900:oklch(.379 .146 265.522);--color-blue-950:oklch(.282 .091 267.935);--color-indigo-50:oklch(.962 .018 272.314);--color-indigo-100:oklch(.93 .034 272.788);--color-indigo-200:oklch(.87 .065 274.039);--color-indigo-300:oklch(.785 .115 274.713);--color-indigo-400:oklch(.673 .182 276.935);--color-indigo-500:oklch(.585 .233 277.117);--color-indigo-600:oklch(.511 .262 276.966);--color-indigo-700:oklch(.457 .24 277.023);--color-indigo-800:oklch(.398 .195 277.366);--color-indigo-900:oklch(.359 .144 278.697);--color-indigo-950:oklch(.257 .09 281.288);--color-violet-50:oklch(.969 .016 293.756);--color-violet-100:oklch(.943 .029 294.588);--color-violet-200:oklch(.894 .057 293.283);--color-violet-300:oklch(.811 .111 293.571);--color-violet-400:oklch(.702 .183 293.541);--color-violet-500:oklch(.606 .25 292.717);--color-violet-600:oklch(.541 .281 293.009);--color-violet-700:oklch(.491 .27 292.581);--color-violet-800:oklch(.432 .232 292.759);--color-violet-900:oklch(.38 .189 293.745);--color-violet-950:oklch(.283 .141 291.089);--color-purple-50:oklch(.977 .014 308.299);--color-purple-100:oklch(.946 .033 307.174);--color-purple-200:oklch(.902 .063 306.703);--color-purple-300:oklch(.827 .119 306.383);--color-purple-400:oklch(.714 .203 305.504);--color-purple-500:oklch(.627 .265 303.9);--color-purple-600:oklch(.558 .288 302.321);--color-purple-700:oklch(.496 .265 301.924);--color-purple-800:oklch(.438 .218 303.724);--color-purple-900:oklch(.381 .176 304.987);--color-purple-950:oklch(.291 .149 302.717);--color-fuchsia-50:oklch(.977 .017 320.058);--color-fuchsia-100:oklch(.952 .037 318.852);--color-fuchsia-200:oklch(.903 .076 319.62);--color-fuchsia-300:oklch(.833 .145 321.434);--color-fuchsia-400:oklch(.74 .238 322.16);--color-fuchsia-500:oklch(.667 .295 322.15);--color-fuchsia-600:oklch(.591 .293 322.896);--color-fuchsia-700:oklch(.518 .253 323.949);--color-fuchsia-800:oklch(.452 .211 324.591);--color-fuchsia-900:oklch(.401 .17 325.612);--color-fuchsia-950:oklch(.293 .136 325.661);--color-pink-50:oklch(.971 .014 343.198);--color-pink-100:oklch(.948 .028 342.258);--color-pink-200:oklch(.899 .061 343.231);--color-pink-300:oklch(.823 .12 346.018);--color-pink-400:oklch(.718 .202 349.761);--color-pink-500:oklch(.656 .241 354.308);--color-pink-600:oklch(.592 .249 .584);--color-pink-700:oklch(.525 .223 3.958);--color-pink-800:oklch(.459 .187 3.815);--color-pink-900:oklch(.408 .153 2.432);--color-pink-950:oklch(.284 .109 3.907);--color-rose-50:oklch(.969 .015 12.422);--color-rose-100:oklch(.941 .03 12.58);--color-rose-200:oklch(.892 .058 10.001);--color-rose-300:oklch(.81 .117 11.638);--color-rose-400:oklch(.712 .194 13.428);--color-rose-500:oklch(.645 .246 16.439);--color-rose-600:oklch(.586 .253 17.585);--color-rose-700:oklch(.514 .222 16.935);--color-rose-800:oklch(.455 .188 13.697);--color-rose-900:oklch(.41 .159 10.272);--color-rose-950:oklch(.271 .105 12.094);--color-slate-50:oklch(.984 .003 247.858);--color-slate-100:oklch(.968 .007 247.896);--color-slate-200:oklch(.929 .013 255.508);--color-slate-300:oklch(.869 .022 252.894);--color-slate-400:oklch(.704 .04 256.788);--color-slate-500:oklch(.554 .046 257.417);--color-slate-600:oklch(.446 .043 257.281);--color-slate-700:oklch(.372 .044 257.287);--color-slate-800:oklch(.279 .041 260.031);--color-slate-900:oklch(.208 .042 265.755);--color-slate-950:oklch(.129 .042 264.695);--color-gray-50:oklch(.985 .002 247.839);--color-gray-100:oklch(.967 .003 264.542);--color-gray-200:oklch(.928 .006 264.531);--color-gray-300:oklch(.872 .01 258.338);--color-gray-400:oklch(.707 .022 261.325);--color-gray-500:oklch(.551 .027 264.364);--color-gray-600:oklch(.446 .03 256.802);--color-gray-700:oklch(.373 .034 259.733);--color-gray-800:oklch(.278 .033 256.848);--color-gray-900:oklch(.21 .034 264.665);--color-gray-950:oklch(.13 .028 261.692);--color-zinc-50:oklch(.985 0 0);--color-zinc-100:oklch(.967 .001 286.375);--color-zinc-200:oklch(.92 .004 286.32);--color-zinc-300:oklch(.871 .006 286.286);--color-zinc-400:oklch(.705 .015 286.067);--color-zinc-500:oklch(.552 .016 285.938);--color-zinc-600:oklch(.442 .017 285.786);--color-zinc-700:oklch(.37 .013 285.805);--color-zinc-800:oklch(.274 .006 286.033);--color-zinc-900:oklch(.21 .006 285.885);--color-zinc-950:oklch(.141 .005 285.823);--color-neutral-50:oklch(.985 0 0);--color-neutral-100:oklch(.97 0 0);--color-neutral-200:oklch(.922 0 0);--color-neutral-300:oklch(.87 0 0);--color-neutral-400:oklch(.708 0 0);--color-neutral-500:oklch(.556 0 0);--color-neutral-600:oklch(.439 0 0);--color-neutral-700:oklch(.371 0 0);--color-neutral-800:oklch(.269 0 0);--color-neutral-900:oklch(.205 0 0);--color-neutral-950:oklch(.145 0 0);--color-stone-50:oklch(.985 .001 106.423);--color-stone-100:oklch(.97 .001 106.424);--color-stone-200:oklch(.923 .003 48.717);--color-stone-300:oklch(.869 .005 56.366);--color-stone-400:oklch(.709 .01 56.259);--color-stone-500:oklch(.553 .013 58.071);--color-stone-600:oklch(.444 .011 73.639);--color-stone-700:oklch(.374 .01 67.558);--color-stone-800:oklch(.268 .007 34.298);--color-stone-900:oklch(.216 .006 56.043);--color-stone-950:oklch(.147 .004 49.25);--color-black:#000;--color-white:#fff;--spacing:.25rem;--breakpoint-sm:40rem;--breakpoint-md:48rem;--breakpoint-lg:64rem;--breakpoint-xl:80rem;--breakpoint-2xl:96rem;--container-3xs:16rem;--container-2xs:18rem;--container-xs:20rem;--container-sm:24rem;--container-md:28rem;--container-lg:32rem;--container-xl:36rem;--container-2xl:42rem;--container-3xl:48rem;--container-4xl:56rem;--container-5xl:64rem;--container-6xl:72rem;--container-7xl:80rem;--text-xs:.75rem;--text-xs--line-height:calc(1/.75);--text-sm:.875rem;--text-sm--line-height:calc(1.25/.875);--text-base:1rem;--text-base--line-height: 1.5 ;--text-lg:1.125rem;--text-lg--line-height:calc(1.75/1.125);--text-xl:1.25rem;--text-xl--line-height:calc(1.75/1.25);--text-2xl:1.5rem;--text-2xl--line-height:calc(2/1.5);--text-3xl:1.875rem;--text-3xl--line-height: 1.2 ;--text-4xl:2.25rem;--text-4xl--line-height:calc(2.5/2.25);--text-5xl:3rem;--text-5xl--line-height:1;--text-6xl:3.75rem;--text-6xl--line-height:1;--text-7xl:4.5rem;--text-7xl--line-height:1;--text-8xl:6rem;--text-8xl--line-height:1;--text-9xl:8rem;--text-9xl--line-height:1;--font-weight-thin:100;--font-weight-extralight:200;--font-weight-light:300;--font-weight-normal:400;--font-weight-medium:500;--font-weight-semibold:600;--font-weight-bold:700;--font-weight-extrabold:800;--font-weight-black:900;--tracking-tighter:-.05em;--tracking-tight:-.025em;--tracking-normal:0em;--tracking-wide:.025em;--tracking-wider:.05em;--tracking-widest:.1em;--leading-tight:1.25;--leading-snug:1.375;--leading-normal:1.5;--leading-relaxed:1.625;--leading-loose:2;--radius-xs:.125rem;--radius-sm:.25rem;--radius-md:.375rem;--radius-lg:.5rem;--radius-xl:.75rem;--radius-2xl:1rem;--radius-3xl:1.5rem;--radius-4xl:2rem;--shadow-2xs:0 1px #0000000d;--shadow-xs:0 1px 2px 0 #0000000d;--shadow-sm:0 1px 3px 0 #0000001a,0 1px 2px -1px #0000001a;--shadow-md:0 4px 6px -1px #0000001a,0 2px 4px -2px #0000001a;--shadow-lg:0 10px 15px -3px #0000001a,0 4px 6px -4px #0000001a;--shadow-xl:0 20px 25px -5px #0000001a,0 8px 10px -6px #0000001a;--shadow-2xl:0 25px 50px -12px #00000040;--inset-shadow-2xs:inset 0 1px #0000000d;--inset-shadow-xs:inset 0 1px 1px #0000000d;--inset-shadow-sm:inset 0 2px 4px #0000000d;--drop-shadow-xs:0 1px 1px #0000000d;--drop-shadow-sm:0 1px 2px #00000026;--drop-shadow-md:0 3px 3px #0000001f;--drop-shadow-lg:0 4px 4px #00000026;--drop-shadow-xl:0 9px 7px #0000001a;--drop-shadow-2xl:0 25px 25px #00000026;--ease-in:cubic-bezier(.4,0,1,1);--ease-out:cubic-bezier(0,0,.2,1);--ease-in-out:cubic-bezier(.4,0,.2,1);--animate-spin:spin 1s linear infinite;--animate-ping:ping 1s cubic-bezier(0,0,.2,1)infinite;--animate-pulse:pulse 2s cubic-bezier(.4,0,.6,1)infinite;--animate-bounce:bounce 1s infinite;--blur-xs:4px;--blur-sm:8px;--blur-md:12px;--blur-lg:16px;--blur-xl:24px;--blur-2xl:40px;--blur-3xl:64px;--perspective-dramatic:100px;--perspective-near:300px;--perspective-normal:500px;--perspective-midrange:800px;--perspective-distant:1200px;--aspect-video:16/9;--default-transition-duration:.15s;--default-transition-timing-function:cubic-bezier(.4,0,.2,1);--default-font-family:var(--font-sans);--default-font-feature-settings:var(--font-sans--font-feature-settings);--default-font-variation-settings:var(--font-sans--font-variation-settings);--default-mono-font-family:var(--font-mono);--default-mono-font-feature-settings:var(--font-mono--font-feature-settings);--default-mono-font-variation-settings:var(--font-mono--font-variation-settings)}}@layer base{*,:after,:before,::backdrop{box-sizing:border-box;border:0 solid;margin:0;padding:0}::file-selector-button{box-sizing:border-box;border:0 solid;margin:0;padding:0}html,:host{-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;line-height:1.5;font-family:var(--default-font-family,ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji");font-feature-settings:var(--default-font-feature-settings,normal);font-variation-settings:var(--default-font-variation-settings,normal);-webkit-tap-highlight-color:transparent}body{line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:var(--default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace);font-feature-settings:var(--default-mono-font-feature-settings,normal);font-variation-settings:var(--default-mono-font-variation-settings,normal);font-size:1em}small{font-size:80%}sub,sup{vertical-align:baseline;font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}:-moz-focusring{outline:auto}progress{vertical-align:baseline}summary{display:list-item}ol,ul,menu{list-style:none}img,svg,video,canvas,audio,iframe,embed,object{vertical-align:middle;display:block}img,video{max-width:100%;height:auto}button,input,select,optgroup,textarea{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}::file-selector-button{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}:where(select:is([multiple],[size])) optgroup{font-weight:bolder}:where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}::file-selector-button{margin-inline-end:4px}::placeholder{opacity:1;color:color-mix(in oklab,currentColor 50%,transparent)}textarea{resize:vertical}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}::-webkit-datetime-edit{display:inline-flex}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-datetime-edit{padding-block:0}::-webkit-datetime-edit-year-field{padding-block:0}::-webkit-datetime-edit-month-field{padding-block:0}::-webkit-datetime-edit-day-field{padding-block:0}::-webkit-datetime-edit-hour-field{padding-block:0}::-webkit-datetime-edit-minute-field{padding-block:0}::-webkit-datetime-edit-second-field{padding-block:0}::-webkit-datetime-edit-millisecond-field{padding-block:0}::-webkit-datetime-edit-meridiem-field{padding-block:0}:-moz-ui-invalid{box-shadow:none}button,input:where([type=button],[type=reset],[type=submit]){-webkit-appearance:button;-moz-appearance:button;appearance:button}::file-selector-button{-webkit-appearance:button;-moz-appearance:button;appearance:button}::-webkit-inner-spin-button{height:auto}::-webkit-outer-spin-button{height:auto}[hidden]:where(:not([hidden=until-found])){display:none!important}}@layer components;@layer utilities{.absolute{position:absolute}.relative{position:relative}.static{position:static}.inset-0{inset:calc(var(--spacing)*0)}.-mt-\[4\.9rem\]{margin-top:-4.9rem}.-mb-px{margin-bottom:-1px}.mb-1{margin-bottom:calc(var(--spacing)*1)}.mb-2{margin-bottom:calc(var(--spacing)*2)}.mb-4{margin-bottom:calc(var(--spacing)*4)}.mb-6{margin-bottom:calc(var(--spacing)*6)}.-ml-8{margin-left:calc(var(--spacing)*-8)}.flex{display:flex}.hidden{display:none}.inline-block{display:inline-block}.inline-flex{display:inline-flex}.table{display:table}.aspect-\[335\/376\]{aspect-ratio:335/376}.h-1{height:calc(var(--spacing)*1)}.h-1\.5{height:calc(var(--spacing)*1.5)}.h-2{height:calc(var(--spacing)*2)}.h-2\.5{height:calc(var(--spacing)*2.5)}.h-3{height:calc(var(--spacing)*3)}.h-3\.5{height:calc(var(--spacing)*3.5)}.h-14{height:calc(var(--spacing)*14)}.h-14\.5{height:calc(var(--spacing)*14.5)}.min-h-screen{min-height:100vh}.w-1{width:calc(var(--spacing)*1)}.w-1\.5{width:calc(var(--spacing)*1.5)}.w-2{width:calc(var(--spacing)*2)}.w-2\.5{width:calc(var(--spacing)*2.5)}.w-3{width:calc(var(--spacing)*3)}.w-3\.5{width:calc(var(--spacing)*3.5)}.w-\[448px\]{width:448px}.w-full{width:100%}.max-w-\[335px\]{max-width:335px}.max-w-none{max-width:none}.flex-1{flex:1}.shrink-0{flex-shrink:0}.translate-y-0{--tw-translate-y:calc(var(--spacing)*0);translate:var(--tw-translate-x)var(--tw-translate-y)}.transform{transform:var(--tw-rotate-x)var(--tw-rotate-y)var(--tw-rotate-z)var(--tw-skew-x)var(--tw-skew-y)}.flex-col{flex-direction:column}.flex-col-reverse{flex-direction:column-reverse}.items-center{align-items:center}.justify-center{justify-content:center}.justify-end{justify-content:flex-end}.gap-3{gap:calc(var(--spacing)*3)}.gap-4{gap:calc(var(--spacing)*4)}:where(.space-x-1>:not(:last-child)){--tw-space-x-reverse:0;margin-inline-start:calc(calc(var(--spacing)*1)*var(--tw-space-x-reverse));margin-inline-end:calc(calc(var(--spacing)*1)*calc(1 - var(--tw-space-x-reverse)))}.overflow-hidden{overflow:hidden}.rounded-full{border-radius:3.40282e38px}.rounded-sm{border-radius:var(--radius-sm)}.rounded-t-lg{border-top-left-radius:var(--radius-lg);border-top-right-radius:var(--radius-lg)}.rounded-br-lg{border-bottom-right-radius:var(--radius-lg)}.rounded-bl-lg{border-bottom-left-radius:var(--radius-lg)}.border{border-style:var(--tw-border-style);border-width:1px}.border-\[\#19140035\]{border-color:#19140035}.border-\[\#e3e3e0\]{border-color:#e3e3e0}.border-black{border-color:var(--color-black)}.border-transparent{border-color:#0000}.bg-\[\#1b1b18\]{background-color:#1b1b18}.bg-\[\#FDFDFC\]{background-color:#fdfdfc}.bg-\[\#dbdbd7\]{background-color:#dbdbd7}.bg-\[\#fff2f2\]{background-color:#fff2f2}.bg-white{background-color:var(--color-white)}.p-6{padding:calc(var(--spacing)*6)}.px-5{padding-inline:calc(var(--spacing)*5)}.py-1{padding-block:calc(var(--spacing)*1)}.py-1\.5{padding-block:calc(var(--spacing)*1.5)}.py-2{padding-block:calc(var(--spacing)*2)}.pb-12{padding-bottom:calc(var(--spacing)*12)}.text-sm{font-size:var(--text-sm);line-height:var(--tw-leading,var(--text-sm--line-height))}.text-\[13px\]{font-size:13px}.leading-\[20px\]{--tw-leading:20px;line-height:20px}.leading-normal{--tw-leading:var(--leading-normal);line-height:var(--leading-normal)}.font-medium{--tw-font-weight:var(--font-weight-medium);font-weight:var(--font-weight-medium)}.text-\[\#1b1b18\]{color:#1b1b18}.text-\[\#706f6c\]{color:#706f6c}.text-\[\#F53003\],.text-\[\#f53003\]{color:#f53003}.text-white{color:var(--color-white)}.underline{text-decoration-line:underline}.underline-offset-4{text-underline-offset:4px}.opacity-100{opacity:1}.shadow-\[0px_0px_1px_0px_rgba\(0\,0\,0\,0\.03\)\,0px_1px_2px_0px_rgba\(0\,0\,0\,0\.06\)\]{--tw-shadow:0px 0px 1px 0px var(--tw-shadow-color,#00000008),0px 1px 2px 0px var(--tw-shadow-color,#0000000f);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.shadow-\[inset_0px_0px_0px_1px_rgba\(26\,26\,0\,0\.16\)\]{--tw-shadow:inset 0px 0px 0px 1px var(--tw-shadow-color,#1a1a0029);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.\!filter{filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)!important}.filter{filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.transition-all{transition-property:all;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function));transition-duration:var(--tw-duration,var(--default-transition-duration))}.transition-opacity{transition-property:opacity;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function));transition-duration:var(--tw-duration,var(--default-transition-duration))}.delay-300{transition-delay:.3s}.duration-750{--tw-duration:.75s;transition-duration:.75s}.not-has-\[nav\]\:hidden:not(:has(:is(nav))){display:none}.before\:absolute:before{content:var(--tw-content);position:absolute}.before\:top-0:before{content:var(--tw-content);top:calc(var(--spacing)*0)}.before\:top-1\/2:before{content:var(--tw-content);top:50%}.before\:bottom-0:before{content:var(--tw-content);bottom:calc(var(--spacing)*0)}.before\:bottom-1\/2:before{content:var(--tw-content);bottom:50%}.before\:left-\[0\.4rem\]:before{content:var(--tw-content);left:.4rem}.before\:border-l:before{content:var(--tw-content);border-left-style:var(--tw-border-style);border-left-width:1px}.before\:border-\[\#e3e3e0\]:before{content:var(--tw-content);border-color:#e3e3e0}@media (hover:hover){.hover\:border-\[\#1915014a\]:hover{border-color:#1915014a}.hover\:border-\[\#19140035\]:hover{border-color:#19140035}.hover\:border-black:hover{border-color:var(--color-black)}.hover\:bg-black:hover{background-color:var(--color-black)}}@media (width>=64rem){.lg\:-mt-\[6\.6rem\]{margin-top:-6.6rem}.lg\:mb-0{margin-bottom:calc(var(--spacing)*0)}.lg\:mb-6{margin-bottom:calc(var(--spacing)*6)}.lg\:-ml-px{margin-left:-1px}.lg\:ml-0{margin-left:calc(var(--spacing)*0)}.lg\:block{display:block}.lg\:aspect-auto{aspect-ratio:auto}.lg\:w-\[438px\]{width:438px}.lg\:max-w-4xl{max-width:var(--container-4xl)}.lg\:grow{flex-grow:1}.lg\:flex-row{flex-direction:row}.lg\:justify-center{justify-content:center}.lg\:rounded-t-none{border-top-left-radius:0;border-top-right-radius:0}.lg\:rounded-tl-lg{border-top-left-radius:var(--radius-lg)}.lg\:rounded-r-lg{border-top-right-radius:var(--radius-lg);border-bottom-right-radius:var(--radius-lg)}.lg\:rounded-br-none{border-bottom-right-radius:0}.lg\:p-8{padding:calc(var(--spacing)*8)}.lg\:p-20{padding:calc(var(--spacing)*20)}}@media (prefers-color-scheme:dark){.dark\:block{display:block}.dark\:hidden{display:none}.dark\:border-\[\#3E3E3A\]{border-color:#3e3e3a}.dark\:border-\[\#eeeeec\]{border-color:#eeeeec}.dark\:bg-\[\#0a0a0a\]{background-color:#0a0a0a}.dark\:bg-\[\#1D0002\]{background-color:#1d0002}.dark\:bg-\[\#3E3E3A\]{background-color:#3e3e3a}.dark\:bg-\[\#161615\]{background-color:#161615}.dark\:bg-\[\#eeeeec\]{background-color:#eeeeec}.dark\:text-\[\#1C1C1A\]{color:#1c1c1a}.dark\:text-\[\#A1A09A\]{color:#a1a09a}.dark\:text-\[\#EDEDEC\]{color:#ededec}.dark\:text-\[\#F61500\]{color:#f61500}.dark\:text-\[\#FF4433\]{color:#f43}.dark\:shadow-\[inset_0px_0px_0px_1px_\#fffaed2d\]{--tw-shadow:inset 0px 0px 0px 1px var(--tw-shadow-color,#fffaed2d);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.dark\:before\:border-\[\#3E3E3A\]:before{content:var(--tw-content);border-color:#3e3e3a}@media (hover:hover){.dark\:hover\:border-\[\#3E3E3A\]:hover{border-color:#3e3e3a}.dark\:hover\:border-\[\#62605b\]:hover{border-color:#62605b}.dark\:hover\:border-white:hover{border-color:var(--color-white)}.dark\:hover\:bg-white:hover{background-color:var(--color-white)}}}@starting-style{.starting\:translate-y-4{--tw-translate-y:calc(var(--spacing)*4);translate:var(--tw-translate-x)var(--tw-translate-y)}}@starting-style{.starting\:translate-y-6{--tw-translate-y:calc(var(--spacing)*6);translate:var(--tw-translate-x)var(--tw-translate-y)}}@starting-style{.starting\:opacity-0{opacity:0}}}@keyframes spin{to{transform:rotate(360deg)}}@keyframes ping{75%,to{opacity:0;transform:scale(2)}}@keyframes pulse{50%{opacity:.5}}@keyframes bounce{0%,to{animation-timing-function:cubic-bezier(.8,0,1,1);transform:translateY(-25%)}50%{animation-timing-function:cubic-bezier(0,0,.2,1);transform:none}}@property --tw-translate-x{syntax:"*";inherits:false;initial-value:0}@property --tw-translate-y{syntax:"*";inherits:false;initial-value:0}@property --tw-translate-z{syntax:"*";inherits:false;initial-value:0}@property --tw-rotate-x{syntax:"*";inherits:false;initial-value:rotateX(0)}@property --tw-rotate-y{syntax:"*";inherits:false;initial-value:rotateY(0)}@property --tw-rotate-z{syntax:"*";inherits:false;initial-value:rotateZ(0)}@property --tw-skew-x{syntax:"*";inherits:false;initial-value:skewX(0)}@property --tw-skew-y{syntax:"*";inherits:false;initial-value:skewY(0)}@property --tw-space-x-reverse{syntax:"*";inherits:false;initial-value:0}@property --tw-border-style{syntax:"*";inherits:false;initial-value:solid}@property --tw-leading{syntax:"*";inherits:false}@property --tw-font-weight{syntax:"*";inherits:false}@property --tw-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-shadow-color{syntax:"*";inherits:false}@property --tw-inset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-shadow-color{syntax:"*";inherits:false}@property --tw-ring-color{syntax:"*";inherits:false}@property --tw-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-ring-color{syntax:"*";inherits:false}@property --tw-inset-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-ring-inset{syntax:"*";inherits:false}@property --tw-ring-offset-width{syntax:"<length>";inherits:false;initial-value:0}@property --tw-ring-offset-color{syntax:"*";inherits:false;initial-value:#fff}@property --tw-ring-offset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-blur{syntax:"*";inherits:false}@property --tw-brightness{syntax:"*";inherits:false}@property --tw-contrast{syntax:"*";inherits:false}@property --tw-grayscale{syntax:"*";inherits:false}@property --tw-hue-rotate{syntax:"*";inherits:false}@property --tw-invert{syntax:"*";inherits:false}@property --tw-opacity{syntax:"*";inherits:false}@property --tw-saturate{syntax:"*";inherits:false}@property --tw-sepia{syntax:"*";inherits:false}@property --tw-drop-shadow{syntax:"*";inherits:false}@property --tw-duration{syntax:"*";inherits:false}@property --tw-content{syntax:"*";inherits:false;initial-value:""}
            </style>
        @endif
    </head>
    <body class="bg-[#FDFDFC] dark:bg-[#0a0a0a] text-[#1b1b18] flex p-6 lg:p-8 items-center lg:justify-center min-h-screen flex-col">
        <header class="w-full lg:max-w-4xl max-w-[335px] text-sm mb-6 not-has-[nav]:hidden">
            @if (Route::has('login'))
                <nav class="flex items-center justify-end gap-4">
                    @auth
                        <a
                            href="{{ url('/dashboard') }}"
                            class="inline-block px-5 py-1.5 dark:text-[#EDEDEC] border-[#19140035] hover:border-[#1915014a] border text-[#1b1b18] dark:border-[#3E3E3A] dark:hover:border-[#62605b] rounded-sm text-sm leading-normal"
                        >
                            Dashboard
                        </a>
                    @else
                        <a
                            href="{{ route('login') }}"
                            class="inline-block px-5 py-1.5 dark:text-[#EDEDEC] text-[#1b1b18] border border-transparent hover:border-[#19140035] dark:hover:border-[#3E3E3A] rounded-sm text-sm leading-normal"
                        >
                            Log in
                        </a>

                        @if (Route::has('register'))
                            <a
                                href="{{ route('register') }}"
                                class="inline-block px-5 py-1.5 dark:text-[#EDEDEC] border-[#19140035] hover:border-[#1915014a] border text-[#1b1b18] dark:border-[#3E3E3A] dark:hover:border-[#62605b] rounded-sm text-sm leading-normal">
                                Register
                            </a>
                        @endif
                    @endauth
                </nav>
            @endif
        </header>
        <div class="flex items-center justify-center w-full transition-opacity opacity-100 duration-750 lg:grow starting:opacity-0">
            <main class="flex max-w-[335px] w-full flex-col-reverse lg:max-w-4xl lg:flex-row">
                <div class="text-[13px] leading-[20px] flex-1 p-6 pb-12 lg:p-20 bg-white dark:bg-[#161615] dark:text-[#EDEDEC] shadow-[inset_0px_0px_0px_1px_rgba(26,26,0,0.16)] dark:shadow-[inset_0px_0px_0px_1px_#fffaed2d] rounded-bl-lg rounded-br-lg lg:rounded-tl-lg lg:rounded-br-none">
                    <h1 class="mb-1 font-medium">Let's get started</h1>
                    <p class="mb-2 text-[#706f6c] dark:text-[#A1A09A]">Laravel has an incredibly rich ecosystem. <br>We suggest starting with the following.</p>
                    <ul class="flex flex-col mb-4 lg:mb-6">
                        <li class="flex items-center gap-4 py-2 relative before:border-l before:border-[#e3e3e0] dark:before:border-[#3E3E3A] before:top-1/2 before:bottom-0 before:left-[0.4rem] before:absolute">
                            <span class="relative py-1 bg-white dark:bg-[#161615]">
                                <span class="flex items-center justify-center rounded-full bg-[#FDFDFC] dark:bg-[#161615] shadow-[0px_0px_1px_0px_rgba(0,0,0,0.03),0px_1px_2px_0px_rgba(0,0,0,0.06)] w-3.5 h-3.5 border dark:border-[#3E3E3A] border-[#e3e3e0]">
                                    <span class="rounded-full bg-[#dbdbd7] dark:bg-[#3E3E3A] w-1.5 h-1.5"></span>
                                </span>
                            </span>
                            <span>
                                Read the
                                <a href="https://laravel.com/docs" target="_blank" class="inline-flex items-center space-x-1 font-medium underline underline-offset-4 text-[#f53003] dark:text-[#FF4433] ml-1">
                                    <span>Documentation</span>
                                    <svg
                                        width="10"
                                        height="11"
                                        viewBox="0 0 10 11"
                                        fill="none"
                                        xmlns="http://www.w3.org/2000/svg"
                                        class="w-2.5 h-2.5"
                                    >
                                        <path
                                            d="M7.70833 6.95834V2.79167H3.54167M2.5 8L7.5 3.00001"
                                            stroke="currentColor"
                                            stroke-linecap="square"
                                        />
                                    </svg>
                                </a>
                            </span>
                        </li>
                        <li class="flex items-center gap-4 py-2 relative before:border-l before:border-[#e3e3e0] dark:before:border-[#3E3E3A] before:bottom-1/2 before:top-0 before:left-[0.4rem] before:absolute">
                            <span class="relative py-1 bg-white dark:bg-[#161615]">
                                <span class="flex items-center justify-center rounded-full bg-[#FDFDFC] dark:bg-[#161615] shadow-[0px_0px_1px_0px_rgba(0,0,0,0.03),0px_1px_2px_0px_rgba(0,0,0,0.06)] w-3.5 h-3.5 border dark:border-[#3E3E3A] border-[#e3e3e0]">
                                    <span class="rounded-full bg-[#dbdbd7] dark:bg-[#3E3E3A] w-1.5 h-1.5"></span>
                                </span>
                            </span>
                            <span>
                                Watch video tutorials at
                                <a href="https://laracasts.com" target="_blank" class="inline-flex items-center space-x-1 font-medium underline underline-offset-4 text-[#f53003] dark:text-[#FF4433] ml-1">
                                    <span>Laracasts</span>
                                    <svg
                                        width="10"
                                        height="11"
                                        viewBox="0 0 10 11"
                                        fill="none"
                                        xmlns="http://www.w3.org/2000/svg"
                                        class="w-2.5 h-2.5"
                                    >
                                        <path
                                            d="M7.70833 6.95834V2.79167H3.54167M2.5 8L7.5 3.00001"
                                            stroke="currentColor"
                                            stroke-linecap="square"
                                        />
                                    </svg>
                                </a>
                            </span>
                        </li>
                    </ul>
                    <ul class="flex gap-3 text-sm leading-normal">
                        <li>
                            <a href="https://cloud.laravel.com" target="_blank" class="inline-block dark:bg-[#eeeeec] dark:border-[#eeeeec] dark:text-[#1C1C1A] dark:hover:bg-white dark:hover:border-white hover:bg-black hover:border-black px-5 py-1.5 bg-[#1b1b18] rounded-sm border border-black text-white text-sm leading-normal">
                                Deploy now
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="bg-[#fff2f2] dark:bg-[#1D0002] relative lg:-ml-px -mb-px lg:mb-0 rounded-t-lg lg:rounded-t-none lg:rounded-r-lg aspect-[335/376] lg:aspect-auto w-full lg:w-[438px] shrink-0 overflow-hidden">
                    {{-- Laravel Logo --}}
                    <svg class="w-full text-[#F53003] dark:text-[#F61500] transition-all translate-y-0 opacity-100 max-w-none duration-750 starting:opacity-0 starting:translate-y-6" viewBox="0 0 438 104" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M17.2036 -3H0V102.197H49.5189V86.7187H17.2036V-3Z" fill="currentColor" />
                        <path d="M110.256 41.6337C108.061 38.1275 104.945 35.3731 100.905 33.3681C96.8667 31.3647 92.8016 30.3618 88.7131 30.3618C83.4247 30.3618 78.5885 31.3389 74.201 33.2923C69.8111 35.2456 66.0474 37.928 62.9059 41.3333C59.7643 44.7401 57.3198 48.6726 55.5754 53.1293C53.8287 57.589 52.9572 62.274 52.9572 67.1813C52.9572 72.1925 53.8287 76.8995 55.5754 81.3069C57.3191 85.7173 59.7636 89.6241 62.9059 93.0293C66.0474 96.4361 69.8119 99.1155 74.201 101.069C78.5885 103.022 83.4247 103.999 88.7131 103.999C92.8016 103.999 96.8667 102.997 100.905 100.994C104.945 98.9911 108.061 96.2359 110.256 92.7282V102.195H126.563V32.1642H110.256V41.6337ZM108.76 75.7472C107.762 78.4531 106.366 80.8078 104.572 82.8112C102.776 84.8161 100.606 86.4183 98.0637 87.6206C95.5202 88.823 92.7004 89.4238 89.6103 89.4238C86.5178 89.4238 83.7252 88.823 81.2324 87.6206C78.7388 86.4183 76.5949 84.8161 74.7998 82.8112C73.004 80.8078 71.6319 78.4531 70.6856 75.7472C69.7356 73.0421 69.2644 70.1868 69.2644 67.1821C69.2644 64.1758 69.7356 61.3205 70.6856 58.6154C71.6319 55.9102 73.004 53.5571 74.7998 51.5522C76.5949 49.5495 78.738 47.9451 81.2324 46.7427C83.7252 45.5404 86.5178 44.9396 89.6103 44.9396C92.7012 44.9396 95.5202 45.5404 98.0637 46.7427C100.606 47.9451 102.776 49.5487 104.572 51.5522C106.367 53.5571 107.762 55.9102 108.76 58.6154C109.756 61.3205 110.256 64.1758 110.256 67.1821C110.256 70.1868 109.756 73.0421 108.76 75.7472Z" fill="currentColor" />
                        <path d="M242.805 41.6337C240.611 38.1275 237.494 35.3731 233.455 33.3681C229.416 31.3647 225.351 30.3618 221.262 30.3618C215.974 30.3618 211.138 31.3389 206.75 33.2923C202.36 35.2456 198.597 37.928 195.455 41.3333C192.314 44.7401 189.869 48.6726 188.125 53.1293C186.378 57.589 185.507 62.274 185.507 67.1813C185.507 72.1925 186.378 76.8995 188.125 81.3069C189.868 85.7173 192.313 89.6241 195.455 93.0293C198.597 96.4361 202.361 99.1155 206.75 101.069C211.138 103.022 215.974 103.999 221.262 103.999C225.351 103.999 229.416 102.997 233.455 100.994C237.494 98.9911 240.611 96.2359 242.805 92.7282V102.195H259.112V32.1642H242.805V41.6337ZM241.31 75.7472C240.312 78.4531 238.916 80.8078 237.122 82.8112C235.326 84.8161 233.156 86.4183 230.614 87.6206C228.07 88.823 225.251 89.4238 222.16 89.4238C219.068 89.4238 216.275 88.823 213.782 87.6206C211.289 86.4183 209.145 84.8161 207.35 82.8112C205.554 80.8078 204.182 78.4531 203.236 75.7472C202.286 73.0421 201.814 70.1868 201.814 67.1821C201.814 64.1758 202.286 61.3205 203.236 58.6154C204.182 55.9102 205.554 53.5571 207.35 51.5522C209.145 49.5495 211.288 47.9451 213.782 46.7427C216.275 45.5404 219.068 44.9396 222.16 44.9396C225.251 44.9396 228.07 45.5404 230.614 46.7427C233.156 47.9451 235.326 49.5487 237.122 51.5522C238.917 53.5571 240.312 55.9102 241.31 58.6154C242.306 61.3205 242.806 64.1758 242.806 67.1821C242.805 70.1868 242.305 73.0421 241.31 75.7472Z" fill="currentColor" />
                        <path d="M438 -3H421.694V102.197H438V-3Z" fill="currentColor" />
                        <path d="M139.43 102.197H155.735V48.2834H183.712V32.1665H139.43V102.197Z" fill="currentColor" />
                        <path d="M324.49 32.1665L303.995 85.794L283.498 32.1665H266.983L293.748 102.197H314.242L341.006 32.1665H324.49Z" fill="currentColor" />
                        <path d="M376.571 30.3656C356.603 30.3656 340.797 46.8497 340.797 67.1828C340.797 89.6597 356.094 104 378.661 104C391.29 104 399.354 99.1488 409.206 88.5848L398.189 80.0226C398.183 80.031 389.874 90.9895 377.468 90.9895C363.048 90.9895 356.977 79.3111 356.977 73.269H411.075C413.917 50.1328 398.775 30.3656 376.571 30.3656ZM357.02 61.0967C357.145 59.7487 359.023 43.3761 376.442 43.3761C393.861 43.3761 395.978 59.7464 396.099 61.0967H357.02Z" fill="currentColor" />
                    </svg>

                    {{-- Light Mode 12 SVG --}}
                    <svg class="w-[448px] max-w-none relative -mt-[4.9rem] -ml-8 lg:ml-0 lg:-mt-[6.6rem] dark:hidden" viewBox="0 0 440 376" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M188.263 355.73L188.595 355.73C195.441 348.845 205.766 339.761 219.569 328.477C232.93 317.193 242.978 308.205 249.714 301.511C256.34 294.626 260.867 287.358 263.296 279.708C265.725 272.058 264.565 264.121 259.816 255.896C254.516 246.716 247.062 239.352 237.454 233.805C227.957 228.067 217.908 225.198 207.307 225.198C196.927 225.197 190.136 227.97 186.934 233.516C183.621 238.872 184.726 246.331 190.247 255.894L125.647 255.891C116.371 239.825 112.395 225.481 113.72 212.858C115.265 200.235 121.559 190.481 132.602 183.596C143.754 176.52 158.607 172.982 177.159 172.983C196.594 172.984 215.863 176.523 234.968 183.6C253.961 190.486 271.299 200.241 286.98 212.864C302.661 225.488 315.14 239.833 324.416 255.899C333.03 270.817 336.841 283.918 335.847 295.203C335.075 306.487 331.376 316.336 324.75 324.751C318.346 333.167 308.408 343.494 294.936 355.734L377.094 355.737L405.917 405.656L217.087 405.649L188.263 355.73Z" fill="black" />
                            <path d="M9.11884 226.339L-13.7396 226.338L-42.7286 176.132L43.0733 176.135L175.595 405.649L112.651 405.647L9.11884 226.339Z" fill="black" />
                            <path d="M188.263 355.73L188.595 355.73C195.441 348.845 205.766 339.761 219.569 328.477C232.93 317.193 242.978 308.205 249.714 301.511C256.34 294.626 260.867 287.358 263.296 279.708C265.725 272.058 264.565 264.121 259.816 255.896C254.516 246.716 247.062 239.352 237.454 233.805C227.957 228.067 217.908 225.198 207.307 225.198C196.927 225.197 190.136 227.97 186.934 233.516C183.621 238.872 184.726 246.331 190.247 255.894L125.647 255.891C116.371 239.825 112.395 225.481 113.72 212.858C115.265 200.235 121.559 190.481 132.602 183.596C143.754 176.52 158.607 172.982 177.159 172.983C196.594 172.984 215.863 176.523 234.968 183.6C253.961 190.486 271.299 200.241 286.98 212.864C302.661 225.488 315.14 239.833 324.416 255.899C333.03 270.817 336.841 283.918 335.847 295.203C335.075 306.487 331.376 316.336 324.75 324.751C318.346 333.167 308.408 343.494 294.936 355.734L377.094 355.737L405.917 405.656L217.087 405.649L188.263 355.73Z" stroke="#1B1B18" stroke-width="1" />
                            <path d="M9.11884 226.339L-13.7396 226.338L-42.7286 176.132L43.0733 176.135L175.595 405.649L112.651 405.647L9.11884 226.339Z" stroke="#1B1B18" stroke-width="1" />
                            <path d="M204.592 327.449L204.923 327.449C211.769 320.564 222.094 311.479 235.897 300.196C249.258 288.912 259.306 279.923 266.042 273.23C272.668 266.345 277.195 259.077 279.624 251.427C282.053 243.777 280.893 235.839 276.145 227.615C270.844 218.435 263.39 211.071 253.782 205.524C244.285 199.786 234.236 196.917 223.635 196.916C213.255 196.916 206.464 199.689 203.262 205.235C199.949 210.59 201.054 218.049 206.575 227.612L141.975 227.61C132.699 211.544 128.723 197.2 130.048 184.577C131.593 171.954 137.887 162.2 148.93 155.315C160.083 148.239 174.935 144.701 193.487 144.702C212.922 144.703 232.192 148.242 251.296 155.319C270.289 162.205 287.627 171.96 303.308 184.583C318.989 197.207 331.468 211.552 340.745 227.618C349.358 242.536 353.169 255.637 352.175 266.921C351.403 278.205 347.704 288.055 341.078 296.47C334.674 304.885 324.736 315.213 311.264 327.453L393.422 327.456L422.246 377.375L233.415 377.368L204.592 327.449Z" fill="#F8B803" />
                            <path d="M25.447 198.058L2.58852 198.057L-26.4005 147.851L59.4015 147.854L191.923 377.368L128.979 377.365L25.447 198.058Z" fill="#F8B803" />
                            <path d="M204.592 327.449L204.923 327.449C211.769 320.564 222.094 311.479 235.897 300.196C249.258 288.912 259.306 279.923 266.042 273.23C272.668 266.345 277.195 259.077 279.624 251.427C282.053 243.777 280.893 235.839 276.145 227.615C270.844 218.435 263.39 211.071 253.782 205.524C244.285 199.786 234.236 196.917 223.635 196.916C213.255 196.916 206.464 199.689 203.262 205.235C199.949 210.59 201.054 218.049 206.575 227.612L141.975 227.61C132.699 211.544 128.723 197.2 130.048 184.577C131.593 171.954 137.887 162.2 148.93 155.315C160.083 148.239 174.935 144.701 193.487 144.702C212.922 144.703 232.192 148.242 251.296 155.319C270.289 162.205 287.627 171.96 303.308 184.583C318.989 197.207 331.468 211.552 340.745 227.618C349.358 242.536 353.169 255.637 352.175 266.921C351.403 278.205 347.704 288.055 341.078 296.47C334.674 304.885 324.736 315.213 311.264 327.453L393.422 327.456L422.246 377.375L233.415 377.368L204.592 327.449Z" stroke="#1B1B18" stroke-width="1" />
                            <path d="M25.447 198.058L2.58852 198.057L-26.4005 147.851L59.4015 147.854L191.923 377.368L128.979 377.365L25.447 198.058Z" stroke="#1B1B18" stroke-width="1" />
                        </g>
                        <g style="mix-blend-mode: hard-light" class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M217.342 305.363L217.673 305.363C224.519 298.478 234.844 289.393 248.647 278.11C262.008 266.826 272.056 257.837 278.792 251.144C285.418 244.259 289.945 236.991 292.374 229.341C294.803 221.691 293.643 213.753 288.895 205.529C283.594 196.349 276.14 188.985 266.532 183.438C257.035 177.7 246.986 174.831 236.385 174.83C226.005 174.83 219.214 177.603 216.012 183.149C212.699 188.504 213.804 195.963 219.325 205.527L154.725 205.524C145.449 189.458 141.473 175.114 142.798 162.491C144.343 149.868 150.637 140.114 161.68 133.229C172.833 126.153 187.685 122.615 206.237 122.616C225.672 122.617 244.942 126.156 264.046 133.233C283.039 140.119 300.377 149.874 316.058 162.497C331.739 175.121 344.218 189.466 353.495 205.532C362.108 220.45 365.919 233.551 364.925 244.835C364.153 256.12 360.454 265.969 353.828 274.384C347.424 282.799 337.486 293.127 324.014 305.367L406.172 305.37L434.996 355.289L246.165 355.282L217.342 305.363Z" fill="#F0ACB8" />
                            <path d="M38.197 175.972L15.3385 175.971L-13.6505 125.765L72.1515 125.768L204.673 355.282L141.729 355.279L38.197 175.972Z" fill="#F0ACB8" />
                            <path d="M217.342 305.363L217.673 305.363C224.519 298.478 234.844 289.393 248.647 278.11C262.008 266.826 272.056 257.837 278.792 251.144C285.418 244.259 289.945 236.991 292.374 229.341C294.803 221.691 293.643 213.753 288.895 205.529C283.594 196.349 276.14 188.985 266.532 183.438C257.035 177.7 246.986 174.831 236.385 174.83C226.005 174.83 219.214 177.603 216.012 183.149C212.699 188.504 213.804 195.963 219.325 205.527L154.725 205.524C145.449 189.458 141.473 175.114 142.798 162.491C144.343 149.868 150.637 140.114 161.68 133.229C172.833 126.153 187.685 122.615 206.237 122.616C225.672 122.617 244.942 126.156 264.046 133.233C283.039 140.119 300.377 149.874 316.058 162.497C331.739 175.121 344.218 189.466 353.495 205.532C362.108 220.45 365.919 233.551 364.925 244.835C364.153 256.12 360.454 265.969 353.828 274.384C347.424 282.799 337.486 293.127 324.014 305.367L406.172 305.37L434.996 355.289L246.165 355.282L217.342 305.363Z" stroke="#1B1B18" stroke-width="1" />
                            <path d="M38.197 175.972L15.3385 175.971L-13.6505 125.765L72.1515 125.768L204.673 355.282L141.729 355.279L38.197 175.972Z" stroke="#1B1B18" stroke-width="1" />
                        </g>
                        <g style="mix-blend-mode: plus-darker" class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M230.951 281.792L231.282 281.793C238.128 274.907 248.453 265.823 262.256 254.539C275.617 243.256 285.666 234.267 292.402 227.573C299.027 220.688 303.554 213.421 305.983 205.771C308.412 198.12 307.253 190.183 302.504 181.959C297.203 172.778 289.749 165.415 280.142 159.868C270.645 154.13 260.596 151.26 249.995 151.26C239.615 151.26 232.823 154.033 229.621 159.579C226.309 164.934 227.413 172.393 232.935 181.956L168.335 181.954C159.058 165.888 155.082 151.543 156.407 138.92C157.953 126.298 164.247 116.544 175.289 109.659C186.442 102.583 201.294 99.045 219.846 99.0457C239.281 99.0464 258.551 102.585 277.655 109.663C296.649 116.549 313.986 126.303 329.667 138.927C345.349 151.551 357.827 165.895 367.104 181.961C375.718 196.88 379.528 209.981 378.535 221.265C377.762 232.549 374.063 242.399 367.438 250.814C361.033 259.229 351.095 269.557 337.624 281.796L419.782 281.8L448.605 331.719L259.774 331.712L230.951 281.792Z" fill="#F3BEC7" />
                            <path d="M51.8063 152.402L28.9479 152.401L-0.0411453 102.195L85.7608 102.198L218.282 331.711L155.339 331.709L51.8063 152.402Z" fill="#F3BEC7" />
                            <path d="M230.951 281.792L231.282 281.793C238.128 274.907 248.453 265.823 262.256 254.539C275.617 243.256 285.666 234.267 292.402 227.573C299.027 220.688 303.554 213.421 305.983 205.771C308.412 198.12 307.253 190.183 302.504 181.959C297.203 172.778 289.749 165.415 280.142 159.868C270.645 154.13 260.596 151.26 249.995 151.26C239.615 151.26 232.823 154.033 229.621 159.579C226.309 164.934 227.413 172.393 232.935 181.956L168.335 181.954C159.058 165.888 155.082 151.543 156.407 138.92C157.953 126.298 164.247 116.544 175.289 109.659C186.442 102.583 201.294 99.045 219.846 99.0457C239.281 99.0464 258.551 102.585 277.655 109.663C296.649 116.549 313.986 126.303 329.667 138.927C345.349 151.551 357.827 165.895 367.104 181.961C375.718 196.88 379.528 209.981 378.535 221.265C377.762 232.549 374.063 242.399 367.438 250.814C361.033 259.229 351.095 269.557 337.624 281.796L419.782 281.8L448.605 331.719L259.774 331.712L230.951 281.792Z" stroke="#1B1B18" stroke-width="1" />
                            <path d="M51.8063 152.402L28.9479 152.401L-0.0411453 102.195L85.7608 102.198L218.282 331.711L155.339 331.709L51.8063 152.402Z" stroke="#1B1B18" stroke-width="1" />
                        </g>
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M188.467 355.363L188.798 355.363C195.644 348.478 205.969 339.393 219.772 328.11C233.133 316.826 243.181 307.837 249.917 301.144C253.696 297.217 256.792 293.166 259.205 288.991C261.024 285.845 262.455 282.628 263.499 279.341C265.928 271.691 264.768 263.753 260.02 255.529C254.719 246.349 247.265 238.985 237.657 233.438C228.16 227.7 218.111 224.831 207.51 224.83C197.13 224.83 190.339 227.603 187.137 233.149C183.824 238.504 184.929 245.963 190.45 255.527L125.851 255.524C116.574 239.458 112.598 225.114 113.923 212.491C114.615 206.836 116.261 201.756 118.859 197.253C122.061 191.704 126.709 187.03 132.805 183.229C143.958 176.153 158.81 172.615 177.362 172.616C196.797 172.617 216.067 176.156 235.171 183.233C254.164 190.119 271.502 199.874 287.183 212.497C302.864 225.121 315.343 239.466 324.62 255.532C333.233 270.45 337.044 283.551 336.05 294.835C335.46 303.459 333.16 311.245 329.151 318.194C327.915 320.337 326.515 322.4 324.953 324.384C318.549 332.799 308.611 343.127 295.139 355.367L377.297 355.37L406.121 405.289L217.29 405.282L188.467 355.363Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M9.32197 225.972L-13.5365 225.971L-42.5255 175.765L43.2765 175.768L175.798 405.282L112.854 405.279L9.32197 225.972Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M345.247 111.915C329.566 99.2919 312.229 89.5371 293.235 82.6512L235.167 183.228C254.161 190.114 271.498 199.869 287.179 212.492L345.247 111.915Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M382.686 154.964C373.41 138.898 360.931 124.553 345.25 111.93L287.182 212.506C302.863 225.13 315.342 239.475 324.618 255.541L382.686 154.964Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M293.243 82.6472C274.139 75.57 254.869 72.031 235.434 72.0303L177.366 172.607C196.801 172.608 216.071 176.147 235.175 183.224L293.243 82.6472Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M394.118 194.257C395.112 182.973 391.301 169.872 382.688 154.953L324.619 255.53C333.233 270.448 337.044 283.55 336.05 294.834L394.118 194.257Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M235.432 72.0311C216.88 72.0304 202.027 75.5681 190.875 82.6442L132.806 183.221C143.959 176.145 158.812 172.607 177.363 172.608L235.432 72.0311Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M265.59 124.25C276.191 124.251 286.24 127.12 295.737 132.858L237.669 233.435C228.172 227.697 218.123 224.828 207.522 224.827L265.59 124.25Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M295.719 132.859C305.326 138.406 312.78 145.77 318.081 154.95L260.013 255.527C254.712 246.347 247.258 238.983 237.651 233.436L295.719 132.859Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M387.218 217.608C391.227 210.66 393.527 202.874 394.117 194.25L336.049 294.827C335.459 303.451 333.159 311.237 329.15 318.185L387.218 217.608Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M245.211 132.577C248.413 127.03 255.204 124.257 265.584 124.258L207.516 224.835C197.136 224.834 190.345 227.607 187.143 233.154L245.211 132.577Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M318.094 154.945C322.842 163.17 324.002 171.107 321.573 178.757L263.505 279.334C265.934 271.684 264.774 263.746 260.026 255.522L318.094 154.945Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M176.925 96.6737C180.127 91.1249 184.776 86.4503 190.871 82.6499L132.803 183.227C126.708 187.027 122.059 191.702 118.857 197.25L176.925 96.6737Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M387.226 217.606C385.989 219.749 384.59 221.813 383.028 223.797L324.96 324.373C326.522 322.39 327.921 320.326 329.157 318.183L387.226 217.606Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M317.269 188.408C319.087 185.262 320.519 182.045 321.562 178.758L263.494 279.335C262.451 282.622 261.019 285.839 259.201 288.985L317.269 188.408Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M245.208 132.573C241.895 137.928 243 145.387 248.522 154.95L190.454 255.527C184.932 245.964 183.827 238.505 187.14 233.15L245.208 132.573Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M176.93 96.6719C174.331 101.175 172.686 106.255 171.993 111.91L113.925 212.487C114.618 206.831 116.263 201.752 118.862 197.249L176.93 96.6719Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M317.266 188.413C314.853 192.589 311.757 196.64 307.978 200.566L249.91 301.143C253.689 297.216 256.785 293.166 259.198 288.99L317.266 188.413Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M464.198 304.708L435.375 254.789L377.307 355.366L406.13 405.285L464.198 304.708Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M353.209 254.787C366.68 242.548 376.618 232.22 383.023 223.805L324.955 324.382C318.55 332.797 308.612 343.124 295.141 355.364L353.209 254.787Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M435.37 254.787L353.212 254.784L295.144 355.361L377.302 355.364L435.37 254.787Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M183.921 154.947L248.521 154.95L190.453 255.527L125.853 255.524L183.921 154.947Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M171.992 111.914C170.668 124.537 174.643 138.881 183.92 154.947L125.852 255.524C116.575 239.458 112.599 225.114 113.924 212.491L171.992 111.914Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M307.987 200.562C301.251 207.256 291.203 216.244 277.842 227.528L219.774 328.105C233.135 316.821 243.183 307.832 249.919 301.139L307.987 200.562Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M15.5469 75.1797L44.5359 125.386L-13.5321 225.963L-42.5212 175.756L15.5469 75.1797Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M277.836 227.536C264.033 238.82 253.708 247.904 246.862 254.789L188.794 355.366C195.64 348.481 205.965 339.397 219.768 328.113L277.836 227.536Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M275.358 304.706L464.189 304.713L406.12 405.29L217.29 405.283L275.358 304.706Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M44.5279 125.39L67.3864 125.39L9.31834 225.967L-13.5401 225.966L44.5279 125.39Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M101.341 75.1911L233.863 304.705L175.795 405.282L43.2733 175.768L101.341 75.1911ZM15.5431 75.19L-42.525 175.767L43.277 175.77L101.345 75.1932L15.5431 75.19Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M246.866 254.784L246.534 254.784L188.466 355.361L188.798 355.361L246.866 254.784Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M246.539 254.781L275.362 304.701L217.294 405.277L188.471 355.358L246.539 254.781Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M67.3906 125.391L170.923 304.698L112.855 405.275L9.32257 225.967L67.3906 125.391Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                            <path d="M170.921 304.699L233.865 304.701L175.797 405.278L112.853 405.276L170.921 304.699Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="bevel" />
                        </g>
                        <g style="mix-blend-mode: hard-light" class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M246.544 254.79L246.875 254.79C253.722 247.905 264.046 238.82 277.849 227.537C291.21 216.253 301.259 207.264 307.995 200.57C314.62 193.685 319.147 186.418 321.577 178.768C324.006 171.117 322.846 163.18 318.097 154.956C312.796 145.775 305.342 138.412 295.735 132.865C286.238 127.127 276.189 124.258 265.588 124.257C255.208 124.257 248.416 127.03 245.214 132.576C241.902 137.931 243.006 145.39 248.528 154.953L183.928 154.951C174.652 138.885 170.676 124.541 172 111.918C173.546 99.2946 179.84 89.5408 190.882 82.6559C202.035 75.5798 216.887 72.0421 235.439 72.0428C254.874 72.0435 274.144 75.5825 293.248 82.6598C312.242 89.5457 329.579 99.3005 345.261 111.924C360.942 124.548 373.421 138.892 382.697 154.958C391.311 169.877 395.121 182.978 394.128 194.262C393.355 205.546 389.656 215.396 383.031 223.811C376.627 232.226 366.688 242.554 353.217 254.794L435.375 254.797L464.198 304.716L275.367 304.709L246.544 254.79Z" fill="#F0ACB8" />
                            <path d="M246.544 254.79L246.875 254.79C253.722 247.905 264.046 238.82 277.849 227.537C291.21 216.253 301.259 207.264 307.995 200.57C314.62 193.685 319.147 186.418 321.577 178.768C324.006 171.117 322.846 163.18 318.097 154.956C312.796 145.775 305.342 138.412 295.735 132.865C286.238 127.127 276.189 124.258 265.588 124.257C255.208 124.257 248.416 127.03 245.214 132.576C241.902 137.931 243.006 145.39 248.528 154.953L183.928 154.951C174.652 138.885 170.676 124.541 172 111.918C173.546 99.2946 179.84 89.5408 190.882 82.6559C202.035 75.5798 216.887 72.0421 235.439 72.0428C254.874 72.0435 274.144 75.5825 293.248 82.6598C312.242 89.5457 329.579 99.3005 345.261 111.924C360.942 124.548 373.421 138.892 382.697 154.958C391.311 169.877 395.121 182.978 394.128 194.262C393.355 205.546 389.656 215.396 383.031 223.811C376.627 232.226 366.688 242.554 353.217 254.794L435.375 254.797L464.198 304.716L275.367 304.709L246.544 254.79Z" stroke="#1B1B18" stroke-width="1" stroke-linejoin="round" />
                        </g>
                        <g style="mix-blend-mode: hard-light" class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M67.41 125.402L44.5515 125.401L15.5625 75.1953L101.364 75.1985L233.886 304.712L170.942 304.71L67.41 125.402Z" fill="#F0ACB8" />
                            <path d="M67.41 125.402L44.5515 125.401L15.5625 75.1953L101.364 75.1985L233.886 304.712L170.942 304.71L67.41 125.402Z" stroke="#1B1B18" stroke-width="1" />
                        </g>
                    </svg>

                    {{-- Dark Mode 12 SVG --}}
                    <svg class="w-[448px] max-w-none relative -mt-[4.9rem] -ml-8 lg:ml-0 lg:-mt-[6.6rem] hidden dark:block" viewBox="0 0 440 376" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M188.263 355.73L188.595 355.73C195.441 348.845 205.766 339.761 219.569 328.477C232.93 317.193 242.978 308.205 249.714 301.511C256.34 294.626 260.867 287.358 263.296 279.708C265.725 272.058 264.565 264.121 259.816 255.896C254.516 246.716 247.062 239.352 237.454 233.805C227.957 228.067 217.908 225.198 207.307 225.198C196.927 225.197 190.136 227.97 186.934 233.516C183.621 238.872 184.726 246.331 190.247 255.894L125.647 255.891C116.371 239.825 112.395 225.481 113.72 212.858C115.265 200.235 121.559 190.481 132.602 183.596C143.754 176.52 158.607 172.982 177.159 172.983C196.594 172.984 215.863 176.523 234.968 183.6C253.961 190.486 271.299 200.241 286.98 212.864C302.661 225.488 315.14 239.833 324.416 255.899C333.03 270.817 336.841 283.918 335.847 295.203C335.075 306.487 331.376 316.336 324.75 324.751C318.346 333.167 308.408 343.494 294.936 355.734L377.094 355.737L405.917 405.656L217.087 405.649L188.263 355.73Z" fill="black"/>
                            <path d="M9.11884 226.339L-13.7396 226.338L-42.7286 176.132L43.0733 176.135L175.595 405.649L112.651 405.647L9.11884 226.339Z" fill="black"/>
                            <path d="M188.263 355.73L188.595 355.73C195.441 348.845 205.766 339.761 219.569 328.477C232.93 317.193 242.978 308.205 249.714 301.511C256.34 294.626 260.867 287.358 263.296 279.708C265.725 272.058 264.565 264.121 259.816 255.896C254.516 246.716 247.062 239.352 237.454 233.805C227.957 228.067 217.908 225.198 207.307 225.198C196.927 225.197 190.136 227.97 186.934 233.516C183.621 238.872 184.726 246.331 190.247 255.894L125.647 255.891C116.371 239.825 112.395 225.481 113.72 212.858C115.265 200.235 121.559 190.481 132.602 183.596C143.754 176.52 158.607 172.982 177.159 172.983C196.594 172.984 215.863 176.523 234.968 183.6C253.961 190.486 271.299 200.241 286.98 212.864C302.661 225.488 315.14 239.833 324.416 255.899C333.03 270.817 336.841 283.918 335.847 295.203C335.075 306.487 331.376 316.336 324.75 324.751C318.346 333.167 308.408 343.494 294.936 355.734L377.094 355.737L405.917 405.656L217.087 405.649L188.263 355.73Z" stroke="#FF750F" stroke-width="1"/>
                            <path d="M9.11884 226.339L-13.7396 226.338L-42.7286 176.132L43.0733 176.135L175.595 405.649L112.651 405.647L9.11884 226.339Z" stroke="#FF750F" stroke-width="1"/>
                            <path d="M204.592 327.449L204.923 327.449C211.769 320.564 222.094 311.479 235.897 300.196C249.258 288.912 259.306 279.923 266.042 273.23C272.668 266.345 277.195 259.077 279.624 251.427C282.053 243.777 280.893 235.839 276.145 227.615C270.844 218.435 263.39 211.071 253.782 205.524C244.285 199.786 234.236 196.917 223.635 196.916C213.255 196.916 206.464 199.689 203.262 205.235C199.949 210.59 201.054 218.049 206.575 227.612L141.975 227.61C132.699 211.544 128.723 197.2 130.048 184.577C131.593 171.954 137.887 162.2 148.93 155.315C160.083 148.239 174.935 144.701 193.487 144.702C212.922 144.703 232.192 148.242 251.296 155.319C270.289 162.205 287.627 171.96 303.308 184.583C318.989 197.207 331.468 211.552 340.745 227.618C349.358 242.536 353.169 255.637 352.175 266.921C351.403 278.205 347.704 288.055 341.078 296.47C334.674 304.885 324.736 315.213 311.264 327.453L393.422 327.456L422.246 377.375L233.415 377.368L204.592 327.449Z" fill="#391800"/>
                            <path d="M25.447 198.058L2.58852 198.057L-26.4005 147.851L59.4015 147.854L191.923 377.368L128.979 377.365L25.447 198.058Z" fill="#391800"/>
                            <path d="M204.592 327.449L204.923 327.449C211.769 320.564 222.094 311.479 235.897 300.196C249.258 288.912 259.306 279.923 266.042 273.23C272.668 266.345 277.195 259.077 279.624 251.427C282.053 243.777 280.893 235.839 276.145 227.615C270.844 218.435 263.39 211.071 253.782 205.524C244.285 199.786 234.236 196.917 223.635 196.916C213.255 196.916 206.464 199.689 203.262 205.235C199.949 210.59 201.054 218.049 206.575 227.612L141.975 227.61C132.699 211.544 128.723 197.2 130.048 184.577C131.593 171.954 137.887 162.2 148.93 155.315C160.083 148.239 174.935 144.701 193.487 144.702C212.922 144.703 232.192 148.242 251.296 155.319C270.289 162.205 287.627 171.96 303.308 184.583C318.989 197.207 331.468 211.552 340.745 227.618C349.358 242.536 353.169 255.637 352.175 266.921C351.403 278.205 347.704 288.055 341.078 296.47C334.674 304.885 324.736 315.213 311.264 327.453L393.422 327.456L422.246 377.375L233.415 377.368L204.592 327.449Z" stroke="#FF750F" stroke-width="1"/>
                            <path d="M25.447 198.058L2.58852 198.057L-26.4005 147.851L59.4015 147.854L191.923 377.368L128.979 377.365L25.447 198.058Z" stroke="#FF750F" stroke-width="1"/>
                        </g>
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4" style="mix-blend-mode:hard-light">
                            <path d="M217.342 305.363L217.673 305.363C224.519 298.478 234.844 289.393 248.647 278.11C262.008 266.826 272.056 257.837 278.792 251.144C285.418 244.259 289.945 236.991 292.374 229.341C294.803 221.691 293.643 213.753 288.895 205.529C283.594 196.349 276.14 188.985 266.532 183.438C257.035 177.7 246.986 174.831 236.385 174.83C226.005 174.83 219.214 177.603 216.012 183.149C212.699 188.504 213.804 195.963 219.325 205.527L154.725 205.524C145.449 189.458 141.473 175.114 142.798 162.491C144.343 149.868 150.637 140.114 161.68 133.229C172.833 126.153 187.685 122.615 206.237 122.616C225.672 122.617 244.942 126.156 264.046 133.233C283.039 140.119 300.377 149.874 316.058 162.497C331.739 175.121 344.218 189.466 353.495 205.532C362.108 220.45 365.919 233.551 364.925 244.835C364.153 256.12 360.454 265.969 353.828 274.384C347.424 282.799 337.486 293.127 324.014 305.367L406.172 305.37L434.996 355.289L246.165 355.282L217.342 305.363Z" fill="#733000"/>
                            <path d="M38.197 175.972L15.3385 175.971L-13.6505 125.765L72.1515 125.768L204.673 355.282L141.729 355.279L38.197 175.972Z" fill="#733000"/>
                            <path d="M217.342 305.363L217.673 305.363C224.519 298.478 234.844 289.393 248.647 278.11C262.008 266.826 272.056 257.837 278.792 251.144C285.418 244.259 289.945 236.991 292.374 229.341C294.803 221.691 293.643 213.753 288.895 205.529C283.594 196.349 276.14 188.985 266.532 183.438C257.035 177.7 246.986 174.831 236.385 174.83C226.005 174.83 219.214 177.603 216.012 183.149C212.699 188.504 213.804 195.963 219.325 205.527L154.725 205.524C145.449 189.458 141.473 175.114 142.798 162.491C144.343 149.868 150.637 140.114 161.68 133.229C172.833 126.153 187.685 122.615 206.237 122.616C225.672 122.617 244.942 126.156 264.046 133.233C283.039 140.119 300.377 149.874 316.058 162.497C331.739 175.121 344.218 189.466 353.495 205.532C362.108 220.45 365.919 233.551 364.925 244.835C364.153 256.12 360.454 265.969 353.828 274.384C347.424 282.799 337.486 293.127 324.014 305.367L406.172 305.37L434.996 355.289L246.165 355.282L217.342 305.363Z" stroke="#FF750F" stroke-width="1"/>
                            <path d="M38.197 175.972L15.3385 175.971L-13.6505 125.765L72.1515 125.768L204.673 355.282L141.729 355.279L38.197 175.972Z" stroke="#FF750F" stroke-width="1"/>
                        </g>
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M217.342 305.363L217.673 305.363C224.519 298.478 234.844 289.393 248.647 278.11C262.008 266.826 272.056 257.837 278.792 251.144C285.418 244.259 289.945 236.991 292.374 229.341C294.803 221.691 293.643 213.753 288.895 205.529C283.594 196.349 276.14 188.985 266.532 183.438C257.035 177.7 246.986 174.831 236.385 174.83C226.005 174.83 219.214 177.603 216.012 183.149C212.699 188.504 213.804 195.963 219.325 205.527L154.726 205.524C145.449 189.458 141.473 175.114 142.798 162.491C144.343 149.868 150.637 140.114 161.68 133.229C172.833 126.153 187.685 122.615 206.237 122.616C225.672 122.617 244.942 126.156 264.046 133.233C283.039 140.119 300.377 149.874 316.058 162.497C331.739 175.121 344.218 189.466 353.495 205.532C362.108 220.45 365.919 233.551 364.925 244.835C364.153 256.12 360.454 265.969 353.828 274.384C347.424 282.799 337.486 293.127 324.014 305.367L406.172 305.37L434.996 355.289L246.165 355.282L217.342 305.363Z" stroke="#FF750F" stroke-width="1"/>
                            <path d="M38.197 175.972L15.3385 175.971L-13.6505 125.765L72.1515 125.768L204.673 355.282L141.729 355.279L38.197 175.972Z" stroke="#FF750F" stroke-width="1"/>
                        </g>
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4">
                            <path d="M188.467 355.363L188.798 355.363C195.644 348.478 205.969 339.393 219.772 328.11C233.133 316.826 243.181 307.837 249.917 301.144C253.696 297.217 256.792 293.166 259.205 288.991C261.024 285.845 262.455 282.628 263.499 279.341C265.928 271.691 264.768 263.753 260.02 255.529C254.719 246.349 247.265 238.985 237.657 233.438C228.16 227.7 218.111 224.831 207.51 224.83C197.13 224.83 190.339 227.603 187.137 233.149C183.824 238.504 184.929 245.963 190.45 255.527L125.851 255.524C116.574 239.458 112.598 225.114 113.923 212.491C114.615 206.836 116.261 201.756 118.859 197.253C122.061 191.704 126.709 187.03 132.805 183.229C143.958 176.153 158.81 172.615 177.362 172.616C196.797 172.617 216.067 176.156 235.171 183.233C254.164 190.119 271.502 199.874 287.183 212.497C302.864 225.121 315.343 239.466 324.62 255.532C333.233 270.45 337.044 283.551 336.05 294.835C335.46 303.459 333.16 311.245 329.151 318.194C327.915 320.337 326.515 322.4 324.953 324.384C318.549 332.799 308.611 343.127 295.139 355.367L377.297 355.37L406.121 405.289L217.29 405.282L188.467 355.363Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M9.32197 225.972L-13.5365 225.971L-42.5255 175.765L43.2765 175.768L175.798 405.282L112.854 405.279L9.32197 225.972Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M345.247 111.915C329.566 99.2919 312.229 89.5371 293.235 82.6512L235.167 183.228C254.161 190.114 271.498 199.869 287.179 212.492L345.247 111.915Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M382.686 154.964C373.41 138.898 360.931 124.553 345.25 111.93L287.182 212.506C302.863 225.13 315.342 239.475 324.618 255.541L382.686 154.964Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M293.243 82.6472C274.139 75.57 254.869 72.031 235.434 72.0303L177.366 172.607C196.801 172.608 216.071 176.147 235.175 183.224L293.243 82.6472Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M394.118 194.257C395.112 182.973 391.301 169.872 382.688 154.953L324.619 255.53C333.233 270.448 337.044 283.55 336.05 294.834L394.118 194.257Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M235.432 72.0311C216.88 72.0304 202.027 75.5681 190.875 82.6442L132.806 183.221C143.959 176.145 158.812 172.607 177.363 172.608L235.432 72.0311Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M265.59 124.25C276.191 124.251 286.24 127.12 295.737 132.858L237.669 233.435C228.172 227.697 218.123 224.828 207.522 224.827L265.59 124.25Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M295.719 132.859C305.326 138.406 312.78 145.77 318.081 154.95L260.013 255.527C254.712 246.347 247.258 238.983 237.651 233.436L295.719 132.859Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M387.218 217.608C391.227 210.66 393.527 202.874 394.117 194.25L336.049 294.827C335.459 303.451 333.159 311.237 329.15 318.185L387.218 217.608Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M245.211 132.577C248.413 127.03 255.204 124.257 265.584 124.258L207.516 224.835C197.136 224.834 190.345 227.607 187.143 233.154L245.211 132.577Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M318.094 154.945C322.842 163.17 324.002 171.107 321.573 178.757L263.505 279.334C265.934 271.684 264.774 263.746 260.026 255.522L318.094 154.945Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M176.925 96.6737C180.127 91.1249 184.776 86.4503 190.871 82.6499L132.803 183.227C126.708 187.027 122.059 191.702 118.857 197.25L176.925 96.6737Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M387.226 217.606C385.989 219.749 384.59 221.813 383.028 223.797L324.96 324.373C326.522 322.39 327.921 320.326 329.157 318.183L387.226 217.606Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M317.269 188.408C319.087 185.262 320.519 182.045 321.562 178.758L263.494 279.335C262.451 282.622 261.019 285.839 259.201 288.985L317.269 188.408Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M245.208 132.573C241.895 137.928 243 145.387 248.522 154.95L190.454 255.527C184.932 245.964 183.827 238.505 187.14 233.15L245.208 132.573Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M176.93 96.6719C174.331 101.175 172.686 106.255 171.993 111.91L113.925 212.487C114.618 206.831 116.263 201.752 118.862 197.249L176.93 96.6719Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M317.266 188.413C314.853 192.589 311.757 196.64 307.978 200.566L249.91 301.143C253.689 297.216 256.785 293.166 259.198 288.99L317.266 188.413Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M464.198 304.708L435.375 254.789L377.307 355.366L406.13 405.285L464.198 304.708Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M353.209 254.787C366.68 242.548 376.618 232.22 383.023 223.805L324.955 324.382C318.55 332.797 308.612 343.124 295.141 355.364L353.209 254.787Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M435.37 254.787L353.212 254.784L295.144 355.361L377.302 355.364L435.37 254.787Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M183.921 154.947L248.521 154.95L190.453 255.527L125.853 255.524L183.921 154.947Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M171.992 111.914C170.668 124.537 174.643 138.881 183.92 154.947L125.852 255.524C116.575 239.458 112.599 225.114 113.924 212.491L171.992 111.914Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M307.987 200.562C301.251 207.256 291.203 216.244 277.842 227.528L219.774 328.105C233.135 316.821 243.183 307.832 249.919 301.139L307.987 200.562Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M15.5469 75.1797L44.5359 125.386L-13.5321 225.963L-42.5212 175.756L15.5469 75.1797Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M277.836 227.536C264.033 238.82 253.708 247.904 246.862 254.789L188.794 355.366C195.64 348.481 205.965 339.397 219.768 328.113L277.836 227.536Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M275.358 304.706L464.189 304.713L406.12 405.29L217.29 405.283L275.358 304.706Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M44.5279 125.39L67.3864 125.39L9.31834 225.967L-13.5401 225.966L44.5279 125.39Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M101.341 75.1911L233.863 304.705L175.795 405.282L43.2733 175.768L101.341 75.1911ZM15.5431 75.19L-42.525 175.767L43.277 175.77L101.345 75.1932L15.5431 75.19Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M246.866 254.784L246.534 254.784L188.466 355.361L188.798 355.361L246.866 254.784Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M246.539 254.781L275.362 304.701L217.294 405.277L188.471 355.358L246.539 254.781Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M67.3906 125.391L170.923 304.698L112.855 405.275L9.32257 225.967L67.3906 125.391Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                            <path d="M170.921 304.699L233.865 304.701L175.797 405.278L112.853 405.276L170.921 304.699Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="bevel"/>
                        </g>
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4" style="mix-blend-mode:hard-light">
                            <path d="M246.544 254.79L246.875 254.79C253.722 247.905 264.046 238.82 277.849 227.537C291.21 216.253 301.259 207.264 307.995 200.57C314.62 193.685 319.147 186.418 321.577 178.768C324.006 171.117 322.846 163.18 318.097 154.956C312.796 145.775 305.342 138.412 295.735 132.865C286.238 127.127 276.189 124.258 265.588 124.257C255.208 124.257 248.416 127.03 245.214 132.576C241.902 137.931 243.006 145.39 248.528 154.953L183.928 154.951C174.652 138.885 170.676 124.541 172 111.918C173.546 99.2946 179.84 89.5408 190.882 82.6559C202.035 75.5798 216.887 72.0421 235.439 72.0428C254.874 72.0435 274.144 75.5825 293.248 82.6598C312.242 89.5457 329.579 99.3005 345.261 111.924C360.942 124.548 373.421 138.892 382.697 154.958C391.311 169.877 395.121 182.978 394.128 194.262C393.355 205.546 389.656 215.396 383.031 223.811C376.627 232.226 366.688 242.554 353.217 254.794L435.375 254.797L464.198 304.716L275.367 304.709L246.544 254.79Z" fill="#4B0600"/>
                            <path d="M246.544 254.79L246.875 254.79C253.722 247.905 264.046 238.82 277.849 227.537C291.21 216.253 301.259 207.264 307.995 200.57C314.62 193.685 319.147 186.418 321.577 178.768C324.006 171.117 322.846 163.18 318.097 154.956C312.796 145.775 305.342 138.412 295.735 132.865C286.238 127.127 276.189 124.258 265.588 124.257C255.208 124.257 248.416 127.03 245.214 132.576C241.902 137.931 243.006 145.39 248.528 154.953L183.928 154.951C174.652 138.885 170.676 124.541 172 111.918C173.546 99.2946 179.84 89.5408 190.882 82.6559C202.035 75.5798 216.887 72.0421 235.439 72.0428C254.874 72.0435 274.144 75.5825 293.248 82.6598C312.242 89.5457 329.579 99.3005 345.261 111.924C360.942 124.548 373.421 138.892 382.697 154.958C391.311 169.877 395.121 182.978 394.128 194.262C393.355 205.546 389.656 215.396 383.031 223.811C376.627 232.226 366.688 242.554 353.217 254.794L435.375 254.797L464.198 304.716L275.367 304.709L246.544 254.79Z" stroke="#FF750F" stroke-width="1" stroke-linejoin="round"/>
                        </g>
                        <g class="transition-all delay-300 translate-y-0 opacity-100 duration-750 starting:opacity-0 starting:translate-y-4" style="mix-blend-mode:hard-light">
                            <path d="M67.41 125.402L44.5515 125.401L15.5625 75.1953L101.364 75.1985L233.886 304.712L170.942 304.71L67.41 125.402Z" fill="#4B0600"/>
                            <path d="M67.41 125.402L44.5515 125.401L15.5625 75.1953L101.364 75.1985L233.886 304.712L170.942 304.71L67.41 125.402Z" stroke="#FF750F" stroke-width="1"/>
                        </g>
                    </svg>
                    <div class="absolute inset-0 rounded-t-lg lg:rounded-t-none lg:rounded-r-lg shadow-[inset_0px_0px_0px_1px_rgba(26,26,0,0.16)] dark:shadow-[inset_0px_0px_0px_1px_#fffaed2d]"></div>
                </div>
            </main>
        </div>

        @if (Route::has('login'))
            <div class="h-14.5 hidden lg:block"></div>
        @endif
    </body>
</html>
--- END FILE: resources/views/welcome.blade.php ---

--- START FILE: routes/api.php ---
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| is assigned the "api" middleware group. Enjoy building your API!
|
*/

Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});

Route::prefix('v1')->group(function () {
    // Include route files from modules
    $modulesPath = app_path('Modules');
    $moduleDirectories = glob($modulesPath . '/*', GLOB_ONLYDIR);

    foreach ($moduleDirectories as $moduleDirectory) {
        $moduleName = basename($moduleDirectory);
        $routeFilePath = $moduleDirectory . '/routes/api.php';

        if (file_exists($routeFilePath)) {
            Route::group(['prefix' => strtolower($moduleName)], function () use ($routeFilePath) {
                require $routeFilePath;
            });
        }
    }
});
--- END FILE: routes/api.php ---

--- START FILE: routes/console.php ---
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');
--- END FILE: routes/console.php ---

--- START FILE: routes/web.php ---
<?php

use Illuminate\Support\Facades\Route;

Route::get('/', function () {
    return view('welcome');
});
--- END FILE: routes/web.php ---

--- START FILE: storage/app/.gitignore ---
*
!private/
!public/
!.gitignore
--- END FILE: storage/app/.gitignore ---

--- START FILE: storage/app/private/.gitignore ---
*
!.gitignore
--- END FILE: storage/app/private/.gitignore ---

--- START FILE: storage/app/public/.gitignore ---
*
!.gitignore
--- END FILE: storage/app/public/.gitignore ---

--- START FILE: tests/Feature/ApiTestCase.php ---
<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ApiTestCase extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();

        $this->withHeaders([
            'Accept' => 'application/json',
        ]);
    }
}
--- END FILE: tests/Feature/ApiTestCase.php ---

--- START FILE: tests/Feature/ExampleTest.php ---
<?php

namespace Tests\Feature;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}
--- END FILE: tests/Feature/ExampleTest.php ---

--- START FILE: tests/TestCase.php ---
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    //
}
--- END FILE: tests/TestCase.php ---

--- START FILE: tests/Unit/ExampleTest.php ---
<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_that_true_is_true(): void
    {
        $this->assertTrue(true);
    }
}
--- END FILE: tests/Unit/ExampleTest.php ---

--- START FILE: tests/Unit/UserTest.php ---
<?php

namespace Tests\Unit;

use App\Modules\UserManagement\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class UserTest extends TestCase
{
    use RefreshDatabase;

    /** @test */
    public function it_can_create_a_user()
    {
        $user = User::factory()->create();

        $this->assertInstanceOf(User::class, $user);
        $this->assertNotNull($user->id);
    }

    /** @test */
    public function it_has_relationships()
    {
        $user = User::factory()->create();

        $this->assertTrue(method_exists($user, 'subscriptions'));
        $this->assertTrue(method_exists($user, 'notes'));
        $this->assertTrue(method_exists($user, 'reminders'));
        $this->assertTrue(method_exists($user, 'tracking'));
    }

    /** @test */
    public function it_has_correct_attributes()
    {
        $user = User::factory()->create([
            'name' => 'John Doe',
            'email' => 'john@example.com',
            'password' => bcrypt('password'),
        ]);

        $this->assertEquals('John Doe', $user->name);
        $this->assertEquals('john@example.com', $user->email);
        $this->assertTrue(\Hash::check('password', $user->password));
    }

    /** @test */
    public function it_has_correct_fillable_properties()
    {
        $user = new User();

        $fillable = $user->getFillable();

        $this->assertContains('name', $fillable);
        $this->assertContains('email', $fillable);
        $this->assertContains('password', $fillable);
    }

    /** @test */
    public function it_has_correct_hidden_properties()
    {
        $user = new User();

        $hidden = $user->getHidden();

        $this->assertContains('password', $hidden);
        $this->assertContains('remember_token', $hidden);
    }

    /** @test */
    public function it_has_correct_casts()
    {
        $user = new User();

        $casts = $user->getCasts();

        $this->assertArrayHasKey('email_verified_at', $casts);
        $this->assertEquals('datetime', $casts['email_verified_at']);
    }

    /** @test */
    public function it_has_correct_with_relations()
    {
        $user = new User();

        $with = $user->getWith();

        $this->assertContains('subscriptions', $with);
    }
}
--- END FILE: tests/Unit/UserTest.php ---

--- START FILE: vite.config.js ---
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';
import tailwindcss from '@tailwindcss/vite';

export default defineConfig({
    plugins: [
        laravel({
            input: ['resources/css/app.css', 'resources/js/app.js'],
            refresh: true,
        }),
        tailwindcss(),
    ],
});
--- END FILE: vite.config.js ---

